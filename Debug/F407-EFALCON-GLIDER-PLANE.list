
F407-EFALCON-GLIDER-PLANE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c364  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800c4f8  0800c4f8  0001c4f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c980  0800c980  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c980  0800c980  0001c980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c988  0800c988  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c988  0800c988  0001c988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c98c  0800c98c  0001c98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa0  200001e8  0800cb78  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c88  0800cb78  00020c88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126d6  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000247e  00000000  00000000  000328ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00034d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001018  00000000  00000000  00035e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000033b9  00000000  00000000  00036e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca86  00000000  00000000  0003a249  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2a1a  00000000  00000000  00046ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001196e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005804  00000000  00000000  00119764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c4dc 	.word	0x0800c4dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800c4dc 	.word	0x0800c4dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bd 	b.w	8001024 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b972 	b.w	8001024 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14b      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4615      	mov	r5, r2
 8000d6a:	d967      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0720 	rsb	r7, r2, #32
 8000d76:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d7e:	4095      	lsls	r5, r2
 8000d80:	ea47 0803 	orr.w	r8, r7, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d90:	fa1f fc85 	uxth.w	ip, r5
 8000d94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18eb      	adds	r3, r5, r3
 8000da6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000daa:	f080 811b 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8118 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000db4:	3f02      	subs	r7, #2
 8000db6:	442b      	add	r3, r5
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	192c      	adds	r4, r5, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000de0:	3802      	subs	r0, #2
 8000de2:	442c      	add	r4, r5
 8000de4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000de8:	eba4 040c 	sub.w	r4, r4, ip
 8000dec:	2700      	movs	r7, #0
 8000dee:	b11e      	cbz	r6, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c6 4300 	strd	r4, r3, [r6]
 8000df8:	4639      	mov	r1, r7
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xbe>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80eb 	beq.w	8000fde <__udivmoddi4+0x286>
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e0e:	4638      	mov	r0, r7
 8000e10:	4639      	mov	r1, r7
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f783 	clz	r7, r3
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d147      	bne.n	8000eae <__udivmoddi4+0x156>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd0>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80fa 	bhi.w	800101c <__udivmoddi4+0x2c4>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4698      	mov	r8, r3
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000e36:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xe8>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 808f 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e4a:	1b49      	subs	r1, r1, r5
 8000e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e50:	fa1f f885 	uxth.w	r8, r5
 8000e54:	2701      	movs	r7, #1
 8000e56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5a:	0c23      	lsrs	r3, r4, #16
 8000e5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb08 f10c 	mul.w	r1, r8, ip
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6c:	18eb      	adds	r3, r5, r3
 8000e6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	f200 80cd 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e7a:	4684      	mov	ip, r0
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	b2a3      	uxth	r3, r4
 8000e80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e8c:	fb08 f800 	mul.w	r8, r8, r0
 8000e90:	45a0      	cmp	r8, r4
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x14c>
 8000e94:	192c      	adds	r4, r5, r4
 8000e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x14a>
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	f200 80b6 	bhi.w	800100e <__udivmoddi4+0x2b6>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	eba4 0408 	sub.w	r4, r4, r8
 8000ea8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eac:	e79f      	b.n	8000dee <__udivmoddi4+0x96>
 8000eae:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb2:	40bb      	lsls	r3, r7
 8000eb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000eb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ebc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ec8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ecc:	4325      	orrs	r5, r4
 8000ece:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed2:	0c2c      	lsrs	r4, r5, #16
 8000ed4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ed8:	fa1f fa8e 	uxth.w	sl, lr
 8000edc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee4:	429c      	cmp	r4, r3
 8000ee6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eea:	fa00 f107 	lsl.w	r1, r0, r7
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	f080 8087 	bcs.w	800100a <__udivmoddi4+0x2b2>
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f240 8084 	bls.w	800100a <__udivmoddi4+0x2b2>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4473      	add	r3, lr
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	b2ad      	uxth	r5, r5
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f1c:	45a2      	cmp	sl, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1e 0404 	adds.w	r4, lr, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	d26b      	bcs.n	8001002 <__udivmoddi4+0x2aa>
 8000f2a:	45a2      	cmp	sl, r4
 8000f2c:	d969      	bls.n	8001002 <__udivmoddi4+0x2aa>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4474      	add	r4, lr
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	eba4 040a 	sub.w	r4, r4, sl
 8000f3e:	454c      	cmp	r4, r9
 8000f40:	46c2      	mov	sl, r8
 8000f42:	464b      	mov	r3, r9
 8000f44:	d354      	bcc.n	8000ff0 <__udivmoddi4+0x298>
 8000f46:	d051      	beq.n	8000fec <__udivmoddi4+0x294>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d069      	beq.n	8001020 <__udivmoddi4+0x2c8>
 8000f4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f50:	eb64 0403 	sbc.w	r4, r4, r3
 8000f54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f58:	40fd      	lsrs	r5, r7
 8000f5a:	40fc      	lsrs	r4, r7
 8000f5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f60:	e9c6 5400 	strd	r5, r4, [r6]
 8000f64:	2700      	movs	r7, #0
 8000f66:	e747      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f70:	4095      	lsls	r5, r2
 8000f72:	fa01 f002 	lsl.w	r0, r1, r2
 8000f76:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f7e:	4338      	orrs	r0, r7
 8000f80:	0c01      	lsrs	r1, r0, #16
 8000f82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f86:	fa1f f885 	uxth.w	r8, r5
 8000f8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f92:	fb07 f308 	mul.w	r3, r7, r8
 8000f96:	428b      	cmp	r3, r1
 8000f98:	fa04 f402 	lsl.w	r4, r4, r2
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x256>
 8000f9e:	1869      	adds	r1, r5, r1
 8000fa0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa4:	d22f      	bcs.n	8001006 <__udivmoddi4+0x2ae>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d92d      	bls.n	8001006 <__udivmoddi4+0x2ae>
 8000faa:	3f02      	subs	r7, #2
 8000fac:	4429      	add	r1, r5
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b281      	uxth	r1, r0
 8000fb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb00 f308 	mul.w	r3, r0, r8
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x27e>
 8000fc6:	1869      	adds	r1, r5, r1
 8000fc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fcc:	d217      	bcs.n	8000ffe <__udivmoddi4+0x2a6>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d915      	bls.n	8000ffe <__udivmoddi4+0x2a6>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4429      	add	r1, r5
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fdc:	e73b      	b.n	8000e56 <__udivmoddi4+0xfe>
 8000fde:	4637      	mov	r7, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e709      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	e6e7      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fec:	4541      	cmp	r1, r8
 8000fee:	d2ab      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	e7a4      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8000ffe:	4660      	mov	r0, ip
 8001000:	e7e9      	b.n	8000fd6 <__udivmoddi4+0x27e>
 8001002:	4618      	mov	r0, r3
 8001004:	e795      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001006:	4667      	mov	r7, ip
 8001008:	e7d1      	b.n	8000fae <__udivmoddi4+0x256>
 800100a:	4681      	mov	r9, r0
 800100c:	e77c      	b.n	8000f08 <__udivmoddi4+0x1b0>
 800100e:	3802      	subs	r0, #2
 8001010:	442c      	add	r4, r5
 8001012:	e747      	b.n	8000ea4 <__udivmoddi4+0x14c>
 8001014:	f1ac 0c02 	sub.w	ip, ip, #2
 8001018:	442b      	add	r3, r5
 800101a:	e72f      	b.n	8000e7c <__udivmoddi4+0x124>
 800101c:	4638      	mov	r0, r7
 800101e:	e708      	b.n	8000e32 <__udivmoddi4+0xda>
 8001020:	4637      	mov	r7, r6
 8001022:	e6e9      	b.n	8000df8 <__udivmoddi4+0xa0>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <kalman_init>:
#include "Kalman.h"

void kalman_init(Kalman_t *kalman, float mea_e, float est_e, float q){
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	ed87 0a02 	vstr	s0, [r7, #8]
 8001034:	edc7 0a01 	vstr	s1, [r7, #4]
 8001038:	ed87 1a00 	vstr	s2, [r7]
	kalman->err_measure = mea_e;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	601a      	str	r2, [r3, #0]
	kalman->err_estimate = est_e;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	605a      	str	r2, [r3, #4]
	kalman->q = q;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	609a      	str	r2, [r3, #8]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <kalman_updateEstimate>:

float kalman_updateEstimate(Kalman_t *kalman, float mea){
 800105c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	ed87 0a00 	vstr	s0, [r7]
	kalman->kalman_gain = kalman->err_estimate / (kalman->err_estimate + kalman->err_measure);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	ed93 7a01 	vldr	s14, [r3, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman->current_estimate = kalman->last_estimate + kalman->kalman_gain * (mea - kalman->last_estimate);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	edd3 6a05 	vldr	s13, [r3, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	edd3 7a04 	vldr	s15, [r3, #16]
 800109c:	ed97 6a00 	vldr	s12, [r7]
 80010a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80010a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman->err_estimate = (1.0 - kalman->kalman_gain) * kalman->err_estimate + fabs(kalman->last_estimate - kalman->current_estimate) * kalman->q;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa46 	bl	8000548 <__aeabi_f2d>
 80010bc:	4603      	mov	r3, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	461a      	mov	r2, r3
 80010c2:	4623      	mov	r3, r4
 80010c4:	f04f 0000 	mov.w	r0, #0
 80010c8:	4926      	ldr	r1, [pc, #152]	; (8001164 <kalman_updateEstimate+0x108>)
 80010ca:	f7ff f8dd 	bl	8000288 <__aeabi_dsub>
 80010ce:	4603      	mov	r3, r0
 80010d0:	460c      	mov	r4, r1
 80010d2:	4625      	mov	r5, r4
 80010d4:	461c      	mov	r4, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa34 	bl	8000548 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff fa86 	bl	80005f8 <__aeabi_dmul>
 80010ec:	4603      	mov	r3, r0
 80010ee:	460c      	mov	r4, r1
 80010f0:	4625      	mov	r5, r4
 80010f2:	461c      	mov	r4, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	eef0 7ae7 	vabs.f32	s15, s15
 8001108:	ee17 0a90 	vmov	r0, s15
 800110c:	f7ff fa1c 	bl	8000548 <__aeabi_f2d>
 8001110:	4680      	mov	r8, r0
 8001112:	4689      	mov	r9, r1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa15 	bl	8000548 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4640      	mov	r0, r8
 8001124:	4649      	mov	r1, r9
 8001126:	f7ff fa67 	bl	80005f8 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4620      	mov	r0, r4
 8001130:	4629      	mov	r1, r5
 8001132:	f7ff f8ab 	bl	800028c <__adddf3>
 8001136:	4603      	mov	r3, r0
 8001138:	460c      	mov	r4, r1
 800113a:	4618      	mov	r0, r3
 800113c:	4621      	mov	r1, r4
 800113e:	f7ff fd53 	bl	8000be8 <__aeabi_d2f>
 8001142:	4602      	mov	r2, r0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	605a      	str	r2, [r3, #4]
	kalman->last_estimate = kalman->current_estimate;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	611a      	str	r2, [r3, #16]

	return kalman->current_estimate;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	ee07 3a90 	vmov	s15, r3
}
 8001158:	eeb0 0a67 	vmov.f32	s0, s15
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001164:	3ff00000 	.word	0x3ff00000

08001168 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_2;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_HIGH_RES;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2204      	movs	r2, #4
 8001180:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_ULTRA_LOW_POWER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_SKIPPED;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_05;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	715a      	strb	r2, [r3, #5]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	460b      	mov	r3, r1
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011ba:	7afb      	ldrb	r3, [r7, #11]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	8af9      	ldrh	r1, [r7, #22]
 80011c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2302      	movs	r3, #2
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	f004 f8a7 	bl	8005324 <HAL_I2C_Mem_Read>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10b      	bne.n	80011f4 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80011dc:	7d7b      	ldrb	r3, [r7, #21]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	7d3b      	ldrb	r3, [r7, #20]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	801a      	strh	r2, [r3, #0]
		return true;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <read_register16+0x56>
	} else
		return false;
 80011f4:	2300      	movs	r3, #0

}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b08b      	sub	sp, #44	; 0x2c
 8001202:	af04      	add	r7, sp, #16
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	461a      	mov	r2, r3
 800120a:	460b      	mov	r3, r1
 800120c:	72fb      	strb	r3, [r7, #11]
 800120e:	4613      	mov	r3, r2
 8001210:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	b29c      	uxth	r4, r3
 8001222:	7abb      	ldrb	r3, [r7, #10]
 8001224:	b29b      	uxth	r3, r3
 8001226:	8af9      	ldrh	r1, [r7, #22]
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	9202      	str	r2, [sp, #8]
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	4622      	mov	r2, r4
 8001238:	f004 f874 	bl	8005324 <HAL_I2C_Mem_Read>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <read_data+0x48>
		return 0;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <read_data+0x4a>
	else
		return 1;
 8001246:	2301      	movs	r3, #1

}
 8001248:	4618      	mov	r0, r3
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd90      	pop	{r4, r7, pc}

08001250 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	461a      	mov	r2, r3
 800125c:	2188      	movs	r1, #136	; 0x88
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff9e 	bl	80011a0 <read_register16>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d06f      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3302      	adds	r3, #2
 800126e:	461a      	mov	r2, r3
 8001270:	218a      	movs	r1, #138	; 0x8a
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff94 	bl	80011a0 <read_register16>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d065      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3304      	adds	r3, #4
 8001282:	461a      	mov	r2, r3
 8001284:	218c      	movs	r1, #140	; 0x8c
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff8a 	bl	80011a0 <read_register16>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d05b      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3306      	adds	r3, #6
 8001296:	461a      	mov	r2, r3
 8001298:	218e      	movs	r1, #142	; 0x8e
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ff80 	bl	80011a0 <read_register16>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d051      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3308      	adds	r3, #8
 80012aa:	461a      	mov	r2, r3
 80012ac:	2190      	movs	r1, #144	; 0x90
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff76 	bl	80011a0 <read_register16>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d047      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	330a      	adds	r3, #10
 80012be:	461a      	mov	r2, r3
 80012c0:	2192      	movs	r1, #146	; 0x92
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ff6c 	bl	80011a0 <read_register16>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d03d      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	330c      	adds	r3, #12
 80012d2:	461a      	mov	r2, r3
 80012d4:	2194      	movs	r1, #148	; 0x94
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff62 	bl	80011a0 <read_register16>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d033      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	330e      	adds	r3, #14
 80012e6:	461a      	mov	r2, r3
 80012e8:	2196      	movs	r1, #150	; 0x96
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff58 	bl	80011a0 <read_register16>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d029      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3310      	adds	r3, #16
 80012fa:	461a      	mov	r2, r3
 80012fc:	2198      	movs	r1, #152	; 0x98
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff4e 	bl	80011a0 <read_register16>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01f      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3312      	adds	r3, #18
 800130e:	461a      	mov	r2, r3
 8001310:	219a      	movs	r1, #154	; 0x9a
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ff44 	bl	80011a0 <read_register16>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d015      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3314      	adds	r3, #20
 8001322:	461a      	mov	r2, r3
 8001324:	219c      	movs	r1, #156	; 0x9c
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff3a 	bl	80011a0 <read_register16>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001336:	461a      	mov	r2, r3
 8001338:	219e      	movs	r1, #158	; 0x9e
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff30 	bl	80011a0 <read_register16>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <read_calibration_data+0xfa>

		return true;
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <read_calibration_data+0xfc>
	}

	return false;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f103 0218 	add.w	r2, r3, #24
 8001362:	2301      	movs	r3, #1
 8001364:	21a1      	movs	r1, #161	; 0xa1
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff49 	bl	80011fe <read_data>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d14b      	bne.n	800140a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	331a      	adds	r3, #26
 8001376:	461a      	mov	r2, r3
 8001378:	21e1      	movs	r1, #225	; 0xe1
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff10 	bl	80011a0 <read_register16>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d041      	beq.n	800140a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f103 021c 	add.w	r2, r3, #28
 800138c:	2301      	movs	r3, #1
 800138e:	21e3      	movs	r1, #227	; 0xe3
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff34 	bl	80011fe <read_data>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d136      	bne.n	800140a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800139c:	f107 030e 	add.w	r3, r7, #14
 80013a0:	461a      	mov	r2, r3
 80013a2:	21e4      	movs	r1, #228	; 0xe4
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fefb 	bl	80011a0 <read_register16>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d02c      	beq.n	800140a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	461a      	mov	r2, r3
 80013b6:	21e5      	movs	r1, #229	; 0xe5
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff fef1 	bl	80011a0 <read_register16>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d022      	beq.n	800140a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80013ca:	2301      	movs	r3, #1
 80013cc:	21e7      	movs	r1, #231	; 0xe7
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ff15 	bl	80011fe <read_data>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d117      	bne.n	800140a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	b21b      	sxth	r3, r3
 80013e0:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	121b      	asrs	r3, r3, #8
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80013fa:	89bb      	ldrh	r3, [r7, #12]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b21a      	sxth	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	841a      	strh	r2, [r3, #32]

		return true;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <read_hum_calibration_data+0xb8>
	}

	return false;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af04      	add	r7, sp, #16
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
 8001420:	4613      	mov	r3, r2
 8001422:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	b29a      	uxth	r2, r3
 8001434:	89f9      	ldrh	r1, [r7, #14]
 8001436:	f242 7310 	movw	r3, #10000	; 0x2710
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	2301      	movs	r3, #1
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	1cbb      	adds	r3, r7, #2
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	f003 fe73 	bl	8005130 <HAL_I2C_Mem_Write>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <write_register8+0x40>
		return false;
 8001450:	2300      	movs	r3, #0
 8001452:	e000      	b.n	8001456 <write_register8+0x42>
	else
		return true;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800146c:	2b76      	cmp	r3, #118	; 0x76
 800146e:	d005      	beq.n	800147c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001474:	2b77      	cmp	r3, #119	; 0x77
 8001476:	d001      	beq.n	800147c <bmp280_init+0x1e>

		return false;
 8001478:	2300      	movs	r3, #0
 800147a:	e099      	b.n	80015b0 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001482:	2301      	movs	r3, #1
 8001484:	21d0      	movs	r1, #208	; 0xd0
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff feb9 	bl	80011fe <read_data>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <bmp280_init+0x38>
		return false;
 8001492:	2300      	movs	r3, #0
 8001494:	e08c      	b.n	80015b0 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800149c:	2b58      	cmp	r3, #88	; 0x58
 800149e:	d006      	beq.n	80014ae <bmp280_init+0x50>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014a6:	2b60      	cmp	r3, #96	; 0x60
 80014a8:	d001      	beq.n	80014ae <bmp280_init+0x50>

		return false;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e080      	b.n	80015b0 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80014ae:	22b6      	movs	r2, #182	; 0xb6
 80014b0:	21e0      	movs	r1, #224	; 0xe0
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffae 	bl	8001414 <write_register8>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <bmp280_init+0x64>
		return false;
 80014be:	2300      	movs	r3, #0
 80014c0:	e076      	b.n	80015b0 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80014c2:	f107 020c 	add.w	r2, r7, #12
 80014c6:	2301      	movs	r3, #1
 80014c8:	21f3      	movs	r1, #243	; 0xf3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fe97 	bl	80011fe <read_data>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f5      	bne.n	80014c2 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80014d6:	7b3b      	ldrb	r3, [r7, #12]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff feb5 	bl	8001250 <read_calibration_data>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f083 0301 	eor.w	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d100      	bne.n	80014f4 <bmp280_init+0x96>
 80014f2:	e001      	b.n	80014f8 <bmp280_init+0x9a>
		return false;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e05b      	b.n	80015b0 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014fe:	2b60      	cmp	r3, #96	; 0x60
 8001500:	d10a      	bne.n	8001518 <bmp280_init+0xba>
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff26 	bl	8001354 <read_hum_calibration_data>
 8001508:	4603      	mov	r3, r0
 800150a:	f083 0301 	eor.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <bmp280_init+0xba>
		return false;
 8001514:	2300      	movs	r3, #0
 8001516:	e04b      	b.n	80015b0 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	795b      	ldrb	r3, [r3, #5]
 800151c:	015b      	lsls	r3, r3, #5
 800151e:	b25a      	sxtb	r2, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	b25b      	sxtb	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b25b      	sxtb	r3, r3
 800152c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	461a      	mov	r2, r3
 8001532:	21f5      	movs	r1, #245	; 0xf5
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff6d 	bl	8001414 <write_register8>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <bmp280_init+0xe6>
		return false;
 8001540:	2300      	movs	r3, #0
 8001542:	e035      	b.n	80015b0 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d102      	bne.n	8001552 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	78db      	ldrb	r3, [r3, #3]
 8001556:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001558:	b25a      	sxtb	r2, r3
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	789b      	ldrb	r3, [r3, #2]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	b25b      	sxtb	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b25a      	sxtb	r2, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b25b      	sxtb	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001570:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001578:	2b60      	cmp	r3, #96	; 0x60
 800157a:	d10d      	bne.n	8001598 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001582:	7b7b      	ldrb	r3, [r7, #13]
 8001584:	461a      	mov	r2, r3
 8001586:	21f2      	movs	r1, #242	; 0xf2
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff43 	bl	8001414 <write_register8>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <bmp280_init+0x13a>
			return false;
 8001594:	2300      	movs	r3, #0
 8001596:	e00b      	b.n	80015b0 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001598:	7bbb      	ldrb	r3, [r7, #14]
 800159a:	461a      	mov	r2, r3
 800159c:	21f4      	movs	r1, #244	; 0xf4
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ff38 	bl	8001414 <write_register8>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <bmp280_init+0x150>
		return false;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <bmp280_init+0x152>
	}

	return true;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <bmp280_is_measuring>:
		return false;
	}
	return true;
}

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 80015c0:	f107 020f 	add.w	r2, r7, #15
 80015c4:	2301      	movs	r3, #1
 80015c6:	21f3      	movs	r1, #243	; 0xf3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fe18 	bl	80011fe <read_data>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <bmp280_is_measuring+0x20>
		return false;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e007      	b.n	80015e8 <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <bmp280_is_measuring+0x2e>
		return true;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <bmp280_is_measuring+0x30>
	}
	return false;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	10da      	asrs	r2, r3, #3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800160e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001612:	12db      	asrs	r3, r3, #11
 8001614:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	111b      	asrs	r3, r3, #4
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	8812      	ldrh	r2, [r2, #0]
 800161e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	1112      	asrs	r2, r2, #4
 8001624:	68f9      	ldr	r1, [r7, #12]
 8001626:	8809      	ldrh	r1, [r1, #0]
 8001628:	1a52      	subs	r2, r2, r1
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001636:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800163a:	139b      	asrs	r3, r3, #14
 800163c:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	441a      	add	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	3380      	adds	r3, #128	; 0x80
 8001654:	121b      	asrs	r3, r3, #8
}
 8001656:	4618      	mov	r0, r3
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001662:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4619      	mov	r1, r3
 8001674:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001678:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800167c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001680:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	6a3a      	ldr	r2, [r7, #32]
 8001688:	fb02 f203 	mul.w	r2, r2, r3
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	6a39      	ldr	r1, [r7, #32]
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	441a      	add	r2, r3
 8001696:	6a39      	ldr	r1, [r7, #32]
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	fba1 3403 	umull	r3, r4, r1, r3
 800169e:	4422      	add	r2, r4
 80016a0:	4614      	mov	r4, r2
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80016a8:	b211      	sxth	r1, r2
 80016aa:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80016ae:	fb01 f504 	mul.w	r5, r1, r4
 80016b2:	fb03 f002 	mul.w	r0, r3, r2
 80016b6:	4428      	add	r0, r5
 80016b8:	fba3 3401 	umull	r3, r4, r3, r1
 80016bc:	1902      	adds	r2, r0, r4
 80016be:	4614      	mov	r4, r2
 80016c0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80016c4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	fb04 f102 	mul.w	r1, r4, r2
 80016da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016dc:	fb03 f202 	mul.w	r2, r3, r2
 80016e0:	1888      	adds	r0, r1, r2
 80016e2:	6a3a      	ldr	r2, [r7, #32]
 80016e4:	fba2 1203 	umull	r1, r2, r2, r3
 80016e8:	1883      	adds	r3, r0, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	f04f 0500 	mov.w	r5, #0
 80016f0:	f04f 0600 	mov.w	r6, #0
 80016f4:	0456      	lsls	r6, r2, #17
 80016f6:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80016fa:	044d      	lsls	r5, r1, #17
 80016fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001700:	186b      	adds	r3, r5, r1
 8001702:	eb46 0402 	adc.w	r4, r6, r2
 8001706:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001710:	b219      	sxth	r1, r3
 8001712:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001716:	f04f 0500 	mov.w	r5, #0
 800171a:	f04f 0600 	mov.w	r6, #0
 800171e:	00ce      	lsls	r6, r1, #3
 8001720:	2500      	movs	r5, #0
 8001722:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001726:	186b      	adds	r3, r5, r1
 8001728:	eb46 0402 	adc.w	r4, r6, r2
 800172c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	6a3a      	ldr	r2, [r7, #32]
 8001734:	fb02 f203 	mul.w	r2, r2, r3
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	6a39      	ldr	r1, [r7, #32]
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	441a      	add	r2, r3
 8001742:	6a39      	ldr	r1, [r7, #32]
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	fba1 3403 	umull	r3, r4, r1, r3
 800174a:	4422      	add	r2, r4
 800174c:	4614      	mov	r4, r2
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001754:	b211      	sxth	r1, r2
 8001756:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800175a:	fb01 f504 	mul.w	r5, r1, r4
 800175e:	fb03 f002 	mul.w	r0, r3, r2
 8001762:	4428      	add	r0, r5
 8001764:	fba3 3401 	umull	r3, r4, r3, r1
 8001768:	1902      	adds	r2, r0, r4
 800176a:	4614      	mov	r4, r2
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	0a19      	lsrs	r1, r3, #8
 8001776:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800177a:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001782:	b21b      	sxth	r3, r3
 8001784:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001788:	6a38      	ldr	r0, [r7, #32]
 800178a:	fb04 f500 	mul.w	r5, r4, r0
 800178e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001790:	fb03 f000 	mul.w	r0, r3, r0
 8001794:	4428      	add	r0, r5
 8001796:	6a3d      	ldr	r5, [r7, #32]
 8001798:	fba5 5603 	umull	r5, r6, r5, r3
 800179c:	1983      	adds	r3, r0, r6
 800179e:	461e      	mov	r6, r3
 80017a0:	f04f 0b00 	mov.w	fp, #0
 80017a4:	f04f 0c00 	mov.w	ip, #0
 80017a8:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 80017ac:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80017b0:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017b4:	eb1b 0301 	adds.w	r3, fp, r1
 80017b8:	eb4c 0402 	adc.w	r4, ip, r2
 80017bc:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80017c0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017c4:	1c19      	adds	r1, r3, #0
 80017c6:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	88db      	ldrh	r3, [r3, #6]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	f04f 0400 	mov.w	r4, #0
 80017d4:	fb03 f502 	mul.w	r5, r3, r2
 80017d8:	fb01 f004 	mul.w	r0, r1, r4
 80017dc:	4428      	add	r0, r5
 80017de:	fba1 3403 	umull	r3, r4, r1, r3
 80017e2:	1902      	adds	r2, r0, r4
 80017e4:	4614      	mov	r4, r2
 80017e6:	f04f 0100 	mov.w	r1, #0
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	1061      	asrs	r1, r4, #1
 80017f0:	17e2      	asrs	r2, r4, #31
 80017f2:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 80017f6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017fa:	4323      	orrs	r3, r4
 80017fc:	d101      	bne.n	8001802 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80017fe:	2300      	movs	r3, #0
 8001800:	e0d4      	b.n	80019ac <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001808:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800180c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	ea4f 0963 	mov.w	r9, r3, asr #1
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 800181c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001820:	4645      	mov	r5, r8
 8001822:	464e      	mov	r6, r9
 8001824:	1aed      	subs	r5, r5, r3
 8001826:	eb66 0604 	sbc.w	r6, r6, r4
 800182a:	46a8      	mov	r8, r5
 800182c:	46b1      	mov	r9, r6
 800182e:	eb18 0308 	adds.w	r3, r8, r8
 8001832:	eb49 0409 	adc.w	r4, r9, r9
 8001836:	4698      	mov	r8, r3
 8001838:	46a1      	mov	r9, r4
 800183a:	eb18 0805 	adds.w	r8, r8, r5
 800183e:	eb49 0906 	adc.w	r9, r9, r6
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800184e:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001852:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001856:	eb18 0801 	adds.w	r8, r8, r1
 800185a:	eb49 0902 	adc.w	r9, r9, r2
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800186a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800186e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001872:	4688      	mov	r8, r1
 8001874:	4691      	mov	r9, r2
 8001876:	eb18 0805 	adds.w	r8, r8, r5
 800187a:	eb49 0906 	adc.w	r9, r9, r6
 800187e:	f04f 0100 	mov.w	r1, #0
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800188a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800188e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001892:	4688      	mov	r8, r1
 8001894:	4691      	mov	r9, r2
 8001896:	eb18 0005 	adds.w	r0, r8, r5
 800189a:	eb49 0106 	adc.w	r1, r9, r6
 800189e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a2:	f7ff f9f1 	bl	8000c88 <__aeabi_ldivmod>
 80018a6:	4603      	mov	r3, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80018b4:	b219      	sxth	r1, r3
 80018b6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80018ba:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	f04f 0400 	mov.w	r4, #0
 80018c6:	0b6b      	lsrs	r3, r5, #13
 80018c8:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80018cc:	1374      	asrs	r4, r6, #13
 80018ce:	fb03 f502 	mul.w	r5, r3, r2
 80018d2:	fb01 f004 	mul.w	r0, r1, r4
 80018d6:	4428      	add	r0, r5
 80018d8:	fba1 1203 	umull	r1, r2, r1, r3
 80018dc:	1883      	adds	r3, r0, r2
 80018de:	461a      	mov	r2, r3
 80018e0:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	f04f 0400 	mov.w	r4, #0
 80018ec:	0b6b      	lsrs	r3, r5, #13
 80018ee:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80018f2:	1374      	asrs	r4, r6, #13
 80018f4:	fb03 f502 	mul.w	r5, r3, r2
 80018f8:	fb01 f004 	mul.w	r0, r1, r4
 80018fc:	4428      	add	r0, r5
 80018fe:	fba1 1203 	umull	r1, r2, r1, r3
 8001902:	1883      	adds	r3, r0, r2
 8001904:	461a      	mov	r2, r3
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	f04f 0400 	mov.w	r4, #0
 800190e:	0e4b      	lsrs	r3, r1, #25
 8001910:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001914:	1654      	asrs	r4, r2, #25
 8001916:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001920:	b21b      	sxth	r3, r3
 8001922:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	fb04 f102 	mul.w	r1, r4, r2
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	fb03 f202 	mul.w	r2, r3, r2
 8001932:	1888      	adds	r0, r1, r2
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	fba2 1203 	umull	r1, r2, r2, r3
 800193a:	1883      	adds	r3, r0, r2
 800193c:	461a      	mov	r2, r3
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f04f 0400 	mov.w	r4, #0
 8001946:	0ccb      	lsrs	r3, r1, #19
 8001948:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800194c:	14d4      	asrs	r4, r2, #19
 800194e:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001952:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001956:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800195a:	eb11 0803 	adds.w	r8, r1, r3
 800195e:	eb42 0904 	adc.w	r9, r2, r4
 8001962:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001966:	eb13 0508 	adds.w	r5, r3, r8
 800196a:	eb44 0609 	adc.w	r6, r4, r9
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	0a29      	lsrs	r1, r5, #8
 8001978:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800197c:	1232      	asrs	r2, r6, #8
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001984:	b21d      	sxth	r5, r3
 8001986:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800198a:	f04f 0800 	mov.w	r8, #0
 800198e:	f04f 0900 	mov.w	r9, #0
 8001992:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001996:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800199a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800199e:	eb18 0301 	adds.w	r3, r8, r1
 80019a2:	eb49 0402 	adc.w	r4, r9, r2
 80019a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 80019aa:	693b      	ldr	r3, [r7, #16]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

080019b6 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80019b6:	b480      	push	{r7}
 80019b8:	b087      	sub	sp, #28
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80019c8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	039a      	lsls	r2, r3, #14
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019d4:	051b      	lsls	r3, r3, #20
 80019d6:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019de:	4619      	mov	r1, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fb03 f301 	mul.w	r3, r3, r1
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019ec:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80019f4:	4611      	mov	r1, r2
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	fb02 f201 	mul.w	r2, r2, r1
 80019fc:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	7f09      	ldrb	r1, [r1, #28]
 8001a02:	4608      	mov	r0, r1
 8001a04:	6979      	ldr	r1, [r7, #20]
 8001a06:	fb01 f100 	mul.w	r1, r1, r0
 8001a0a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a0c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a10:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a14:	1292      	asrs	r2, r2, #10
 8001a16:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a20:	fb01 f202 	mul.w	r2, r1, r2
 8001a24:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001a28:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	13db      	asrs	r3, r3, #15
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	13d2      	asrs	r2, r2, #15
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	7e12      	ldrb	r2, [r2, #24]
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a54:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a5c:	bfa8      	it	ge
 8001a5e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a62:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	131b      	asrs	r3, r3, #12
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	; 0x30
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a88:	2b60      	cmp	r3, #96	; 0x60
 8001a8a:	d007      	beq.n	8001a9c <bmp280_read_fixed+0x28>
		if (humidity)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <bmp280_read_fixed+0x32>
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	e000      	b.n	8001aa8 <bmp280_read_fixed+0x34>
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f107 0218 	add.w	r2, r7, #24
 8001ab2:	21f7      	movs	r1, #247	; 0xf7
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fba2 	bl	80011fe <read_data>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <bmp280_read_fixed+0x50>
		return false;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e038      	b.n	8001b36 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001ac4:	7e3b      	ldrb	r3, [r7, #24]
 8001ac6:	031a      	lsls	r2, r3, #12
 8001ac8:	7e7b      	ldrb	r3, [r7, #25]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4313      	orrs	r3, r2
 8001ace:	7eba      	ldrb	r2, [r7, #26]
 8001ad0:	0912      	lsrs	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001ad8:	7efb      	ldrb	r3, [r7, #27]
 8001ada:	031a      	lsls	r2, r3, #12
 8001adc:	7f3b      	ldrb	r3, [r7, #28]
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	7f7a      	ldrb	r2, [r7, #29]
 8001ae4:	0912      	lsrs	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	461a      	mov	r2, r3
 8001af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff fd7b 	bl	80015f0 <compensate_temperature>
 8001afa:	4602      	mov	r2, r0
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	461a      	mov	r2, r3
 8001b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff fdab 	bl	8001662 <compensate_pressure>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00d      	beq.n	8001b34 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001b18:	7fbb      	ldrb	r3, [r7, #30]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	7ffa      	ldrb	r2, [r7, #31]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	461a      	mov	r2, r3
 8001b26:	6a39      	ldr	r1, [r7, #32]
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff ff44 	bl	80019b6 <compensate_humidity>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3730      	adds	r7, #48	; 0x30
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <bmp280_read_float+0x1a>
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	e000      	b.n	8001b5c <bmp280_read_float+0x1c>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f107 0218 	add.w	r2, r7, #24
 8001b60:	f107 011c 	add.w	r1, r7, #28
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff ff85 	bl	8001a74 <bmp280_read_fixed>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d028      	beq.n	8001bc2 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001bcc <bmp280_read_float+0x8c>
 8001b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b92:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001bd0 <bmp280_read_float+0x90>
 8001b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bb0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001bd4 <bmp280_read_float+0x94>
 8001bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <bmp280_read_float+0x84>
	}

	return false;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	42c80000 	.word	0x42c80000
 8001bd0:	43800000 	.word	0x43800000
 8001bd4:	44800000 	.word	0x44800000

08001bd8 <bmp280_read_altitude>:

float bmp280_read_altitude(float pressurehPa, float seaLevelPressurehPa){
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	ed87 0a01 	vstr	s0, [r7, #4]
 8001be2:	edc7 0a00 	vstr	s1, [r7]
	float altitude = 44330 * (1.0 - pow(pressurehPa / seaLevelPressurehPa, 0.1903));
 8001be6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bea:	edd7 7a00 	vldr	s15, [r7]
 8001bee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bf2:	ee16 0a90 	vmov	r0, s13
 8001bf6:	f7fe fca7 	bl	8000548 <__aeabi_f2d>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460c      	mov	r4, r1
 8001bfe:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001c50 <bmp280_read_altitude+0x78>
 8001c02:	ec44 3b10 	vmov	d0, r3, r4
 8001c06:	f009 fbb7 	bl	800b378 <pow>
 8001c0a:	ec54 3b10 	vmov	r3, r4, d0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4623      	mov	r3, r4
 8001c12:	f04f 0000 	mov.w	r0, #0
 8001c16:	4912      	ldr	r1, [pc, #72]	; (8001c60 <bmp280_read_altitude+0x88>)
 8001c18:	f7fe fb36 	bl	8000288 <__aeabi_dsub>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	4618      	mov	r0, r3
 8001c22:	4621      	mov	r1, r4
 8001c24:	a30c      	add	r3, pc, #48	; (adr r3, 8001c58 <bmp280_read_altitude+0x80>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	f7fe fce5 	bl	80005f8 <__aeabi_dmul>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460c      	mov	r4, r1
 8001c32:	4618      	mov	r0, r3
 8001c34:	4621      	mov	r1, r4
 8001c36:	f7fe ffd7 	bl	8000be8 <__aeabi_d2f>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	60fb      	str	r3, [r7, #12]
	return altitude;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	ee07 3a90 	vmov	s15, r3
}
 8001c44:	eeb0 0a67 	vmov.f32	s0, s15
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd90      	pop	{r4, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	1a36e2eb 	.word	0x1a36e2eb
 8001c54:	3fc85bc0 	.word	0x3fc85bc0
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40e5a540 	.word	0x40e5a540
 8001c60:	3ff00000 	.word	0x3ff00000
 8001c64:	00000000 	.word	0x00000000

08001c68 <airspeed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void airspeed(){
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8001c6c:	484a      	ldr	r0, [pc, #296]	; (8001d98 <airspeed+0x130>)
 8001c6e:	f001 ffc7 	bl	8003c00 <HAL_ADC_Start>
	while (__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_EOC) != SET){;}
 8001c72:	bf00      	nop
 8001c74:	4b48      	ldr	r3, [pc, #288]	; (8001d98 <airspeed+0x130>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d1f8      	bne.n	8001c74 <airspeed+0xc>
		  HAL_ADC_Stop(&hadc2);
 8001c82:	4845      	ldr	r0, [pc, #276]	; (8001d98 <airspeed+0x130>)
 8001c84:	f002 f882 	bl	8003d8c <HAL_ADC_Stop>
		  data_air = HAL_ADC_GetValue(&hadc2);
 8001c88:	4843      	ldr	r0, [pc, #268]	; (8001d98 <airspeed+0x130>)
 8001c8a:	f002 f8b2 	bl	8003df2 <HAL_ADC_GetValue>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <airspeed+0x134>)
 8001c92:	601a      	str	r2, [r3, #0]
		  analog_air = ((((float)data_air)/4095.0 * 3.0) - offset) / sensitivity;
 8001c94:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <airspeed+0x134>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca0:	ee17 0a90 	vmov	r0, s15
 8001ca4:	f7fe fc50 	bl	8000548 <__aeabi_f2d>
 8001ca8:	a337      	add	r3, pc, #220	; (adr r3, 8001d88 <airspeed+0x120>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe fdcd 	bl	800084c <__aeabi_ddiv>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	4621      	mov	r1, r4
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <airspeed+0x138>)
 8001cc0:	f7fe fc9a 	bl	80005f8 <__aeabi_dmul>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	4625      	mov	r5, r4
 8001cca:	461c      	mov	r4, r3
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <airspeed+0x13c>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc3a 	bl	8000548 <__aeabi_f2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4629      	mov	r1, r5
 8001cdc:	f7fe fad4 	bl	8000288 <__aeabi_dsub>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	4625      	mov	r5, r4
 8001ce6:	461c      	mov	r4, r3
 8001ce8:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <airspeed+0x13c>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc2c 	bl	8000548 <__aeabi_f2d>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe fda8 	bl	800084c <__aeabi_ddiv>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	460c      	mov	r4, r1
 8001d00:	4618      	mov	r0, r3
 8001d02:	4621      	mov	r1, r4
 8001d04:	f7fe ff70 	bl	8000be8 <__aeabi_d2f>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <airspeed+0x140>)
 8001d0c:	601a      	str	r2, [r3, #0]
		  if (analog_air <0.0) analog_air = 0;
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <airspeed+0x140>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	d503      	bpl.n	8001d26 <airspeed+0xbe>
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <airspeed+0x140>)
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
			air_speed =  sqrt (2.0 * analog_air / 1.2 ) * 1.943844;
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <airspeed+0x140>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc0c 	bl	8000548 <__aeabi_f2d>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	f7fe faaa 	bl	800028c <__adddf3>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	4621      	mov	r1, r4
 8001d40:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <airspeed+0x144>)
 8001d46:	f7fe fd81 	bl	800084c <__aeabi_ddiv>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	ec44 3b17 	vmov	d7, r3, r4
 8001d52:	eeb0 0a47 	vmov.f32	s0, s14
 8001d56:	eef0 0a67 	vmov.f32	s1, s15
 8001d5a:	f009 fc7d 	bl	800b658 <sqrt>
 8001d5e:	ec51 0b10 	vmov	r0, r1, d0
 8001d62:	a30b      	add	r3, pc, #44	; (adr r3, 8001d90 <airspeed+0x128>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fc46 	bl	80005f8 <__aeabi_dmul>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	460c      	mov	r4, r1
 8001d70:	4618      	mov	r0, r3
 8001d72:	4621      	mov	r1, r4
 8001d74:	f7fe ff38 	bl	8000be8 <__aeabi_d2f>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <airspeed+0x148>)
 8001d7c:	601a      	str	r2, [r3, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	bdb0      	pop	{r4, r5, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	f3af 8000 	nop.w
 8001d88:	00000000 	.word	0x00000000
 8001d8c:	40affe00 	.word	0x40affe00
 8001d90:	2a8869c6 	.word	0x2a8869c6
 8001d94:	3fff19fc 	.word	0x3fff19fc
 8001d98:	20000774 	.word	0x20000774
 8001d9c:	20000858 	.word	0x20000858
 8001da0:	40080000 	.word	0x40080000
 8001da4:	3f19999a 	.word	0x3f19999a
 8001da8:	20000728 	.word	0x20000728
 8001dac:	3ff33333 	.word	0x3ff33333
 8001db0:	20000830 	.word	0x20000830
 8001db4:	00000000 	.word	0x00000000

08001db8 <monitor_BAT>:
void monitor_BAT(){
 8001db8:	b598      	push	{r3, r4, r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001dbc:	4820      	ldr	r0, [pc, #128]	; (8001e40 <monitor_BAT+0x88>)
 8001dbe:	f001 ff1f 	bl	8003c00 <HAL_ADC_Start>
	while (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) != SET){;}
 8001dc2:	bf00      	nop
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <monitor_BAT+0x88>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d1f8      	bne.n	8001dc4 <monitor_BAT+0xc>
		  HAL_ADC_Stop(&hadc1);
 8001dd2:	481b      	ldr	r0, [pc, #108]	; (8001e40 <monitor_BAT+0x88>)
 8001dd4:	f001 ffda 	bl	8003d8c <HAL_ADC_Stop>
		  data_bat = HAL_ADC_GetValue(&hadc1);
 8001dd8:	4819      	ldr	r0, [pc, #100]	; (8001e40 <monitor_BAT+0x88>)
 8001dda:	f002 f80a 	bl	8003df2 <HAL_ADC_GetValue>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <monitor_BAT+0x8c>)
 8001de2:	601a      	str	r2, [r3, #0]
		  baterai = ((float)data_bat * 3.04985) * 0.00433641;
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <monitor_BAT+0x8c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df0:	ee17 0a90 	vmov	r0, s15
 8001df4:	f7fe fba8 	bl	8000548 <__aeabi_f2d>
 8001df8:	a30d      	add	r3, pc, #52	; (adr r3, 8001e30 <monitor_BAT+0x78>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fbfb 	bl	80005f8 <__aeabi_dmul>
 8001e02:	4603      	mov	r3, r0
 8001e04:	460c      	mov	r4, r1
 8001e06:	4618      	mov	r0, r3
 8001e08:	4621      	mov	r1, r4
 8001e0a:	a30b      	add	r3, pc, #44	; (adr r3, 8001e38 <monitor_BAT+0x80>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	f7fe fbf2 	bl	80005f8 <__aeabi_dmul>
 8001e14:	4603      	mov	r3, r0
 8001e16:	460c      	mov	r4, r1
 8001e18:	4618      	mov	r0, r3
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	f7fe fee4 	bl	8000be8 <__aeabi_d2f>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <monitor_BAT+0x90>)
 8001e24:	601a      	str	r2, [r3, #0]
}
 8001e26:	bf00      	nop
 8001e28:	bd98      	pop	{r3, r4, r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	f3af 8000 	nop.w
 8001e30:	c1bda512 	.word	0xc1bda512
 8001e34:	40086617 	.word	0x40086617
 8001e38:	321cddb1 	.word	0x321cddb1
 8001e3c:	3f71c30e 	.word	0x3f71c30e
 8001e40:	20000910 	.word	0x20000910
 8001e44:	20000b2c 	.word	0x20000b2c
 8001e48:	20000838 	.word	0x20000838

08001e4c <get_IMU>:
void GetHMC5893L(){
	if(HMC5883L_getReadyStatus()){
		data_heading = bacaheading();
	}
}
void get_IMU(IMU_DATA *IMU_Data){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	if(IMUDataStatus){
 8001e54:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <get_IMU+0x170>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80aa 	beq.w	8001fb2 <get_IMU+0x166>
		  uint8_t YPR[8];
		  IMU_Data->YAW = 1000.0f, IMU_Data->PITCH = 1000.0f, IMU_Data->ROLL = 1000.0f;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a57      	ldr	r2, [pc, #348]	; (8001fc0 <get_IMU+0x174>)
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a56      	ldr	r2, [pc, #344]	; (8001fc0 <get_IMU+0x174>)
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a54      	ldr	r2, [pc, #336]	; (8001fc0 <get_IMU+0x174>)
 8001e6e:	609a      	str	r2, [r3, #8]
		  char* buf;
		  buf = memchr(IMUBuffer, 0xAA, 16);
 8001e70:	2210      	movs	r2, #16
 8001e72:	21aa      	movs	r1, #170	; 0xaa
 8001e74:	4853      	ldr	r0, [pc, #332]	; (8001fc4 <get_IMU+0x178>)
 8001e76:	f7fe f9ab 	bl	80001d0 <memchr>
 8001e7a:	6178      	str	r0, [r7, #20]
		  memcpy(YPR, buf, 8);
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	6810      	ldr	r0, [r2, #0]
 8001e84:	6851      	ldr	r1, [r2, #4]
 8001e86:	c303      	stmia	r3!, {r0, r1}
		  if(YPR[0] == 0xAA && YPR[7] == 0x55){
 8001e88:	7b3b      	ldrb	r3, [r7, #12]
 8001e8a:	2baa      	cmp	r3, #170	; 0xaa
 8001e8c:	f040 808e 	bne.w	8001fac <get_IMU+0x160>
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	2b55      	cmp	r3, #85	; 0x55
 8001e94:	f040 808a 	bne.w	8001fac <get_IMU+0x160>
			  IMU_Data->YAW = (float)((YPR[1] << 8 | YPR[2]) * 0.01f);
 8001e98:	7b7b      	ldrb	r3, [r7, #13]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	7bba      	ldrb	r2, [r7, #14]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001fc8 <get_IMU+0x17c>
 8001eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a00 	vstr	s15, [r3]
			  if(IMU_Data->YAW > 179) IMU_Data->YAW = IMU_Data->YAW - 655;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001fcc <get_IMU+0x180>
 8001ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	dd09      	ble.n	8001ede <get_IMU+0x92>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001fd0 <get_IMU+0x184>
 8001ed4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	edc3 7a00 	vstr	s15, [r3]

			  sensorYaw = IMU_Data->YAW - yawRef;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	ed93 7a00 	vldr	s14, [r3]
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <get_IMU+0x188>)
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eee:	4b3a      	ldr	r3, [pc, #232]	; (8001fd8 <get_IMU+0x18c>)
 8001ef0:	edc3 7a00 	vstr	s15, [r3]

			  IMU_Data->PITCH = (float)((YPR[3] << 8 | YPR[4]) * 0.01f);
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	7c3a      	ldrb	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f04:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001fc8 <get_IMU+0x17c>
 8001f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	edc3 7a01 	vstr	s15, [r3, #4]
			  if(IMU_Data->PITCH > 179) IMU_Data->PITCH = IMU_Data->PITCH - 655;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f18:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001fcc <get_IMU+0x180>
 8001f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f24:	dd09      	ble.n	8001f3a <get_IMU+0xee>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f2c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001fd0 <get_IMU+0x184>
 8001f30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	edc3 7a01 	vstr	s15, [r3, #4]

			  sensorPitch = IMU_Data->PITCH - pitchRef;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f40:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <get_IMU+0x190>)
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <get_IMU+0x194>)
 8001f4c:	edc3 7a00 	vstr	s15, [r3]

			  IMU_Data->ROLL = (float)((YPR[5] << 8 | YPR[6]) * 0.01f);
 8001f50:	7c7b      	ldrb	r3, [r7, #17]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	7cba      	ldrb	r2, [r7, #18]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f60:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001fc8 <get_IMU+0x17c>
 8001f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	edc3 7a02 	vstr	s15, [r3, #8]
			  if(IMU_Data->ROLL > 179) IMU_Data->ROLL = IMU_Data->ROLL - 655;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f74:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001fcc <get_IMU+0x180>
 8001f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	dd09      	ble.n	8001f96 <get_IMU+0x14a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f88:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001fd0 <get_IMU+0x184>
 8001f8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	edc3 7a02 	vstr	s15, [r3, #8]

			  sensorRoll = IMU_Data->ROLL - rollRef;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <get_IMU+0x198>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <get_IMU+0x19c>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
		  }
		  IMUDataStatus = false;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <get_IMU+0x170>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000208 	.word	0x20000208
 8001fc0:	447a0000 	.word	0x447a0000
 8001fc4:	20000b94 	.word	0x20000b94
 8001fc8:	3c23d70a 	.word	0x3c23d70a
 8001fcc:	43330000 	.word	0x43330000
 8001fd0:	4423c000 	.word	0x4423c000
 8001fd4:	20000210 	.word	0x20000210
 8001fd8:	20000a6c 	.word	0x20000a6c
 8001fdc:	2000020c 	.word	0x2000020c
 8001fe0:	20000b34 	.word	0x20000b34
 8001fe4:	20000214 	.word	0x20000214
 8001fe8:	20000834 	.word	0x20000834

08001fec <IMUInit>:
void IMUInit(){
 8001fec:	b5b0      	push	{r4, r5, r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
	  HAL_Delay(3000);
 8001ff2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ff6:	f001 fd9d 	bl	8003b34 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 8001ffa:	230a      	movs	r3, #10
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	21a5      	movs	r1, #165	; 0xa5
 8002000:	485b      	ldr	r0, [pc, #364]	; (8002170 <IMUInit+0x184>)
 8002002:	f004 fef6 	bl	8006df2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x54, 1, 10);
 8002006:	230a      	movs	r3, #10
 8002008:	2201      	movs	r2, #1
 800200a:	2154      	movs	r1, #84	; 0x54
 800200c:	4858      	ldr	r0, [pc, #352]	; (8002170 <IMUInit+0x184>)
 800200e:	f004 fef0 	bl	8006df2 <HAL_UART_Transmit>

	  HAL_Delay(3000);
 8002012:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002016:	f001 fd8d 	bl	8003b34 <HAL_Delay>
	  ukuranstring = sprintf((char*)buffer,"Kalibrasi tilt done\r\n");
 800201a:	4a56      	ldr	r2, [pc, #344]	; (8002174 <IMUInit+0x188>)
 800201c:	4b56      	ldr	r3, [pc, #344]	; (8002178 <IMUInit+0x18c>)
 800201e:	4615      	mov	r5, r2
 8002020:	461c      	mov	r4, r3
 8002022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002024:	6028      	str	r0, [r5, #0]
 8002026:	6069      	str	r1, [r5, #4]
 8002028:	60aa      	str	r2, [r5, #8]
 800202a:	60eb      	str	r3, [r5, #12]
 800202c:	6820      	ldr	r0, [r4, #0]
 800202e:	6128      	str	r0, [r5, #16]
 8002030:	88a3      	ldrh	r3, [r4, #4]
 8002032:	82ab      	strh	r3, [r5, #20]
 8002034:	2315      	movs	r3, #21
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b50      	ldr	r3, [pc, #320]	; (800217c <IMUInit+0x190>)
 800203a:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, ukuranstring, 100);
 800203c:	4b4f      	ldr	r3, [pc, #316]	; (800217c <IMUInit+0x190>)
 800203e:	881a      	ldrh	r2, [r3, #0]
 8002040:	2364      	movs	r3, #100	; 0x64
 8002042:	494c      	ldr	r1, [pc, #304]	; (8002174 <IMUInit+0x188>)
 8002044:	484e      	ldr	r0, [pc, #312]	; (8002180 <IMUInit+0x194>)
 8002046:	f004 fed4 	bl	8006df2 <HAL_UART_Transmit>

	  //Kalibrasi heading
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 800204a:	230a      	movs	r3, #10
 800204c:	2201      	movs	r2, #1
 800204e:	21a5      	movs	r1, #165	; 0xa5
 8002050:	4847      	ldr	r0, [pc, #284]	; (8002170 <IMUInit+0x184>)
 8002052:	f004 fece 	bl	8006df2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x55, 1, 10);
 8002056:	230a      	movs	r3, #10
 8002058:	2201      	movs	r2, #1
 800205a:	2155      	movs	r1, #85	; 0x55
 800205c:	4844      	ldr	r0, [pc, #272]	; (8002170 <IMUInit+0x184>)
 800205e:	f004 fec8 	bl	8006df2 <HAL_UART_Transmit>
	  HAL_Delay(3000);
 8002062:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002066:	f001 fd65 	bl	8003b34 <HAL_Delay>

	  ukuranstring = sprintf((char*)buffer,"Kalibrasi heading done\r\n");
 800206a:	4a42      	ldr	r2, [pc, #264]	; (8002174 <IMUInit+0x188>)
 800206c:	4b45      	ldr	r3, [pc, #276]	; (8002184 <IMUInit+0x198>)
 800206e:	4615      	mov	r5, r2
 8002070:	461c      	mov	r4, r3
 8002072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002074:	6028      	str	r0, [r5, #0]
 8002076:	6069      	str	r1, [r5, #4]
 8002078:	60aa      	str	r2, [r5, #8]
 800207a:	60eb      	str	r3, [r5, #12]
 800207c:	cc03      	ldmia	r4!, {r0, r1}
 800207e:	6128      	str	r0, [r5, #16]
 8002080:	6169      	str	r1, [r5, #20]
 8002082:	7823      	ldrb	r3, [r4, #0]
 8002084:	762b      	strb	r3, [r5, #24]
 8002086:	2318      	movs	r3, #24
 8002088:	b29a      	uxth	r2, r3
 800208a:	4b3c      	ldr	r3, [pc, #240]	; (800217c <IMUInit+0x190>)
 800208c:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, ukuranstring, 100);
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <IMUInit+0x190>)
 8002090:	881a      	ldrh	r2, [r3, #0]
 8002092:	2364      	movs	r3, #100	; 0x64
 8002094:	4937      	ldr	r1, [pc, #220]	; (8002174 <IMUInit+0x188>)
 8002096:	483a      	ldr	r0, [pc, #232]	; (8002180 <IMUInit+0x194>)
 8002098:	f004 feab 	bl	8006df2 <HAL_UART_Transmit>

	  //Konfigurasi Output ASCII
	  HAL_UART_Transmit(&huart2, (u_char*)0xA5, 1, 10);
 800209c:	230a      	movs	r3, #10
 800209e:	2201      	movs	r2, #1
 80020a0:	21a5      	movs	r1, #165	; 0xa5
 80020a2:	4833      	ldr	r0, [pc, #204]	; (8002170 <IMUInit+0x184>)
 80020a4:	f004 fea5 	bl	8006df2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (u_char*)0x52, 1, 10);
 80020a8:	230a      	movs	r3, #10
 80020aa:	2201      	movs	r2, #1
 80020ac:	2152      	movs	r1, #82	; 0x52
 80020ae:	4830      	ldr	r0, [pc, #192]	; (8002170 <IMUInit+0x184>)
 80020b0:	f004 fe9f 	bl	8006df2 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80020b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020b8:	f001 fd3c 	bl	8003b34 <HAL_Delay>
	  HAL_UART_Receive_DMA(&huart2, IMUBuffer, 16);
 80020bc:	2210      	movs	r2, #16
 80020be:	4932      	ldr	r1, [pc, #200]	; (8002188 <IMUInit+0x19c>)
 80020c0:	482b      	ldr	r0, [pc, #172]	; (8002170 <IMUInit+0x184>)
 80020c2:	f004 ff2f 	bl	8006f24 <HAL_UART_Receive_DMA>

	  float pitchTotal = 0, yawTotal = 0, rollTotal = 0;
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
	  int i = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	603b      	str	r3, [r7, #0]
	  while(i < 100){
 80020dc:	e026      	b.n	800212c <IMUInit+0x140>
		  if(IMUDataStatus){
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <IMUInit+0x1a0>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d021      	beq.n	800212a <IMUInit+0x13e>
			  i += 1;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	603b      	str	r3, [r7, #0]
			  get_IMU(&IMU_Data);
 80020ec:	4828      	ldr	r0, [pc, #160]	; (8002190 <IMUInit+0x1a4>)
 80020ee:	f7ff fead 	bl	8001e4c <get_IMU>
			  pitchTotal += IMU_Data.PITCH;
 80020f2:	4b27      	ldr	r3, [pc, #156]	; (8002190 <IMUInit+0x1a4>)
 80020f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80020f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80020fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002100:	edc7 7a03 	vstr	s15, [r7, #12]
			  yawTotal += IMU_Data.YAW;
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <IMUInit+0x1a4>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	ed97 7a02 	vldr	s14, [r7, #8]
 800210e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002112:	edc7 7a02 	vstr	s15, [r7, #8]
			  rollTotal += IMU_Data.ROLL;
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <IMUInit+0x1a4>)
 8002118:	edd3 7a02 	vldr	s15, [r3, #8]
 800211c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002124:	edc7 7a01 	vstr	s15, [r7, #4]
 8002128:	e000      	b.n	800212c <IMUInit+0x140>
		  } else continue;
 800212a:	bf00      	nop
	  while(i < 100){
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b63      	cmp	r3, #99	; 0x63
 8002130:	ddd5      	ble.n	80020de <IMUInit+0xf2>
	  }
	  pitchRef = pitchTotal / 100;
 8002132:	ed97 7a03 	vldr	s14, [r7, #12]
 8002136:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002194 <IMUInit+0x1a8>
 800213a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <IMUInit+0x1ac>)
 8002140:	edc3 7a00 	vstr	s15, [r3]
	  yawRef = yawTotal / 100;
 8002144:	ed97 7a02 	vldr	s14, [r7, #8]
 8002148:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002194 <IMUInit+0x1a8>
 800214c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <IMUInit+0x1b0>)
 8002152:	edc3 7a00 	vstr	s15, [r3]
	  rollRef = rollTotal / 100;
 8002156:	ed97 7a01 	vldr	s14, [r7, #4]
 800215a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002194 <IMUInit+0x1a8>
 800215e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <IMUInit+0x1b4>)
 8002164:	edc3 7a00 	vstr	s15, [r3]
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bdb0      	pop	{r4, r5, r7, pc}
 8002170:	20000bd8 	.word	0x20000bd8
 8002174:	2000099c 	.word	0x2000099c
 8002178:	0800c540 	.word	0x0800c540
 800217c:	20000b24 	.word	0x20000b24
 8002180:	2000095c 	.word	0x2000095c
 8002184:	0800c558 	.word	0x0800c558
 8002188:	20000b94 	.word	0x20000b94
 800218c:	20000208 	.word	0x20000208
 8002190:	20000860 	.word	0x20000860
 8002194:	42c80000 	.word	0x42c80000
 8002198:	2000020c 	.word	0x2000020c
 800219c:	20000210 	.word	0x20000210
 80021a0:	20000214 	.word	0x20000214

080021a4 <BMPinit>:
void BMPinit(){
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
	kalman_init(&kalman_altitude, 0.1, 0.1, 0.03);
 80021aa:	ed9f 1a62 	vldr	s2, [pc, #392]	; 8002334 <BMPinit+0x190>
 80021ae:	eddf 0a62 	vldr	s1, [pc, #392]	; 8002338 <BMPinit+0x194>
 80021b2:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8002338 <BMPinit+0x194>
 80021b6:	4861      	ldr	r0, [pc, #388]	; (800233c <BMPinit+0x198>)
 80021b8:	f7fe ff36 	bl	8001028 <kalman_init>
	bmp280_init_default_params(&bmp280.params);
 80021bc:	4860      	ldr	r0, [pc, #384]	; (8002340 <BMPinit+0x19c>)
 80021be:	f7fe ffd3 	bl	8001168 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80021c2:	4b60      	ldr	r3, [pc, #384]	; (8002344 <BMPinit+0x1a0>)
 80021c4:	2276      	movs	r2, #118	; 0x76
 80021c6:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 80021c8:	4b5e      	ldr	r3, [pc, #376]	; (8002344 <BMPinit+0x1a0>)
 80021ca:	4a5f      	ldr	r2, [pc, #380]	; (8002348 <BMPinit+0x1a4>)
 80021cc:	629a      	str	r2, [r3, #40]	; 0x28

	while(!bmp280_init(&bmp280, &bmp280.params)){
 80021ce:	e020      	b.n	8002212 <BMPinit+0x6e>
		ukuranstring = sprintf((char*)buffer, "BMP280 initialization failed\r\n");
 80021d0:	4a5e      	ldr	r2, [pc, #376]	; (800234c <BMPinit+0x1a8>)
 80021d2:	4b5f      	ldr	r3, [pc, #380]	; (8002350 <BMPinit+0x1ac>)
 80021d4:	4615      	mov	r5, r2
 80021d6:	461c      	mov	r4, r3
 80021d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021da:	6028      	str	r0, [r5, #0]
 80021dc:	6069      	str	r1, [r5, #4]
 80021de:	60aa      	str	r2, [r5, #8]
 80021e0:	60eb      	str	r3, [r5, #12]
 80021e2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80021e4:	6128      	str	r0, [r5, #16]
 80021e6:	6169      	str	r1, [r5, #20]
 80021e8:	61aa      	str	r2, [r5, #24]
 80021ea:	8823      	ldrh	r3, [r4, #0]
 80021ec:	78a2      	ldrb	r2, [r4, #2]
 80021ee:	83ab      	strh	r3, [r5, #28]
 80021f0:	4613      	mov	r3, r2
 80021f2:	77ab      	strb	r3, [r5, #30]
 80021f4:	231e      	movs	r3, #30
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	4b56      	ldr	r3, [pc, #344]	; (8002354 <BMPinit+0x1b0>)
 80021fa:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, ukuranstring, 1000);
 80021fc:	4b55      	ldr	r3, [pc, #340]	; (8002354 <BMPinit+0x1b0>)
 80021fe:	881a      	ldrh	r2, [r3, #0]
 8002200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002204:	4951      	ldr	r1, [pc, #324]	; (800234c <BMPinit+0x1a8>)
 8002206:	4854      	ldr	r0, [pc, #336]	; (8002358 <BMPinit+0x1b4>)
 8002208:	f004 fdf3 	bl	8006df2 <HAL_UART_Transmit>
		HAL_Delay(50);
 800220c:	2032      	movs	r0, #50	; 0x32
 800220e:	f001 fc91 	bl	8003b34 <HAL_Delay>
	while(!bmp280_init(&bmp280, &bmp280.params)){
 8002212:	494b      	ldr	r1, [pc, #300]	; (8002340 <BMPinit+0x19c>)
 8002214:	484b      	ldr	r0, [pc, #300]	; (8002344 <BMPinit+0x1a0>)
 8002216:	f7ff f922 	bl	800145e <bmp280_init>
 800221a:	4603      	mov	r3, r0
 800221c:	f083 0301 	eor.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1d4      	bne.n	80021d0 <BMPinit+0x2c>
	}
	HAL_Delay(1000);
 8002226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800222a:	f001 fc83 	bl	8003b34 <HAL_Delay>
	bme280p = bmp280.id == BME280_CHIP_ID;
 800222e:	4b45      	ldr	r3, [pc, #276]	; (8002344 <BMPinit+0x1a0>)
 8002230:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002234:	2b60      	cmp	r3, #96	; 0x60
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b47      	ldr	r3, [pc, #284]	; (800235c <BMPinit+0x1b8>)
 8002240:	701a      	strb	r2, [r3, #0]
	ukuranstring = sprintf((char*)buffer, "BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <BMPinit+0x1b8>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <BMPinit+0xaa>
 800224a:	4b45      	ldr	r3, [pc, #276]	; (8002360 <BMPinit+0x1bc>)
 800224c:	e000      	b.n	8002250 <BMPinit+0xac>
 800224e:	4b45      	ldr	r3, [pc, #276]	; (8002364 <BMPinit+0x1c0>)
 8002250:	461a      	mov	r2, r3
 8002252:	4945      	ldr	r1, [pc, #276]	; (8002368 <BMPinit+0x1c4>)
 8002254:	483d      	ldr	r0, [pc, #244]	; (800234c <BMPinit+0x1a8>)
 8002256:	f006 fa1f 	bl	8008698 <siprintf>
 800225a:	4603      	mov	r3, r0
 800225c:	b29a      	uxth	r2, r3
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <BMPinit+0x1b0>)
 8002260:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, ukuranstring, 1000);
 8002262:	4b3c      	ldr	r3, [pc, #240]	; (8002354 <BMPinit+0x1b0>)
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226a:	4938      	ldr	r1, [pc, #224]	; (800234c <BMPinit+0x1a8>)
 800226c:	483a      	ldr	r0, [pc, #232]	; (8002358 <BMPinit+0x1b4>)
 800226e:	f004 fdc0 	bl	8006df2 <HAL_UART_Transmit>

	ukuranstring = sprintf((char*)buffer, "Calibrating.\r\n");
 8002272:	4a36      	ldr	r2, [pc, #216]	; (800234c <BMPinit+0x1a8>)
 8002274:	4b3d      	ldr	r3, [pc, #244]	; (800236c <BMPinit+0x1c8>)
 8002276:	4614      	mov	r4, r2
 8002278:	cb07      	ldmia	r3!, {r0, r1, r2}
 800227a:	6020      	str	r0, [r4, #0]
 800227c:	6061      	str	r1, [r4, #4]
 800227e:	60a2      	str	r2, [r4, #8]
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	789b      	ldrb	r3, [r3, #2]
 8002284:	81a2      	strh	r2, [r4, #12]
 8002286:	73a3      	strb	r3, [r4, #14]
 8002288:	230e      	movs	r3, #14
 800228a:	b29a      	uxth	r2, r3
 800228c:	4b31      	ldr	r3, [pc, #196]	; (8002354 <BMPinit+0x1b0>)
 800228e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, ukuranstring, 10);
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <BMPinit+0x1b0>)
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	230a      	movs	r3, #10
 8002296:	492d      	ldr	r1, [pc, #180]	; (800234c <BMPinit+0x1a8>)
 8002298:	482f      	ldr	r0, [pc, #188]	; (8002358 <BMPinit+0x1b4>)
 800229a:	f004 fdaa 	bl	8006df2 <HAL_UART_Transmit>

	float pres_total = 0;
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
	float pressure, temperature, humidity;

	for(int i = 0; i < 100; ++i){
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	e01f      	b.n	80022ea <BMPinit+0x146>
		while(bmp280_is_measuring(&bmp280)) continue;
 80022aa:	bf00      	nop
 80022ac:	4825      	ldr	r0, [pc, #148]	; (8002344 <BMPinit+0x1a0>)
 80022ae:	f7ff f983 	bl	80015b8 <bmp280_is_measuring>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f8      	bne.n	80022aa <BMPinit+0x106>
		bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	f107 020c 	add.w	r2, r7, #12
 80022be:	f107 0108 	add.w	r1, r7, #8
 80022c2:	4820      	ldr	r0, [pc, #128]	; (8002344 <BMPinit+0x1a0>)
 80022c4:	f7ff fc3c 	bl	8001b40 <bmp280_read_float>
		HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, 10);
 80022c8:	230a      	movs	r3, #10
 80022ca:	2201      	movs	r2, #1
 80022cc:	4928      	ldr	r1, [pc, #160]	; (8002370 <BMPinit+0x1cc>)
 80022ce:	4822      	ldr	r0, [pc, #136]	; (8002358 <BMPinit+0x1b4>)
 80022d0:	f004 fd8f 	bl	8006df2 <HAL_UART_Transmit>
		pres_total = pres_total + pressure;
 80022d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80022dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i < 100; ++i){
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	3301      	adds	r3, #1
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b63      	cmp	r3, #99	; 0x63
 80022ee:	dddd      	ble.n	80022ac <BMPinit+0x108>
	}

	pressureRef = pres_total / 100;
 80022f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80022f4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002374 <BMPinit+0x1d0>
 80022f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <BMPinit+0x1d4>)
 80022fe:	edc3 7a00 	vstr	s15, [r3]
	ukuranstring = sprintf((char*)buffer,"Done!\r\n");
 8002302:	4a12      	ldr	r2, [pc, #72]	; (800234c <BMPinit+0x1a8>)
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <BMPinit+0x1d8>)
 8002306:	cb03      	ldmia	r3!, {r0, r1}
 8002308:	6010      	str	r0, [r2, #0]
 800230a:	6051      	str	r1, [r2, #4]
 800230c:	2307      	movs	r3, #7
 800230e:	b29a      	uxth	r2, r3
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <BMPinit+0x1b0>)
 8002312:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, ukuranstring, 10);
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <BMPinit+0x1b0>)
 8002316:	881a      	ldrh	r2, [r3, #0]
 8002318:	230a      	movs	r3, #10
 800231a:	490c      	ldr	r1, [pc, #48]	; (800234c <BMPinit+0x1a8>)
 800231c:	480e      	ldr	r0, [pc, #56]	; (8002358 <BMPinit+0x1b4>)
 800231e:	f004 fd68 	bl	8006df2 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8002322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002326:	f001 fc05 	bl	8003b34 <HAL_Delay>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bdb0      	pop	{r4, r5, r7, pc}
 8002332:	bf00      	nop
 8002334:	3cf5c28f 	.word	0x3cf5c28f
 8002338:	3dcccccd 	.word	0x3dcccccd
 800233c:	2000083c 	.word	0x2000083c
 8002340:	20000bd0 	.word	0x20000bd0
 8002344:	20000ba4 	.word	0x20000ba4
 8002348:	200007d8 	.word	0x200007d8
 800234c:	2000099c 	.word	0x2000099c
 8002350:	0800c574 	.word	0x0800c574
 8002354:	20000b24 	.word	0x20000b24
 8002358:	2000095c 	.word	0x2000095c
 800235c:	2000090c 	.word	0x2000090c
 8002360:	0800c594 	.word	0x0800c594
 8002364:	0800c59c 	.word	0x0800c59c
 8002368:	0800c5a4 	.word	0x0800c5a4
 800236c:	0800c5b8 	.word	0x0800c5b8
 8002370:	0800c5c8 	.word	0x0800c5c8
 8002374:	42c80000 	.word	0x42c80000
 8002378:	20000204 	.word	0x20000204
 800237c:	0800c5cc 	.word	0x0800c5cc

08002380 <get_BMP280>:
void get_BMP280(){
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
	if(!bmp280_is_measuring(&bmp280)){
 8002386:	481a      	ldr	r0, [pc, #104]	; (80023f0 <get_BMP280+0x70>)
 8002388:	f7ff f916 	bl	80015b8 <bmp280_is_measuring>
 800238c:	4603      	mov	r3, r0
 800238e:	f083 0301 	eor.w	r3, r3, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d026      	beq.n	80023e6 <get_BMP280+0x66>
		  float pressure, temperature, humidity;
		  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	f107 020c 	add.w	r2, r7, #12
 800239e:	f107 0108 	add.w	r1, r7, #8
 80023a2:	4813      	ldr	r0, [pc, #76]	; (80023f0 <get_BMP280+0x70>)
 80023a4:	f7ff fbcc 	bl	8001b40 <bmp280_read_float>
		  float altitude_reading = bmp280_read_altitude(pressure/100, pressureRef/100);
 80023a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023ac:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80023f4 <get_BMP280+0x74>
 80023b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <get_BMP280+0x78>)
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80023f4 <get_BMP280+0x74>
 80023be:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80023c2:	eef0 0a46 	vmov.f32	s1, s12
 80023c6:	eeb0 0a66 	vmov.f32	s0, s13
 80023ca:	f7ff fc05 	bl	8001bd8 <bmp280_read_altitude>
 80023ce:	ed87 0a05 	vstr	s0, [r7, #20]
		  float estimated_altitude = kalman_updateEstimate(&kalman_altitude, altitude_reading);
 80023d2:	ed97 0a05 	vldr	s0, [r7, #20]
 80023d6:	4809      	ldr	r0, [pc, #36]	; (80023fc <get_BMP280+0x7c>)
 80023d8:	f7fe fe40 	bl	800105c <kalman_updateEstimate>
 80023dc:	ed87 0a04 	vstr	s0, [r7, #16]
		  altitude = estimated_altitude;
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <get_BMP280+0x80>)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	6013      	str	r3, [r2, #0]
	}
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000ba4 	.word	0x20000ba4
 80023f4:	42c80000 	.word	0x42c80000
 80023f8:	20000204 	.word	0x20000204
 80023fc:	2000083c 	.word	0x2000083c
 8002400:	20000ae0 	.word	0x20000ae0

08002404 <gps_parse>:
//-----------parsing Data GPS---------------
void gps_parse(){
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
	if(UART4DataFlag == 1){
 800240a:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <gps_parse+0x1f0>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80ec 	beq.w	80025ec <gps_parse+0x1e8>
				  char *pointer;
				  int length = sizeof(data_gps);
 8002414:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002418:	603b      	str	r3, [r7, #0]

				  memset(lat, '\0', 20);
 800241a:	2214      	movs	r2, #20
 800241c:	2100      	movs	r1, #0
 800241e:	4876      	ldr	r0, [pc, #472]	; (80025f8 <gps_parse+0x1f4>)
 8002420:	f005 fcd6 	bl	8007dd0 <memset>
				  memset(lon, '\0', 20) ;
 8002424:	2214      	movs	r2, #20
 8002426:	2100      	movs	r1, #0
 8002428:	4874      	ldr	r0, [pc, #464]	; (80025fc <gps_parse+0x1f8>)
 800242a:	f005 fcd1 	bl	8007dd0 <memset>
				  pointer = strchr((char*)data_gps, '$');
 800242e:	2124      	movs	r1, #36	; 0x24
 8002430:	4873      	ldr	r0, [pc, #460]	; (8002600 <gps_parse+0x1fc>)
 8002432:	f006 f951 	bl	80086d8 <strchr>
 8002436:	6178      	str	r0, [r7, #20]

				  do{
					  char *ptrstart;
					  char *ptrend;
					  if(strncmp(pointer, "$GNGGA" , 6) == 0){ //$GNGGA
 8002438:	2206      	movs	r2, #6
 800243a:	4972      	ldr	r1, [pc, #456]	; (8002604 <gps_parse+0x200>)
 800243c:	6978      	ldr	r0, [r7, #20]
 800243e:	f006 f958 	bl	80086f2 <strncmp>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d118      	bne.n	800247a <gps_parse+0x76>
						  ptrstart = (char*)memchr(pointer + 1, ',', length);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	4618      	mov	r0, r3
 8002452:	f7fd febd 	bl	80001d0 <memchr>
 8002456:	6138      	str	r0, [r7, #16]
						  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	3301      	adds	r3, #1
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	4618      	mov	r0, r3
 8002462:	f7fd feb5 	bl	80001d0 <memchr>
 8002466:	6138      	str	r0, [r7, #16]
						  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	3301      	adds	r3, #1
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	4618      	mov	r0, r3
 8002472:	f7fd fead 	bl	80001d0 <memchr>
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	e049      	b.n	800250e <gps_parse+0x10a>

					  } else if(strncmp(pointer, "$GNGLL", 6) == 0){ //$GNGLL
 800247a:	2206      	movs	r2, #6
 800247c:	4962      	ldr	r1, [pc, #392]	; (8002608 <gps_parse+0x204>)
 800247e:	6978      	ldr	r0, [r7, #20]
 8002480:	f006 f937 	bl	80086f2 <strncmp>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d110      	bne.n	80024ac <gps_parse+0xa8>
						  ptrstart = (char*)memchr(pointer + 1, ',', length);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3301      	adds	r3, #1
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	4618      	mov	r0, r3
 8002494:	f7fd fe9c 	bl	80001d0 <memchr>
 8002498:	6138      	str	r0, [r7, #16]
						  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3301      	adds	r3, #1
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd fe94 	bl	80001d0 <memchr>
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	e030      	b.n	800250e <gps_parse+0x10a>

					  } else if(strncmp(pointer, "$GNRMC", 6) == 0){
 80024ac:	2206      	movs	r2, #6
 80024ae:	4957      	ldr	r1, [pc, #348]	; (800260c <gps_parse+0x208>)
 80024b0:	6978      	ldr	r0, [r7, #20]
 80024b2:	f006 f91e 	bl	80086f2 <strncmp>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d120      	bne.n	80024fe <gps_parse+0xfa>
						  ptrstart = (char*)memchr(pointer + 1, ',', length);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3301      	adds	r3, #1
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fd fe83 	bl	80001d0 <memchr>
 80024ca:	6138      	str	r0, [r7, #16]
						  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	3301      	adds	r3, #1
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd fe7b 	bl	80001d0 <memchr>
 80024da:	6138      	str	r0, [r7, #16]
						  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	3301      	adds	r3, #1
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd fe73 	bl	80001d0 <memchr>
 80024ea:	6138      	str	r0, [r7, #16]
						  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	3301      	adds	r3, #1
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fd fe6b 	bl	80001d0 <memchr>
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	e007      	b.n	800250e <gps_parse+0x10a>

					  } else {
						  pointer = strchr(pointer + 6, '$');
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3306      	adds	r3, #6
 8002502:	2124      	movs	r1, #36	; 0x24
 8002504:	4618      	mov	r0, r3
 8002506:	f006 f8e7 	bl	80086d8 <strchr>
 800250a:	6178      	str	r0, [r7, #20]
						  continue;
 800250c:	e067      	b.n	80025de <gps_parse+0x1da>
					  }

					  for(int i = 1; i < (ptrend - ptrstart); i++) lat[i - 1] = ptrstart[i];
 800250e:	2301      	movs	r3, #1
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	e00a      	b.n	800252a <gps_parse+0x126>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	441a      	add	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3b01      	subs	r3, #1
 800251e:	7811      	ldrb	r1, [r2, #0]
 8002520:	4a35      	ldr	r2, [pc, #212]	; (80025f8 <gps_parse+0x1f4>)
 8002522:	54d1      	strb	r1, [r2, r3]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	3301      	adds	r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	dbee      	blt.n	8002514 <gps_parse+0x110>
					  lat_a = *(ptrend + 1);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	785a      	ldrb	r2, [r3, #1]
 800253a:	4b35      	ldr	r3, [pc, #212]	; (8002610 <gps_parse+0x20c>)
 800253c:	701a      	strb	r2, [r3, #0]

					  ptrstart = (char*)memchr(ptrend + 1, ',', length);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3301      	adds	r3, #1
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd fe42 	bl	80001d0 <memchr>
 800254c:	6138      	str	r0, [r7, #16]
					  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	3301      	adds	r3, #1
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd fe3a 	bl	80001d0 <memchr>
 800255c:	60f8      	str	r0, [r7, #12]

					  for(int i = 1; i < (ptrend - ptrstart); i++) lon[i - 1] = ptrstart[i];
 800255e:	2301      	movs	r3, #1
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	e00a      	b.n	800257a <gps_parse+0x176>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	441a      	add	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3b01      	subs	r3, #1
 800256e:	7811      	ldrb	r1, [r2, #0]
 8002570:	4a22      	ldr	r2, [pc, #136]	; (80025fc <gps_parse+0x1f8>)
 8002572:	54d1      	strb	r1, [r2, r3]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3301      	adds	r3, #1
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	429a      	cmp	r2, r3
 8002584:	dbee      	blt.n	8002564 <gps_parse+0x160>
					  lon_a = *(ptrend + 1);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	785a      	ldrb	r2, [r3, #1]
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <gps_parse+0x210>)
 800258c:	701a      	strb	r2, [r3, #0]
					  if(lon[0] != '\0' && lat[0] != '\0'){
 800258e:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <gps_parse+0x1f8>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01c      	beq.n	80025d0 <gps_parse+0x1cc>
 8002596:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <gps_parse+0x1f4>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d018      	beq.n	80025d0 <gps_parse+0x1cc>
						  //ukuranstring = sprintf((char*)buffer, "Lat: %s | %c\tLon: %s | %c\r\n", lat, lat_a, lon, lon_a);
						  //HAL_UART_Transmit(&huart1, buffer, ukuranstring, 100);
						  lat_gps = atof((char*)lat);
 800259e:	4816      	ldr	r0, [pc, #88]	; (80025f8 <gps_parse+0x1f4>)
 80025a0:	f005 fbe8 	bl	8007d74 <atof>
 80025a4:	ec54 3b10 	vmov	r3, r4, d0
 80025a8:	4618      	mov	r0, r3
 80025aa:	4621      	mov	r1, r4
 80025ac:	f7fe fb1c 	bl	8000be8 <__aeabi_d2f>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <gps_parse+0x214>)
 80025b4:	601a      	str	r2, [r3, #0]
						  lon_gps = atof((char*)lon);
 80025b6:	4811      	ldr	r0, [pc, #68]	; (80025fc <gps_parse+0x1f8>)
 80025b8:	f005 fbdc 	bl	8007d74 <atof>
 80025bc:	ec54 3b10 	vmov	r3, r4, d0
 80025c0:	4618      	mov	r0, r3
 80025c2:	4621      	mov	r1, r4
 80025c4:	f7fe fb10 	bl	8000be8 <__aeabi_d2f>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <gps_parse+0x218>)
 80025cc:	601a      	str	r2, [r3, #0]
						  break;
 80025ce:	e00a      	b.n	80025e6 <gps_parse+0x1e2>
					  }
					  pointer = strchr(pointer + 4, '$');
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3304      	adds	r3, #4
 80025d4:	2124      	movs	r1, #36	; 0x24
 80025d6:	4618      	mov	r0, r3
 80025d8:	f006 f87e 	bl	80086d8 <strchr>
 80025dc:	6178      	str	r0, [r7, #20]
				  }
				  while(pointer != NULL);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f47f af29 	bne.w	8002438 <gps_parse+0x34>
				  UART4DataFlag = false;
 80025e6:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <gps_parse+0x1f0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
			  }
}
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	2000040c 	.word	0x2000040c
 80025f8:	20000c20 	.word	0x20000c20
 80025fc:	20000a70 	.word	0x20000a70
 8002600:	20000218 	.word	0x20000218
 8002604:	0800c5d4 	.word	0x0800c5d4
 8002608:	0800c5dc 	.word	0x0800c5dc
 800260c:	0800c5e4 	.word	0x0800c5e4
 8002610:	20000a68 	.word	0x20000a68
 8002614:	2000082c 	.word	0x2000082c
 8002618:	20000c18 	.word	0x20000c18
 800261c:	20000c3c 	.word	0x20000c3c

08002620 <kirimGCS>:
void kirimGCS(){
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af04      	add	r7, sp, #16
/*	ukuranstring = sprintf((char*)buffer, "lat|lon=%f | %f,Y: %f,P: %f,R: %f,Alti: %f,Bat:%f,air:%f\r\n", lat_gps, lon_gps, sensorYaw, sensorPitch, sensorRoll, altitude, baterai, air_speed);
	HAL_UART_Transmit(&huart1, buffer, ukuranstring, 100);*/
	  ukuranstring = sprintf((char*)buffer, "CH1: %lu, CH2: %lu, CH3: %lu, CH4: %lu, CH5: %lu, CH6: %lu\r\n",
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <kirimGCS+0x50>)
 8002628:	691c      	ldr	r4, [r3, #16]
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <kirimGCS+0x54>)
 800262c:	691d      	ldr	r5, [r3, #16]
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <kirimGCS+0x58>)
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <kirimGCS+0x5c>)
 8002634:	6912      	ldr	r2, [r2, #16]
 8002636:	4912      	ldr	r1, [pc, #72]	; (8002680 <kirimGCS+0x60>)
 8002638:	6909      	ldr	r1, [r1, #16]
 800263a:	4812      	ldr	r0, [pc, #72]	; (8002684 <kirimGCS+0x64>)
 800263c:	6900      	ldr	r0, [r0, #16]
 800263e:	9003      	str	r0, [sp, #12]
 8002640:	9102      	str	r1, [sp, #8]
 8002642:	9201      	str	r2, [sp, #4]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	462b      	mov	r3, r5
 8002648:	4622      	mov	r2, r4
 800264a:	490f      	ldr	r1, [pc, #60]	; (8002688 <kirimGCS+0x68>)
 800264c:	480f      	ldr	r0, [pc, #60]	; (800268c <kirimGCS+0x6c>)
 800264e:	f006 f823 	bl	8008698 <siprintf>
 8002652:	4603      	mov	r3, r0
 8002654:	b29a      	uxth	r2, r3
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <kirimGCS+0x70>)
 8002658:	801a      	strh	r2, [r3, #0]
			  RC_CH1.DutyCycleVal, RC_CH2.DutyCycleVal, RC_CH3.DutyCycleVal,
			  RC_CH4.DutyCycleVal, RC_CH5.DutyCycleVal, RC_CH6.DutyCycleVal);
	  HAL_UART_Transmit(&huart1, buffer, ukuranstring, 100);
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <kirimGCS+0x70>)
 800265c:	881a      	ldrh	r2, [r3, #0]
 800265e:	2364      	movs	r3, #100	; 0x64
 8002660:	490a      	ldr	r1, [pc, #40]	; (800268c <kirimGCS+0x6c>)
 8002662:	480c      	ldr	r0, [pc, #48]	; (8002694 <kirimGCS+0x74>)
 8002664:	f004 fbc5 	bl	8006df2 <HAL_UART_Transmit>
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	bdb0      	pop	{r4, r5, r7, pc}
 800266e:	bf00      	nop
 8002670:	200008ac 	.word	0x200008ac
 8002674:	20000c64 	.word	0x20000c64
 8002678:	20000b78 	.word	0x20000b78
 800267c:	200007bc 	.word	0x200007bc
 8002680:	20000c40 	.word	0x20000c40
 8002684:	20000ac4 	.word	0x20000ac4
 8002688:	0800c5ec 	.word	0x0800c5ec
 800268c:	2000099c 	.word	0x2000099c
 8002690:	20000b24 	.word	0x20000b24
 8002694:	2000095c 	.word	0x2000095c

08002698 <modefly>:
	setPWM(htim2, TIM_CHANNEL_3, ESC_PWM_MAX);
	HAL_Delay(2000);
	setPWM(htim2, TIM_CHANNEL_3, ESC_PWM_MIN);
	HAL_Delay(2000);
}*/
void modefly(){
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	af00      	add	r7, sp, #0
	  if(inputFlyMode >= 1000 && inputFlyMode <= 1050 && fly_mode != FLY_MODE_OFF){
 800269c:	4b40      	ldr	r3, [pc, #256]	; (80027a0 <modefly+0x108>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a4:	db23      	blt.n	80026ee <modefly+0x56>
 80026a6:	4b3e      	ldr	r3, [pc, #248]	; (80027a0 <modefly+0x108>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f240 421a 	movw	r2, #1050	; 0x41a
 80026ae:	4293      	cmp	r3, r2
 80026b0:	dc1d      	bgt.n	80026ee <modefly+0x56>
 80026b2:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <modefly+0x10c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d019      	beq.n	80026ee <modefly+0x56>
//		  HAL_TIM_Base_Stop_IT(&htim7);
		  fly_mode = FLY_MODE_OFF;
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <modefly+0x10c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
/*		  PIDReset(&PIDRoll);
		  PIDReset(&PIDPitch);
		  PIDReset(&PIDYaw);
		  pulseESC1 = pulseESC2 = pulseESC3 = pulseESC4 = 1000;*/
		  ukuranstring = sprintf((char*)buffer, "Wahana Mode Off\r\n");
 80026c0:	4a39      	ldr	r2, [pc, #228]	; (80027a8 <modefly+0x110>)
 80026c2:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <modefly+0x114>)
 80026c4:	4615      	mov	r5, r2
 80026c6:	461c      	mov	r4, r3
 80026c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ca:	6028      	str	r0, [r5, #0]
 80026cc:	6069      	str	r1, [r5, #4]
 80026ce:	60aa      	str	r2, [r5, #8]
 80026d0:	60eb      	str	r3, [r5, #12]
 80026d2:	8823      	ldrh	r3, [r4, #0]
 80026d4:	822b      	strh	r3, [r5, #16]
 80026d6:	2311      	movs	r3, #17
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <modefly+0x118>)
 80026dc:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, ukuranstring, 10);
 80026de:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <modefly+0x118>)
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	230a      	movs	r3, #10
 80026e4:	4930      	ldr	r1, [pc, #192]	; (80027a8 <modefly+0x110>)
 80026e6:	4833      	ldr	r0, [pc, #204]	; (80027b4 <modefly+0x11c>)
 80026e8:	f004 fb83 	bl	8006df2 <HAL_UART_Transmit>
 80026ec:	e055      	b.n	800279a <modefly+0x102>
	  } else if(inputFlyMode >= 1450 && inputFlyMode <= 1550 && fly_mode != FLY_MODE_ON){
 80026ee:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <modefly+0x108>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f240 52a9 	movw	r2, #1449	; 0x5a9
 80026f6:	4293      	cmp	r3, r2
 80026f8:	dd23      	ble.n	8002742 <modefly+0xaa>
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <modefly+0x108>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f240 620e 	movw	r2, #1550	; 0x60e
 8002702:	4293      	cmp	r3, r2
 8002704:	dc1d      	bgt.n	8002742 <modefly+0xaa>
 8002706:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <modefly+0x10c>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d019      	beq.n	8002742 <modefly+0xaa>
		  fly_mode = FLY_MODE_ON;
 800270e:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <modefly+0x10c>)
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
		  ukuranstring = sprintf((char*)buffer, "Wahana Mode On\r\n");
 8002714:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <modefly+0x110>)
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <modefly+0x120>)
 8002718:	4615      	mov	r5, r2
 800271a:	461c      	mov	r4, r3
 800271c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271e:	6028      	str	r0, [r5, #0]
 8002720:	6069      	str	r1, [r5, #4]
 8002722:	60aa      	str	r2, [r5, #8]
 8002724:	60eb      	str	r3, [r5, #12]
 8002726:	7823      	ldrb	r3, [r4, #0]
 8002728:	742b      	strb	r3, [r5, #16]
 800272a:	2310      	movs	r3, #16
 800272c:	b29a      	uxth	r2, r3
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <modefly+0x118>)
 8002730:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, ukuranstring, 10);
 8002732:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <modefly+0x118>)
 8002734:	881a      	ldrh	r2, [r3, #0]
 8002736:	230a      	movs	r3, #10
 8002738:	491b      	ldr	r1, [pc, #108]	; (80027a8 <modefly+0x110>)
 800273a:	481e      	ldr	r0, [pc, #120]	; (80027b4 <modefly+0x11c>)
 800273c:	f004 fb59 	bl	8006df2 <HAL_UART_Transmit>
 8002740:	e02b      	b.n	800279a <modefly+0x102>
//		  HAL_TIM_Base_Start_IT(&htim7);
	  } else if(inputFlyMode >= 1900 && inputFlyMode <= 2000 && fly_mode != FLY_MODE_HOLD){
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <modefly+0x108>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f240 726b 	movw	r2, #1899	; 0x76b
 800274a:	4293      	cmp	r3, r2
 800274c:	dd25      	ble.n	800279a <modefly+0x102>
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <modefly+0x108>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002756:	dc20      	bgt.n	800279a <modefly+0x102>
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <modefly+0x10c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d01c      	beq.n	800279a <modefly+0x102>
		  fly_mode = FLY_MODE_HOLD;
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <modefly+0x10c>)
 8002762:	2202      	movs	r2, #2
 8002764:	701a      	strb	r2, [r3, #0]
		  ukuranstring = sprintf((char*)buffer, "Wahana Mode Hold\r\n");
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <modefly+0x110>)
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <modefly+0x124>)
 800276a:	4615      	mov	r5, r2
 800276c:	461c      	mov	r4, r3
 800276e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002770:	6028      	str	r0, [r5, #0]
 8002772:	6069      	str	r1, [r5, #4]
 8002774:	60aa      	str	r2, [r5, #8]
 8002776:	60eb      	str	r3, [r5, #12]
 8002778:	8823      	ldrh	r3, [r4, #0]
 800277a:	78a2      	ldrb	r2, [r4, #2]
 800277c:	822b      	strh	r3, [r5, #16]
 800277e:	4613      	mov	r3, r2
 8002780:	74ab      	strb	r3, [r5, #18]
 8002782:	2312      	movs	r3, #18
 8002784:	b29a      	uxth	r2, r3
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <modefly+0x118>)
 8002788:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, buffer, ukuranstring, 10);
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <modefly+0x118>)
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	230a      	movs	r3, #10
 8002790:	4905      	ldr	r1, [pc, #20]	; (80027a8 <modefly+0x110>)
 8002792:	4808      	ldr	r0, [pc, #32]	; (80027b4 <modefly+0x11c>)
 8002794:	f004 fb2d 	bl	8006df2 <HAL_UART_Transmit>
	  }
}
 8002798:	e7ff      	b.n	800279a <modefly+0x102>
 800279a:	bf00      	nop
 800279c:	bdb0      	pop	{r4, r5, r7, pc}
 800279e:	bf00      	nop
 80027a0:	2000041c 	.word	0x2000041c
 80027a4:	20000b30 	.word	0x20000b30
 80027a8:	2000099c 	.word	0x2000099c
 80027ac:	0800c62c 	.word	0x0800c62c
 80027b0:	20000b24 	.word	0x20000b24
 80027b4:	2000095c 	.word	0x2000095c
 80027b8:	0800c640 	.word	0x0800c640
 80027bc:	0800c654 	.word	0x0800c654

080027c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027c4:	f001 f944 	bl	8003a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027c8:	f000 f854 	bl	8002874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027cc:	f000 fbde 	bl	8002f8c <MX_GPIO_Init>
  MX_DMA_Init();
 80027d0:	f000 fbb4 	bl	8002f3c <MX_DMA_Init>
  MX_I2C1_Init();
 80027d4:	f000 f95c 	bl	8002a90 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80027d8:	f000 fb86 	bl	8002ee8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80027dc:	f000 fb5a 	bl	8002e94 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80027e0:	f000 fb2e 	bl	8002e40 <MX_UART4_Init>
  MX_I2C3_Init();
 80027e4:	f000 f982 	bl	8002aec <MX_I2C3_Init>
  MX_ADC1_Init();
 80027e8:	f000 f8ae 	bl	8002948 <MX_ADC1_Init>
  MX_ADC2_Init();
 80027ec:	f000 f8fe 	bl	80029ec <MX_ADC2_Init>
  MX_TIM3_Init();
 80027f0:	f000 f9aa 	bl	8002b48 <MX_TIM3_Init>
  MX_TIM4_Init();
 80027f4:	f000 fa06 	bl	8002c04 <MX_TIM4_Init>
  MX_TIM5_Init();
 80027f8:	f000 fa58 	bl	8002cac <MX_TIM5_Init>
  MX_TIM9_Init();
 80027fc:	f000 fae0 	bl	8002dc0 <MX_TIM9_Init>
  MX_TIM6_Init();
 8002800:	f000 faa8 	bl	8002d54 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  IMUInit();
 8002804:	f7ff fbf2 	bl	8001fec <IMUInit>
  BMPinit();
 8002808:	f7ff fccc 	bl	80021a4 <BMPinit>
  //HMC5883LInit();
  /*----interupt GPS UART4-----*/
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <main+0xa8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <main+0xa8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0210 	orr.w	r2, r2, #16
 800281a:	60da      	str	r2, [r3, #12]
  if(HAL_UART_Receive_DMA(&huart4, dma_rx4_buf, DMA_BUF_SIZE) != HAL_OK){
 800281c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002820:	4912      	ldr	r1, [pc, #72]	; (800286c <main+0xac>)
 8002822:	4811      	ldr	r0, [pc, #68]	; (8002868 <main+0xa8>)
 8002824:	f004 fb7e 	bl	8006f24 <HAL_UART_Receive_DMA>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <main+0x72>
	  Error_Handler();
 800282e:	f000 fca7 	bl	8003180 <Error_Handler>
  }
  __HAL_DMA_DISABLE_IT(huart4.hdmarx, DMA_IT_HT);
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <main+0xa8>)
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <main+0xa8>)
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0208 	bic.w	r2, r2, #8
 8002844:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  modefly();
 8002846:	f7ff ff27 	bl	8002698 <modefly>
	  get_IMU(&IMU_Data);
 800284a:	4809      	ldr	r0, [pc, #36]	; (8002870 <main+0xb0>)
 800284c:	f7ff fafe 	bl	8001e4c <get_IMU>
	  get_BMP280();
 8002850:	f7ff fd96 	bl	8002380 <get_BMP280>
	  gps_parse();
 8002854:	f7ff fdd6 	bl	8002404 <gps_parse>
	  monitor_BAT();
 8002858:	f7ff faae 	bl	8001db8 <monitor_BAT>
	  airspeed();
 800285c:	f7ff fa04 	bl	8001c68 <airspeed>
	  kirimGCS();
 8002860:	f7ff fede 	bl	8002620 <kirimGCS>
	  modefly();
 8002864:	e7ef      	b.n	8002846 <main+0x86>
 8002866:	bf00      	nop
 8002868:	20000b38 	.word	0x20000b38
 800286c:	20000420 	.word	0x20000420
 8002870:	20000860 	.word	0x20000860

08002874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b094      	sub	sp, #80	; 0x50
 8002878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800287a:	f107 0320 	add.w	r3, r7, #32
 800287e:	2230      	movs	r2, #48	; 0x30
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f005 faa4 	bl	8007dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	4b28      	ldr	r3, [pc, #160]	; (8002940 <SystemClock_Config+0xcc>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <SystemClock_Config+0xcc>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6413      	str	r3, [r2, #64]	; 0x40
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <SystemClock_Config+0xcc>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	4b22      	ldr	r3, [pc, #136]	; (8002944 <SystemClock_Config+0xd0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a21      	ldr	r2, [pc, #132]	; (8002944 <SystemClock_Config+0xd0>)
 80028be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <SystemClock_Config+0xd0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028d0:	2301      	movs	r3, #1
 80028d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028da:	2302      	movs	r3, #2
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028e4:	2308      	movs	r3, #8
 80028e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80028e8:	23a8      	movs	r3, #168	; 0xa8
 80028ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ec:	2302      	movs	r3, #2
 80028ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028f0:	2304      	movs	r3, #4
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f4:	f107 0320 	add.w	r3, r7, #32
 80028f8:	4618      	mov	r0, r3
 80028fa:	f003 fa95 	bl	8005e28 <HAL_RCC_OscConfig>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002904:	f000 fc3c 	bl	8003180 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002908:	230f      	movs	r3, #15
 800290a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800290c:	2302      	movs	r3, #2
 800290e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002914:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800291a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800291e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	2105      	movs	r1, #5
 8002926:	4618      	mov	r0, r3
 8002928:	f003 fcee 	bl	8006308 <HAL_RCC_ClockConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002932:	f000 fc25 	bl	8003180 <Error_Handler>
  }
}
 8002936:	bf00      	nop
 8002938:	3750      	adds	r7, #80	; 0x50
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40007000 	.word	0x40007000

08002948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800294e:	463b      	mov	r3, r7
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <MX_ADC1_Init+0x98>)
 800295c:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <MX_ADC1_Init+0x9c>)
 800295e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002962:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002966:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <MX_ADC1_Init+0x98>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002976:	2201      	movs	r2, #1
 8002978:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <MX_ADC1_Init+0x98>)
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002984:	2200      	movs	r2, #0
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <MX_ADC1_Init+0x98>)
 800298a:	4a17      	ldr	r2, [pc, #92]	; (80029e8 <MX_ADC1_Init+0xa0>)
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002990:	2200      	movs	r2, #0
 8002992:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002996:	2201      	movs	r2, #1
 8002998:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_ADC1_Init+0x98>)
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_ADC1_Init+0x98>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029a8:	480d      	ldr	r0, [pc, #52]	; (80029e0 <MX_ADC1_Init+0x98>)
 80029aa:	f001 f8e5 	bl	8003b78 <HAL_ADC_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80029b4:	f000 fbe4 	bl	8003180 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80029b8:	230e      	movs	r3, #14
 80029ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029c4:	463b      	mov	r3, r7
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_ADC1_Init+0x98>)
 80029ca:	f001 fa1f 	bl	8003e0c <HAL_ADC_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029d4:	f000 fbd4 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000910 	.word	0x20000910
 80029e4:	40012000 	.word	0x40012000
 80029e8:	0f000001 	.word	0x0f000001

080029ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029f2:	463b      	mov	r3, r7
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a00:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <MX_ADC2_Init+0x9c>)
 8002a02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a0a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002a12:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a2e:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <MX_ADC2_Init+0xa0>)
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a4c:	480d      	ldr	r0, [pc, #52]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a4e:	f001 f893 	bl	8003b78 <HAL_ADC_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002a58:	f000 fb92 	bl	8003180 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002a5c:	230f      	movs	r3, #15
 8002a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a60:	2301      	movs	r3, #1
 8002a62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a68:	463b      	mov	r3, r7
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a6e:	f001 f9cd 	bl	8003e0c <HAL_ADC_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002a78:	f000 fb82 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000774 	.word	0x20000774
 8002a88:	40012100 	.word	0x40012100
 8002a8c:	0f000001 	.word	0x0f000001

08002a90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <MX_I2C1_Init+0x50>)
 8002a96:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <MX_I2C1_Init+0x54>)
 8002a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a9a:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <MX_I2C1_Init+0x50>)
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <MX_I2C1_Init+0x58>)
 8002a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <MX_I2C1_Init+0x50>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <MX_I2C1_Init+0x50>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <MX_I2C1_Init+0x50>)
 8002aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ab2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <MX_I2C1_Init+0x50>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <MX_I2C1_Init+0x50>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ac0:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <MX_I2C1_Init+0x50>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <MX_I2C1_Init+0x50>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002acc:	4804      	ldr	r0, [pc, #16]	; (8002ae0 <MX_I2C1_Init+0x50>)
 8002ace:	f002 f9f7 	bl	8004ec0 <HAL_I2C_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ad8:	f000 fb52 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200007d8 	.word	0x200007d8
 8002ae4:	40005400 	.word	0x40005400
 8002ae8:	000186a0 	.word	0x000186a0

08002aec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <MX_I2C3_Init+0x50>)
 8002af2:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <MX_I2C3_Init+0x54>)
 8002af4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <MX_I2C3_Init+0x50>)
 8002af8:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <MX_I2C3_Init+0x58>)
 8002afa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_I2C3_Init+0x50>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_I2C3_Init+0x50>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_I2C3_Init+0x50>)
 8002b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <MX_I2C3_Init+0x50>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_I2C3_Init+0x50>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <MX_I2C3_Init+0x50>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_I2C3_Init+0x50>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b28:	4804      	ldr	r0, [pc, #16]	; (8002b3c <MX_I2C3_Init+0x50>)
 8002b2a:	f002 f9c9 	bl	8004ec0 <HAL_I2C_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002b34:	f000 fb24 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200006d4 	.word	0x200006d4
 8002b40:	40005c00 	.word	0x40005c00
 8002b44:	000186a0 	.word	0x000186a0

08002b48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4e:	f107 0310 	add.w	r3, r7, #16
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b58:	463b      	mov	r3, r7
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <MX_TIM3_Init+0xb4>)
 8002b66:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <MX_TIM3_Init+0xb8>)
 8002b68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <MX_TIM3_Init+0xb4>)
 8002b6c:	22a7      	movs	r2, #167	; 0xa7
 8002b6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b70:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <MX_TIM3_Init+0xb4>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF - 1;
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <MX_TIM3_Init+0xb4>)
 8002b78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002b7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <MX_TIM3_Init+0xb4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <MX_TIM3_Init+0xb4>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002b8a:	481c      	ldr	r0, [pc, #112]	; (8002bfc <MX_TIM3_Init+0xb4>)
 8002b8c:	f003 fdd7 	bl	800673e <HAL_TIM_IC_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002b96:	f000 faf3 	bl	8003180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ba2:	f107 0310 	add.w	r3, r7, #16
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4814      	ldr	r0, [pc, #80]	; (8002bfc <MX_TIM3_Init+0xb4>)
 8002baa:	f004 f859 	bl	8006c60 <HAL_TIMEx_MasterConfigSynchronization>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002bb4:	f000 fae4 	bl	8003180 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002bc8:	463b      	mov	r3, r7
 8002bca:	2200      	movs	r2, #0
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480b      	ldr	r0, [pc, #44]	; (8002bfc <MX_TIM3_Init+0xb4>)
 8002bd0:	f003 fde0 	bl	8006794 <HAL_TIM_IC_ConfigChannel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002bda:	f000 fad1 	bl	8003180 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002bde:	463b      	mov	r3, r7
 8002be0:	2204      	movs	r2, #4
 8002be2:	4619      	mov	r1, r3
 8002be4:	4805      	ldr	r0, [pc, #20]	; (8002bfc <MX_TIM3_Init+0xb4>)
 8002be6:	f003 fdd5 	bl	8006794 <HAL_TIM_IC_ConfigChannel>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8002bf0:	f000 fac6 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bf4:	bf00      	nop
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	200008cc 	.word	0x200008cc
 8002c00:	40000400 	.word	0x40000400

08002c04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0a:	f107 0310 	add.w	r3, r7, #16
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c14:	463b      	mov	r3, r7
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c20:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <MX_TIM4_Init+0xa0>)
 8002c22:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <MX_TIM4_Init+0xa4>)
 8002c24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168-1;
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <MX_TIM4_Init+0xa0>)
 8002c28:	22a7      	movs	r2, #167	; 0xa7
 8002c2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <MX_TIM4_Init+0xa0>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF - 1;
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <MX_TIM4_Init+0xa0>)
 8002c34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <MX_TIM4_Init+0xa0>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c40:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <MX_TIM4_Init+0xa0>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002c46:	4817      	ldr	r0, [pc, #92]	; (8002ca4 <MX_TIM4_Init+0xa0>)
 8002c48:	f003 fd79 	bl	800673e <HAL_TIM_IC_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002c52:	f000 fa95 	bl	8003180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c5e:	f107 0310 	add.w	r3, r7, #16
 8002c62:	4619      	mov	r1, r3
 8002c64:	480f      	ldr	r0, [pc, #60]	; (8002ca4 <MX_TIM4_Init+0xa0>)
 8002c66:	f003 fffb 	bl	8006c60 <HAL_TIMEx_MasterConfigSynchronization>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002c70:	f000 fa86 	bl	8003180 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c74:	2300      	movs	r3, #0
 8002c76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c84:	463b      	mov	r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4806      	ldr	r0, [pc, #24]	; (8002ca4 <MX_TIM4_Init+0xa0>)
 8002c8c:	f003 fd82 	bl	8006794 <HAL_TIM_IC_ConfigChannel>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002c96:	f000 fa73 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000072c 	.word	0x2000072c
 8002ca8:	40000800 	.word	0x40000800

08002cac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002cc8:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <MX_TIM5_Init+0xa0>)
 8002cca:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <MX_TIM5_Init+0xa4>)
 8002ccc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 168-1;
 8002cce:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <MX_TIM5_Init+0xa0>)
 8002cd0:	22a7      	movs	r2, #167	; 0xa7
 8002cd2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <MX_TIM5_Init+0xa0>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF-1;
 8002cda:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <MX_TIM5_Init+0xa0>)
 8002cdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ce0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <MX_TIM5_Init+0xa0>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce8:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <MX_TIM5_Init+0xa0>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002cee:	4817      	ldr	r0, [pc, #92]	; (8002d4c <MX_TIM5_Init+0xa0>)
 8002cf0:	f003 fd25 	bl	800673e <HAL_TIM_IC_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002cfa:	f000 fa41 	bl	8003180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d06:	f107 0310 	add.w	r3, r7, #16
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	480f      	ldr	r0, [pc, #60]	; (8002d4c <MX_TIM5_Init+0xa0>)
 8002d0e:	f003 ffa7 	bl	8006c60 <HAL_TIMEx_MasterConfigSynchronization>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002d18:	f000 fa32 	bl	8003180 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d20:	2301      	movs	r3, #1
 8002d22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4619      	mov	r1, r3
 8002d32:	4806      	ldr	r0, [pc, #24]	; (8002d4c <MX_TIM5_Init+0xa0>)
 8002d34:	f003 fd2e 	bl	8006794 <HAL_TIM_IC_ConfigChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8002d3e:	f000 fa1f 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d42:	bf00      	nop
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	2000086c 	.word	0x2000086c
 8002d50:	40000c00 	.word	0x40000c00

08002d54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d5a:	463b      	mov	r3, r7
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <MX_TIM6_Init+0x64>)
 8002d64:	4a15      	ldr	r2, [pc, #84]	; (8002dbc <MX_TIM6_Init+0x68>)
 8002d66:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42-1;
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <MX_TIM6_Init+0x64>)
 8002d6a:	2229      	movs	r2, #41	; 0x29
 8002d6c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6e:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <MX_TIM6_Init+0x64>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002d74:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <MX_TIM6_Init+0x64>)
 8002d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <MX_TIM6_Init+0x64>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d82:	480d      	ldr	r0, [pc, #52]	; (8002db8 <MX_TIM6_Init+0x64>)
 8002d84:	f003 fcb0 	bl	80066e8 <HAL_TIM_Base_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002d8e:	f000 f9f7 	bl	8003180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d9a:	463b      	mov	r3, r7
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4806      	ldr	r0, [pc, #24]	; (8002db8 <MX_TIM6_Init+0x64>)
 8002da0:	f003 ff5e 	bl	8006c60 <HAL_TIMEx_MasterConfigSynchronization>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002daa:	f000 f9e9 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000a84 	.word	0x20000a84
 8002dbc:	40001000 	.word	0x40001000

08002dc0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002dc6:	463b      	mov	r3, r7
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <MX_TIM9_Init+0x78>)
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <MX_TIM9_Init+0x7c>)
 8002dd6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <MX_TIM9_Init+0x78>)
 8002dda:	22a7      	movs	r2, #167	; 0xa7
 8002ddc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <MX_TIM9_Init+0x78>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF-1;
 8002de4:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <MX_TIM9_Init+0x78>)
 8002de6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002dea:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <MX_TIM9_Init+0x78>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <MX_TIM9_Init+0x78>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8002df8:	480f      	ldr	r0, [pc, #60]	; (8002e38 <MX_TIM9_Init+0x78>)
 8002dfa:	f003 fca0 	bl	800673e <HAL_TIM_IC_Init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002e04:	f000 f9bc 	bl	8003180 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002e18:	463b      	mov	r3, r7
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4806      	ldr	r0, [pc, #24]	; (8002e38 <MX_TIM9_Init+0x78>)
 8002e20:	f003 fcb8 	bl	8006794 <HAL_TIM_IC_ConfigChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8002e2a:	f000 f9a9 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000ae4 	.word	0x20000ae4
 8002e3c:	40014000 	.word	0x40014000

08002e40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <MX_UART4_Init+0x4c>)
 8002e46:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <MX_UART4_Init+0x50>)
 8002e48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <MX_UART4_Init+0x4c>)
 8002e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <MX_UART4_Init+0x4c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <MX_UART4_Init+0x4c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <MX_UART4_Init+0x4c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <MX_UART4_Init+0x4c>)
 8002e66:	220c      	movs	r2, #12
 8002e68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <MX_UART4_Init+0x4c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <MX_UART4_Init+0x4c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e76:	4805      	ldr	r0, [pc, #20]	; (8002e8c <MX_UART4_Init+0x4c>)
 8002e78:	f003 ff6e 	bl	8006d58 <HAL_UART_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002e82:	f000 f97d 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000b38 	.word	0x20000b38
 8002e90:	40004c00 	.word	0x40004c00

08002e94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002e9a:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <MX_USART1_UART_Init+0x50>)
 8002e9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002eba:	220c      	movs	r2, #12
 8002ebc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ebe:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eca:	4805      	ldr	r0, [pc, #20]	; (8002ee0 <MX_USART1_UART_Init+0x4c>)
 8002ecc:	f003 ff44 	bl	8006d58 <HAL_UART_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ed6:	f000 f953 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	2000095c 	.word	0x2000095c
 8002ee4:	40011000 	.word	0x40011000

08002ee8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <MX_USART2_UART_Init+0x4c>)
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <MX_USART2_UART_Init+0x50>)
 8002ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <MX_USART2_UART_Init+0x4c>)
 8002ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <MX_USART2_UART_Init+0x4c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <MX_USART2_UART_Init+0x4c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <MX_USART2_UART_Init+0x4c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <MX_USART2_UART_Init+0x4c>)
 8002f0e:	220c      	movs	r2, #12
 8002f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f12:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <MX_USART2_UART_Init+0x4c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <MX_USART2_UART_Init+0x4c>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f1e:	4805      	ldr	r0, [pc, #20]	; (8002f34 <MX_USART2_UART_Init+0x4c>)
 8002f20:	f003 ff1a 	bl	8006d58 <HAL_UART_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f2a:	f000 f929 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000bd8 	.word	0x20000bd8
 8002f38:	40004400 	.word	0x40004400

08002f3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <MX_DMA_Init+0x4c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <MX_DMA_Init+0x4c>)
 8002f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <MX_DMA_Init+0x4c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	200d      	movs	r0, #13
 8002f64:	f001 fa4b 	bl	80043fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002f68:	200d      	movs	r0, #13
 8002f6a:	f001 fa64 	bl	8004436 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	2010      	movs	r0, #16
 8002f74:	f001 fa43 	bl	80043fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f78:	2010      	movs	r0, #16
 8002f7a:	f001 fa5c 	bl	8004436 <HAL_NVIC_EnableIRQ>

}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40023800 	.word	0x40023800

08002f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08c      	sub	sp, #48	; 0x30
 8002f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f92:	f107 031c 	add.w	r3, r7, #28
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	60da      	str	r2, [r3, #12]
 8002fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	4b31      	ldr	r3, [pc, #196]	; (800306c <MX_GPIO_Init+0xe0>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a30      	ldr	r2, [pc, #192]	; (800306c <MX_GPIO_Init+0xe0>)
 8002fac:	f043 0310 	orr.w	r3, r3, #16
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	; (800306c <MX_GPIO_Init+0xe0>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	4b2a      	ldr	r3, [pc, #168]	; (800306c <MX_GPIO_Init+0xe0>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a29      	ldr	r2, [pc, #164]	; (800306c <MX_GPIO_Init+0xe0>)
 8002fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b27      	ldr	r3, [pc, #156]	; (800306c <MX_GPIO_Init+0xe0>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <MX_GPIO_Init+0xe0>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <MX_GPIO_Init+0xe0>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <MX_GPIO_Init+0xe0>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <MX_GPIO_Init+0xe0>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	; (800306c <MX_GPIO_Init+0xe0>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <MX_GPIO_Init+0xe0>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <MX_GPIO_Init+0xe0>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <MX_GPIO_Init+0xe0>)
 800301c:	f043 0308 	orr.w	r3, r3, #8
 8003020:	6313      	str	r3, [r2, #48]	; 0x30
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <MX_GPIO_Init+0xe0>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <MX_GPIO_Init+0xe0>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4a0d      	ldr	r2, [pc, #52]	; (800306c <MX_GPIO_Init+0xe0>)
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	6313      	str	r3, [r2, #48]	; 0x30
 800303e:	4b0b      	ldr	r3, [pc, #44]	; (800306c <MX_GPIO_Init+0xe0>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : RC_CH6_Pin */
  GPIO_InitStruct.Pin = RC_CH6_Pin;
 800304a:	2308      	movs	r3, #8
 800304c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <MX_GPIO_Init+0xe4>)
 8003050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003052:	2302      	movs	r3, #2
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RC_CH6_GPIO_Port, &GPIO_InitStruct);
 8003056:	f107 031c 	add.w	r3, r7, #28
 800305a:	4619      	mov	r1, r3
 800305c:	4805      	ldr	r0, [pc, #20]	; (8003074 <MX_GPIO_Init+0xe8>)
 800305e:	f001 fd95 	bl	8004b8c <HAL_GPIO_Init>

}
 8003062:	bf00      	nop
 8003064:	3730      	adds	r7, #48	; 0x30
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	10310000 	.word	0x10310000
 8003074:	40020c00 	.word	0x40020c00

08003078 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a37      	ldr	r2, [pc, #220]	; (8003164 <HAL_UART_RxCpltCallback+0xec>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d15b      	bne.n	8003142 <HAL_UART_RxCpltCallback+0xca>
	    uint16_t i, pos, start, length;
	    uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	823b      	strh	r3, [r7, #16]

	    if(dma_uart4_rx.flag && currCNDTR == DMA_BUF_SIZE)
 8003094:	4b34      	ldr	r3, [pc, #208]	; (8003168 <HAL_UART_RxCpltCallback+0xf0>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_UART_RxCpltCallback+0x36>
 800309e:	8a3b      	ldrh	r3, [r7, #16]
 80030a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030a4:	d103      	bne.n	80030ae <HAL_UART_RxCpltCallback+0x36>
	    {
	        dma_uart4_rx.flag = 0;
 80030a6:	4b30      	ldr	r3, [pc, #192]	; (8003168 <HAL_UART_RxCpltCallback+0xf0>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
	        return;
 80030ac:	e055      	b.n	800315a <HAL_UART_RxCpltCallback+0xe2>
	    }
	    start = (dma_uart4_rx.prevCNDTR < DMA_BUF_SIZE) ? (DMA_BUF_SIZE - dma_uart4_rx.prevCNDTR) : 0;
 80030ae:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <HAL_UART_RxCpltCallback+0xf0>)
 80030b0:	889b      	ldrh	r3, [r3, #4]
 80030b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030b6:	d205      	bcs.n	80030c4 <HAL_UART_RxCpltCallback+0x4c>
 80030b8:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_UART_RxCpltCallback+0xf0>)
 80030ba:	889b      	ldrh	r3, [r3, #4]
 80030bc:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	e000      	b.n	80030c6 <HAL_UART_RxCpltCallback+0x4e>
 80030c4:	2300      	movs	r3, #0
 80030c6:	81fb      	strh	r3, [r7, #14]
	    if(dma_uart4_rx.flag)    /* Timeout event */
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <HAL_UART_RxCpltCallback+0xf0>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_UART_RxCpltCallback+0x88>
	    {
	        length = (dma_uart4_rx.prevCNDTR < DMA_BUF_SIZE) ? (dma_uart4_rx.prevCNDTR - currCNDTR) : (DMA_BUF_SIZE - currCNDTR);
 80030d2:	4b25      	ldr	r3, [pc, #148]	; (8003168 <HAL_UART_RxCpltCallback+0xf0>)
 80030d4:	889b      	ldrh	r3, [r3, #4]
 80030d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030da:	d205      	bcs.n	80030e8 <HAL_UART_RxCpltCallback+0x70>
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_UART_RxCpltCallback+0xf0>)
 80030de:	889a      	ldrh	r2, [r3, #4]
 80030e0:	8a3b      	ldrh	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	e003      	b.n	80030f0 <HAL_UART_RxCpltCallback+0x78>
 80030e8:	8a3b      	ldrh	r3, [r7, #16]
 80030ea:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	827b      	strh	r3, [r7, #18]
	        dma_uart4_rx.prevCNDTR = currCNDTR;
 80030f2:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <HAL_UART_RxCpltCallback+0xf0>)
 80030f4:	8a3b      	ldrh	r3, [r7, #16]
 80030f6:	8093      	strh	r3, [r2, #4]
	        dma_uart4_rx.flag = 0;
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_UART_RxCpltCallback+0xf0>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e007      	b.n	8003110 <HAL_UART_RxCpltCallback+0x98>
	    }
	    else                /* DMA Rx Complete event */
	    {
	        length = DMA_BUF_SIZE - start;
 8003100:	89fb      	ldrh	r3, [r7, #14]
 8003102:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8003106:	827b      	strh	r3, [r7, #18]
	        dma_uart4_rx.prevCNDTR = DMA_BUF_SIZE;
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_UART_RxCpltCallback+0xf0>)
 800310a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800310e:	809a      	strh	r2, [r3, #4]
	    }
	    for(i=0,pos=start; i<length; ++i,++pos)
 8003110:	2300      	movs	r3, #0
 8003112:	82fb      	strh	r3, [r7, #22]
 8003114:	89fb      	ldrh	r3, [r7, #14]
 8003116:	82bb      	strh	r3, [r7, #20]
 8003118:	e00b      	b.n	8003132 <HAL_UART_RxCpltCallback+0xba>
	    {
	        data_gps[i] = dma_rx4_buf[pos];
 800311a:	8aba      	ldrh	r2, [r7, #20]
 800311c:	8afb      	ldrh	r3, [r7, #22]
 800311e:	4913      	ldr	r1, [pc, #76]	; (800316c <HAL_UART_RxCpltCallback+0xf4>)
 8003120:	5c89      	ldrb	r1, [r1, r2]
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <HAL_UART_RxCpltCallback+0xf8>)
 8003124:	54d1      	strb	r1, [r2, r3]
	    for(i=0,pos=start; i<length; ++i,++pos)
 8003126:	8afb      	ldrh	r3, [r7, #22]
 8003128:	3301      	adds	r3, #1
 800312a:	82fb      	strh	r3, [r7, #22]
 800312c:	8abb      	ldrh	r3, [r7, #20]
 800312e:	3301      	adds	r3, #1
 8003130:	82bb      	strh	r3, [r7, #20]
 8003132:	8afa      	ldrh	r2, [r7, #22]
 8003134:	8a7b      	ldrh	r3, [r7, #18]
 8003136:	429a      	cmp	r2, r3
 8003138:	d3ef      	bcc.n	800311a <HAL_UART_RxCpltCallback+0xa2>
	    }
	    UART4DataFlag = true;
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_UART_RxCpltCallback+0xfc>)
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e00b      	b.n	800315a <HAL_UART_RxCpltCallback+0xe2>
	}else if(huart->Instance == USART2 && IMUDataStatus == 0){
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <HAL_UART_RxCpltCallback+0x100>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d106      	bne.n	800315a <HAL_UART_RxCpltCallback+0xe2>
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_UART_RxCpltCallback+0x104>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <HAL_UART_RxCpltCallback+0xe2>
		IMUDataStatus = 1;
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_UART_RxCpltCallback+0x104>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
	}
}
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40004c00 	.word	0x40004c00
 8003168:	20000000 	.word	0x20000000
 800316c:	20000420 	.word	0x20000420
 8003170:	20000218 	.word	0x20000218
 8003174:	2000040c 	.word	0x2000040c
 8003178:	40004400 	.word	0x40004400
 800317c:	20000208 	.word	0x20000208

08003180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <HAL_MspInit+0x4c>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	4a0f      	ldr	r2, [pc, #60]	; (80031dc <HAL_MspInit+0x4c>)
 80031a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a4:	6453      	str	r3, [r2, #68]	; 0x44
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <HAL_MspInit+0x4c>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_MspInit+0x4c>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	4a08      	ldr	r2, [pc, #32]	; (80031dc <HAL_MspInit+0x4c>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6413      	str	r3, [r2, #64]	; 0x40
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_MspInit+0x4c>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800

080031e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	; 0x30
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2e      	ldr	r2, [pc, #184]	; (80032b8 <HAL_ADC_MspInit+0xd8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d128      	bne.n	8003254 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	4a2c      	ldr	r2, [pc, #176]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	6453      	str	r3, [r2, #68]	; 0x44
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a25      	ldr	r2, [pc, #148]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 8003228:	f043 0304 	orr.w	r3, r3, #4
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b23      	ldr	r3, [pc, #140]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800323a:	2310      	movs	r3, #16
 800323c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800323e:	2303      	movs	r3, #3
 8003240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003246:	f107 031c 	add.w	r3, r7, #28
 800324a:	4619      	mov	r1, r3
 800324c:	481c      	ldr	r0, [pc, #112]	; (80032c0 <HAL_ADC_MspInit+0xe0>)
 800324e:	f001 fc9d 	bl	8004b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003252:	e02c      	b.n	80032ae <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_ADC_MspInit+0xe4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d127      	bne.n	80032ae <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 8003268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326c:	6453      	str	r3, [r2, #68]	; 0x44
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_ADC_MspInit+0xdc>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003296:	2320      	movs	r3, #32
 8003298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800329a:	2303      	movs	r3, #3
 800329c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	4619      	mov	r1, r3
 80032a8:	4805      	ldr	r0, [pc, #20]	; (80032c0 <HAL_ADC_MspInit+0xe0>)
 80032aa:	f001 fc6f 	bl	8004b8c <HAL_GPIO_Init>
}
 80032ae:	bf00      	nop
 80032b0:	3730      	adds	r7, #48	; 0x30
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40012000 	.word	0x40012000
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40012100 	.word	0x40012100

080032c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	; 0x30
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 031c 	add.w	r3, r7, #28
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a42      	ldr	r2, [pc, #264]	; (80033f0 <HAL_I2C_MspInit+0x128>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d12d      	bne.n	8003346 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a40      	ldr	r2, [pc, #256]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003306:	f44f 7340 	mov.w	r3, #768	; 0x300
 800330a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800330c:	2312      	movs	r3, #18
 800330e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003310:	2301      	movs	r3, #1
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003318:	2304      	movs	r3, #4
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	4619      	mov	r1, r3
 8003322:	4835      	ldr	r0, [pc, #212]	; (80033f8 <HAL_I2C_MspInit+0x130>)
 8003324:	f001 fc32 	bl	8004b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	4a30      	ldr	r2, [pc, #192]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 8003332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003336:	6413      	str	r3, [r2, #64]	; 0x40
 8003338:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003344:	e050      	b.n	80033e8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <HAL_I2C_MspInit+0x134>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d14b      	bne.n	80033e8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 800335a:	f043 0304 	orr.w	r3, r3, #4
 800335e:	6313      	str	r3, [r2, #48]	; 0x30
 8003360:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	4a1f      	ldr	r2, [pc, #124]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6313      	str	r3, [r2, #48]	; 0x30
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800338c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800338e:	2312      	movs	r3, #18
 8003390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003392:	2301      	movs	r3, #1
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003396:	2303      	movs	r3, #3
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800339a:	2304      	movs	r3, #4
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800339e:	f107 031c 	add.w	r3, r7, #28
 80033a2:	4619      	mov	r1, r3
 80033a4:	4816      	ldr	r0, [pc, #88]	; (8003400 <HAL_I2C_MspInit+0x138>)
 80033a6:	f001 fbf1 	bl	8004b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80033aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033b0:	2312      	movs	r3, #18
 80033b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b4:	2301      	movs	r3, #1
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80033bc:	2304      	movs	r3, #4
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c0:	f107 031c 	add.w	r3, r7, #28
 80033c4:	4619      	mov	r1, r3
 80033c6:	480f      	ldr	r0, [pc, #60]	; (8003404 <HAL_I2C_MspInit+0x13c>)
 80033c8:	f001 fbe0 	bl	8004b8c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 80033d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033da:	6413      	str	r3, [r2, #64]	; 0x40
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_I2C_MspInit+0x12c>)
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
}
 80033e8:	bf00      	nop
 80033ea:	3730      	adds	r7, #48	; 0x30
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40005400 	.word	0x40005400
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020400 	.word	0x40020400
 80033fc:	40005c00 	.word	0x40005c00
 8003400:	40020800 	.word	0x40020800
 8003404:	40020000 	.word	0x40020000

08003408 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b090      	sub	sp, #64	; 0x40
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a64      	ldr	r2, [pc, #400]	; (80035b8 <HAL_TIM_IC_MspInit+0x1b0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d12c      	bne.n	8003484 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
 800342e:	4b63      	ldr	r3, [pc, #396]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a62      	ldr	r2, [pc, #392]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b60      	ldr	r3, [pc, #384]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	4b5c      	ldr	r3, [pc, #368]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a5b      	ldr	r2, [pc, #364]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b59      	ldr	r3, [pc, #356]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003462:	23c0      	movs	r3, #192	; 0xc0
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346a:	2300      	movs	r3, #0
 800346c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346e:	2300      	movs	r3, #0
 8003470:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003472:	2302      	movs	r3, #2
 8003474:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800347a:	4619      	mov	r1, r3
 800347c:	4850      	ldr	r0, [pc, #320]	; (80035c0 <HAL_TIM_IC_MspInit+0x1b8>)
 800347e:	f001 fb85 	bl	8004b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003482:	e095      	b.n	80035b0 <HAL_TIM_IC_MspInit+0x1a8>
  else if(htim_ic->Instance==TIM4)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a4e      	ldr	r2, [pc, #312]	; (80035c4 <HAL_TIM_IC_MspInit+0x1bc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d12d      	bne.n	80034ea <HAL_TIM_IC_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
 8003492:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a49      	ldr	r2, [pc, #292]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
 800349e:	4b47      	ldr	r3, [pc, #284]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a42      	ldr	r2, [pc, #264]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 80034b4:	f043 0308 	orr.w	r3, r3, #8
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	2300      	movs	r3, #0
 80034d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80034d8:	2302      	movs	r3, #2
 80034da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034e0:	4619      	mov	r1, r3
 80034e2:	4839      	ldr	r0, [pc, #228]	; (80035c8 <HAL_TIM_IC_MspInit+0x1c0>)
 80034e4:	f001 fb52 	bl	8004b8c <HAL_GPIO_Init>
}
 80034e8:	e062      	b.n	80035b0 <HAL_TIM_IC_MspInit+0x1a8>
  else if(htim_ic->Instance==TIM5)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a37      	ldr	r2, [pc, #220]	; (80035cc <HAL_TIM_IC_MspInit+0x1c4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d12c      	bne.n	800354e <HAL_TIM_IC_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	4b30      	ldr	r3, [pc, #192]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	4a2f      	ldr	r2, [pc, #188]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 80034fe:	f043 0308 	orr.w	r3, r3, #8
 8003502:	6413      	str	r3, [r2, #64]	; 0x40
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	4b29      	ldr	r3, [pc, #164]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	4a28      	ldr	r2, [pc, #160]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6313      	str	r3, [r2, #48]	; 0x30
 8003520:	4b26      	ldr	r3, [pc, #152]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800352c:	2301      	movs	r3, #1
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003538:	2300      	movs	r3, #0
 800353a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800353c:	2302      	movs	r3, #2
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003544:	4619      	mov	r1, r3
 8003546:	481e      	ldr	r0, [pc, #120]	; (80035c0 <HAL_TIM_IC_MspInit+0x1b8>)
 8003548:	f001 fb20 	bl	8004b8c <HAL_GPIO_Init>
}
 800354c:	e030      	b.n	80035b0 <HAL_TIM_IC_MspInit+0x1a8>
  else if(htim_ic->Instance==TIM9)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_TIM_IC_MspInit+0x1c8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d12b      	bne.n	80035b0 <HAL_TIM_IC_MspInit+0x1a8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	4a16      	ldr	r2, [pc, #88]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 8003562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003566:	6453      	str	r3, [r2, #68]	; 0x44
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	4a0f      	ldr	r2, [pc, #60]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 800357e:	f043 0310 	orr.w	r3, r3, #16
 8003582:	6313      	str	r3, [r2, #48]	; 0x30
 8003584:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_TIM_IC_MspInit+0x1b4>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003590:	2340      	movs	r3, #64	; 0x40
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003594:	2302      	movs	r3, #2
 8003596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359c:	2300      	movs	r3, #0
 800359e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80035a0:	2303      	movs	r3, #3
 80035a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035a8:	4619      	mov	r1, r3
 80035aa:	480a      	ldr	r0, [pc, #40]	; (80035d4 <HAL_TIM_IC_MspInit+0x1cc>)
 80035ac:	f001 faee 	bl	8004b8c <HAL_GPIO_Init>
}
 80035b0:	bf00      	nop
 80035b2:	3740      	adds	r7, #64	; 0x40
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40020000 	.word	0x40020000
 80035c4:	40000800 	.word	0x40000800
 80035c8:	40020c00 	.word	0x40020c00
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	40014000 	.word	0x40014000
 80035d4:	40021000 	.word	0x40021000

080035d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0b      	ldr	r2, [pc, #44]	; (8003614 <HAL_TIM_Base_MspInit+0x3c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10d      	bne.n	8003606 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_TIM_Base_MspInit+0x40>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	4a09      	ldr	r2, [pc, #36]	; (8003618 <HAL_TIM_Base_MspInit+0x40>)
 80035f4:	f043 0310 	orr.w	r3, r3, #16
 80035f8:	6413      	str	r3, [r2, #64]	; 0x40
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_TIM_Base_MspInit+0x40>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40001000 	.word	0x40001000
 8003618:	40023800 	.word	0x40023800

0800361c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08e      	sub	sp, #56	; 0x38
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a7f      	ldr	r2, [pc, #508]	; (8003838 <HAL_UART_MspInit+0x21c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d164      	bne.n	8003708 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	4b7e      	ldr	r3, [pc, #504]	; (800383c <HAL_UART_MspInit+0x220>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a7d      	ldr	r2, [pc, #500]	; (800383c <HAL_UART_MspInit+0x220>)
 8003648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
 800364e:	4b7b      	ldr	r3, [pc, #492]	; (800383c <HAL_UART_MspInit+0x220>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	4b77      	ldr	r3, [pc, #476]	; (800383c <HAL_UART_MspInit+0x220>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a76      	ldr	r2, [pc, #472]	; (800383c <HAL_UART_MspInit+0x220>)
 8003664:	f043 0304 	orr.w	r3, r3, #4
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b74      	ldr	r3, [pc, #464]	; (800383c <HAL_UART_MspInit+0x220>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003676:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003680:	2301      	movs	r3, #1
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003684:	2303      	movs	r3, #3
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003688:	2308      	movs	r3, #8
 800368a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800368c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003690:	4619      	mov	r1, r3
 8003692:	486b      	ldr	r0, [pc, #428]	; (8003840 <HAL_UART_MspInit+0x224>)
 8003694:	f001 fa7a 	bl	8004b8c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003698:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_UART_MspInit+0x228>)
 800369a:	4a6b      	ldr	r2, [pc, #428]	; (8003848 <HAL_UART_MspInit+0x22c>)
 800369c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800369e:	4b69      	ldr	r3, [pc, #420]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036a4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036a6:	4b67      	ldr	r3, [pc, #412]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ac:	4b65      	ldr	r3, [pc, #404]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036b2:	4b64      	ldr	r3, [pc, #400]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036ba:	4b62      	ldr	r3, [pc, #392]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036bc:	2200      	movs	r2, #0
 80036be:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036c0:	4b60      	ldr	r3, [pc, #384]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80036c6:	4b5f      	ldr	r3, [pc, #380]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036cc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036ce:	4b5d      	ldr	r3, [pc, #372]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036d4:	4b5b      	ldr	r3, [pc, #364]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80036da:	485a      	ldr	r0, [pc, #360]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036dc:	f000 fec6 	bl	800446c <HAL_DMA_Init>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80036e6:	f7ff fd4b 	bl	8003180 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a55      	ldr	r2, [pc, #340]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34
 80036f0:	4a54      	ldr	r2, [pc, #336]	; (8003844 <HAL_UART_MspInit+0x228>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80036f6:	2200      	movs	r2, #0
 80036f8:	2100      	movs	r1, #0
 80036fa:	2034      	movs	r0, #52	; 0x34
 80036fc:	f000 fe7f 	bl	80043fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003700:	2034      	movs	r0, #52	; 0x34
 8003702:	f000 fe98 	bl	8004436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003706:	e092      	b.n	800382e <HAL_UART_MspInit+0x212>
  else if(huart->Instance==USART1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a4f      	ldr	r2, [pc, #316]	; (800384c <HAL_UART_MspInit+0x230>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d12d      	bne.n	800376e <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	4b49      	ldr	r3, [pc, #292]	; (800383c <HAL_UART_MspInit+0x220>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	4a48      	ldr	r2, [pc, #288]	; (800383c <HAL_UART_MspInit+0x220>)
 800371c:	f043 0310 	orr.w	r3, r3, #16
 8003720:	6453      	str	r3, [r2, #68]	; 0x44
 8003722:	4b46      	ldr	r3, [pc, #280]	; (800383c <HAL_UART_MspInit+0x220>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	4b42      	ldr	r3, [pc, #264]	; (800383c <HAL_UART_MspInit+0x220>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a41      	ldr	r2, [pc, #260]	; (800383c <HAL_UART_MspInit+0x220>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6313      	str	r3, [r2, #48]	; 0x30
 800373e:	4b3f      	ldr	r3, [pc, #252]	; (800383c <HAL_UART_MspInit+0x220>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800374a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003758:	2303      	movs	r3, #3
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800375c:	2307      	movs	r3, #7
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003764:	4619      	mov	r1, r3
 8003766:	483a      	ldr	r0, [pc, #232]	; (8003850 <HAL_UART_MspInit+0x234>)
 8003768:	f001 fa10 	bl	8004b8c <HAL_GPIO_Init>
}
 800376c:	e05f      	b.n	800382e <HAL_UART_MspInit+0x212>
  else if(huart->Instance==USART2)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a38      	ldr	r2, [pc, #224]	; (8003854 <HAL_UART_MspInit+0x238>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d15a      	bne.n	800382e <HAL_UART_MspInit+0x212>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003778:	2300      	movs	r3, #0
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	4b2f      	ldr	r3, [pc, #188]	; (800383c <HAL_UART_MspInit+0x220>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	4a2e      	ldr	r2, [pc, #184]	; (800383c <HAL_UART_MspInit+0x220>)
 8003782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003786:	6413      	str	r3, [r2, #64]	; 0x40
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <HAL_UART_MspInit+0x220>)
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	4b28      	ldr	r3, [pc, #160]	; (800383c <HAL_UART_MspInit+0x220>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	4a27      	ldr	r2, [pc, #156]	; (800383c <HAL_UART_MspInit+0x220>)
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	6313      	str	r3, [r2, #48]	; 0x30
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <HAL_UART_MspInit+0x220>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80037b0:	2360      	movs	r3, #96	; 0x60
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037bc:	2303      	movs	r3, #3
 80037be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037c0:	2307      	movs	r3, #7
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c8:	4619      	mov	r1, r3
 80037ca:	4823      	ldr	r0, [pc, #140]	; (8003858 <HAL_UART_MspInit+0x23c>)
 80037cc:	f001 f9de 	bl	8004b8c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80037d0:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_UART_MspInit+0x240>)
 80037d2:	4a23      	ldr	r2, [pc, #140]	; (8003860 <HAL_UART_MspInit+0x244>)
 80037d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80037d6:	4b21      	ldr	r3, [pc, #132]	; (800385c <HAL_UART_MspInit+0x240>)
 80037d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037de:	4b1f      	ldr	r3, [pc, #124]	; (800385c <HAL_UART_MspInit+0x240>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e4:	4b1d      	ldr	r3, [pc, #116]	; (800385c <HAL_UART_MspInit+0x240>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037ea:	4b1c      	ldr	r3, [pc, #112]	; (800385c <HAL_UART_MspInit+0x240>)
 80037ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037f2:	4b1a      	ldr	r3, [pc, #104]	; (800385c <HAL_UART_MspInit+0x240>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037f8:	4b18      	ldr	r3, [pc, #96]	; (800385c <HAL_UART_MspInit+0x240>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80037fe:	4b17      	ldr	r3, [pc, #92]	; (800385c <HAL_UART_MspInit+0x240>)
 8003800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003804:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003806:	4b15      	ldr	r3, [pc, #84]	; (800385c <HAL_UART_MspInit+0x240>)
 8003808:	2200      	movs	r2, #0
 800380a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <HAL_UART_MspInit+0x240>)
 800380e:	2200      	movs	r2, #0
 8003810:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003812:	4812      	ldr	r0, [pc, #72]	; (800385c <HAL_UART_MspInit+0x240>)
 8003814:	f000 fe2a 	bl	800446c <HAL_DMA_Init>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_UART_MspInit+0x206>
      Error_Handler();
 800381e:	f7ff fcaf 	bl	8003180 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a0d      	ldr	r2, [pc, #52]	; (800385c <HAL_UART_MspInit+0x240>)
 8003826:	635a      	str	r2, [r3, #52]	; 0x34
 8003828:	4a0c      	ldr	r2, [pc, #48]	; (800385c <HAL_UART_MspInit+0x240>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800382e:	bf00      	nop
 8003830:	3738      	adds	r7, #56	; 0x38
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40004c00 	.word	0x40004c00
 800383c:	40023800 	.word	0x40023800
 8003840:	40020800 	.word	0x40020800
 8003844:	20000614 	.word	0x20000614
 8003848:	40026040 	.word	0x40026040
 800384c:	40011000 	.word	0x40011000
 8003850:	40020000 	.word	0x40020000
 8003854:	40004400 	.word	0x40004400
 8003858:	40020c00 	.word	0x40020c00
 800385c:	20000674 	.word	0x20000674
 8003860:	40026088 	.word	0x40026088

08003864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003872:	b480      	push	{r7}
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003876:	e7fe      	b.n	8003876 <HardFault_Handler+0x4>

08003878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800387c:	e7fe      	b.n	800387c <MemManage_Handler+0x4>

0800387e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003882:	e7fe      	b.n	8003882 <BusFault_Handler+0x4>

08003884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003888:	e7fe      	b.n	8003888 <UsageFault_Handler+0x4>

0800388a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038b8:	f000 f91c 	bl	8003af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /*---gps uart4---*/
	  if(dma_uart4_rx.timer == 1)
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <SysTick_Handler+0x38>)
 80038be:	885b      	ldrh	r3, [r3, #2]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d106      	bne.n	80038d2 <SysTick_Handler+0x1e>
  	  {
      /* DMA Timeout event: set Timeout Flag and call DMA Rx Complete Callback */
      dma_uart4_rx.flag = 1;
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <SysTick_Handler+0x38>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
      hdma_uart4_rx.XferCpltCallback(&hdma_uart4_rx);
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <SysTick_Handler+0x3c>)
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	4808      	ldr	r0, [pc, #32]	; (80038f0 <SysTick_Handler+0x3c>)
 80038d0:	4798      	blx	r3
  	  }
  if(dma_uart4_rx.timer) { --dma_uart4_rx.timer; }
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <SysTick_Handler+0x38>)
 80038d4:	885b      	ldrh	r3, [r3, #2]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <SysTick_Handler+0x32>
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <SysTick_Handler+0x38>)
 80038dc:	885b      	ldrh	r3, [r3, #2]
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	4b02      	ldr	r3, [pc, #8]	; (80038ec <SysTick_Handler+0x38>)
 80038e4:	805a      	strh	r2, [r3, #2]
  /* USER CODE END SysTick_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000000 	.word	0x20000000
 80038f0:	20000614 	.word	0x20000614

080038f4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80038f8:	4802      	ldr	r0, [pc, #8]	; (8003904 <DMA1_Stream2_IRQHandler+0x10>)
 80038fa:	f000 fedf 	bl	80046bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000614 	.word	0x20000614

08003908 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <DMA1_Stream5_IRQHandler+0x10>)
 800390e:	f000 fed5 	bl	80046bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000674 	.word	0x20000674

0800391c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
    if(__HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE) != RESET)
 8003922:	4b0e      	ldr	r3, [pc, #56]	; (800395c <UART4_IRQHandler+0x40>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b10      	cmp	r3, #16
 800392e:	d10d      	bne.n	800394c <UART4_IRQHandler+0x30>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8003930:	2300      	movs	r3, #0
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <UART4_IRQHandler+0x40>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <UART4_IRQHandler+0x40>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
        /* Start DMA timer */
        dma_uart4_rx.timer = DMA_TIMEOUT_MS;
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <UART4_IRQHandler+0x44>)
 8003948:	220a      	movs	r2, #10
 800394a:	805a      	strh	r2, [r3, #2]
    }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800394c:	4803      	ldr	r0, [pc, #12]	; (800395c <UART4_IRQHandler+0x40>)
 800394e:	f003 fb69 	bl	8007024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000b38 	.word	0x20000b38
 8003960:	20000000 	.word	0x20000000

08003964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800396c:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <_sbrk+0x5c>)
 800396e:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <_sbrk+0x60>)
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <_sbrk+0x64>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d102      	bne.n	8003986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <_sbrk+0x64>)
 8003982:	4a12      	ldr	r2, [pc, #72]	; (80039cc <_sbrk+0x68>)
 8003984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <_sbrk+0x64>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	429a      	cmp	r2, r3
 8003992:	d207      	bcs.n	80039a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003994:	f004 f9f2 	bl	8007d7c <__errno>
 8003998:	4602      	mov	r2, r0
 800399a:	230c      	movs	r3, #12
 800399c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800399e:	f04f 33ff 	mov.w	r3, #4294967295
 80039a2:	e009      	b.n	80039b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <_sbrk+0x64>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <_sbrk+0x64>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	4a05      	ldr	r2, [pc, #20]	; (80039c8 <_sbrk+0x64>)
 80039b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039b6:	68fb      	ldr	r3, [r7, #12]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20020000 	.word	0x20020000
 80039c4:	00000400 	.word	0x00000400
 80039c8:	20000410 	.word	0x20000410
 80039cc:	20000c88 	.word	0x20000c88

080039d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <SystemInit+0x28>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <SystemInit+0x28>)
 80039dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <SystemInit+0x28>)
 80039e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039ea:	609a      	str	r2, [r3, #8]
#endif
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a02:	e003      	b.n	8003a0c <LoopCopyDataInit>

08003a04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a0a:	3104      	adds	r1, #4

08003a0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a0c:	480b      	ldr	r0, [pc, #44]	; (8003a3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a14:	d3f6      	bcc.n	8003a04 <CopyDataInit>
  ldr  r2, =_sbss
 8003a16:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a18:	e002      	b.n	8003a20 <LoopFillZerobss>

08003a1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a1c:	f842 3b04 	str.w	r3, [r2], #4

08003a20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a24:	d3f9      	bcc.n	8003a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a26:	f7ff ffd3 	bl	80039d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a2a:	f004 f9ad 	bl	8007d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a2e:	f7fe fec7 	bl	80027c0 <main>
  bx  lr    
 8003a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003a38:	0800c990 	.word	0x0800c990
  ldr  r0, =_sdata
 8003a3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a40:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8003a44:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8003a48:	20000c88 	.word	0x20000c88

08003a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a4c:	e7fe      	b.n	8003a4c <ADC_IRQHandler>
	...

08003a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_Init+0x40>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <HAL_Init+0x40>)
 8003a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_Init+0x40>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <HAL_Init+0x40>)
 8003a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_Init+0x40>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <HAL_Init+0x40>)
 8003a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a78:	2003      	movs	r0, #3
 8003a7a:	f000 fcb5 	bl	80043e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a7e:	2000      	movs	r0, #0
 8003a80:	f000 f808 	bl	8003a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a84:	f7ff fb84 	bl	8003190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00

08003a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a9c:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <HAL_InitTick+0x54>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_InitTick+0x58>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fccd 	bl	8004452 <HAL_SYSTICK_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00e      	b.n	8003ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b0f      	cmp	r3, #15
 8003ac6:	d80a      	bhi.n	8003ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	f000 fc95 	bl	80043fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ad4:	4a06      	ldr	r2, [pc, #24]	; (8003af0 <HAL_InitTick+0x5c>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000008 	.word	0x20000008
 8003aec:	20000010 	.word	0x20000010
 8003af0:	2000000c 	.word	0x2000000c

08003af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_IncTick+0x20>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_IncTick+0x24>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4413      	add	r3, r2
 8003b04:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <HAL_IncTick+0x24>)
 8003b06:	6013      	str	r3, [r2, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000010 	.word	0x20000010
 8003b18:	20000c80 	.word	0x20000c80

08003b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <HAL_GetTick+0x14>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000c80 	.word	0x20000c80

08003b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b3c:	f7ff ffee 	bl	8003b1c <HAL_GetTick>
 8003b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d005      	beq.n	8003b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_Delay+0x40>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b5a:	bf00      	nop
 8003b5c:	f7ff ffde 	bl	8003b1c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d8f7      	bhi.n	8003b5c <HAL_Delay+0x28>
  {
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000010 	.word	0x20000010

08003b78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e033      	b.n	8003bf6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff fb22 	bl	80031e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d118      	bne.n	8003be8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bbe:	f023 0302 	bic.w	r3, r3, #2
 8003bc2:	f043 0202 	orr.w	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa40 	bl	8004050 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f023 0303 	bic.w	r3, r3, #3
 8003bde:	f043 0201 	orr.w	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
 8003be6:	e001      	b.n	8003bec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_ADC_Start+0x1a>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e0a5      	b.n	8003d66 <HAL_ADC_Start+0x166>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d018      	beq.n	8003c62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c40:	4b4c      	ldr	r3, [pc, #304]	; (8003d74 <HAL_ADC_Start+0x174>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a4c      	ldr	r2, [pc, #304]	; (8003d78 <HAL_ADC_Start+0x178>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0c9a      	lsrs	r2, r3, #18
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003c54:	e002      	b.n	8003c5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f9      	bne.n	8003c56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d179      	bne.n	8003d64 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cae:	d106      	bne.n	8003cbe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	f023 0206 	bic.w	r2, r3, #6
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	645a      	str	r2, [r3, #68]	; 0x44
 8003cbc:	e002      	b.n	8003cc4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ccc:	4b2b      	ldr	r3, [pc, #172]	; (8003d7c <HAL_ADC_Start+0x17c>)
 8003cce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003cd8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d12a      	bne.n	8003d3c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <HAL_ADC_Start+0x180>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d015      	beq.n	8003d1c <HAL_ADC_Start+0x11c>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a23      	ldr	r2, [pc, #140]	; (8003d84 <HAL_ADC_Start+0x184>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d105      	bne.n	8003d06 <HAL_ADC_Start+0x106>
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_ADC_Start+0x17c>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <HAL_ADC_Start+0x188>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d129      	bne.n	8003d64 <HAL_ADC_Start+0x164>
 8003d10:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_ADC_Start+0x17c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	2b0f      	cmp	r3, #15
 8003d1a:	d823      	bhi.n	8003d64 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d11c      	bne.n	8003d64 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d38:	609a      	str	r2, [r3, #8]
 8003d3a:	e013      	b.n	8003d64 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <HAL_ADC_Start+0x180>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d10e      	bne.n	8003d64 <HAL_ADC_Start+0x164>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d62:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000008 	.word	0x20000008
 8003d78:	431bde83 	.word	0x431bde83
 8003d7c:	40012300 	.word	0x40012300
 8003d80:	40012000 	.word	0x40012000
 8003d84:	40012100 	.word	0x40012100
 8003d88:	40012200 	.word	0x40012200

08003d8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_ADC_Stop+0x16>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e021      	b.n	8003de6 <HAL_ADC_Stop+0x5a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x1c>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e105      	b.n	8004034 <HAL_ADC_ConfigChannel+0x228>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b09      	cmp	r3, #9
 8003e36:	d925      	bls.n	8003e84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68d9      	ldr	r1, [r3, #12]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	4613      	mov	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3b1e      	subs	r3, #30
 8003e4e:	2207      	movs	r2, #7
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43da      	mvns	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68d9      	ldr	r1, [r3, #12]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	4618      	mov	r0, r3
 8003e70:	4603      	mov	r3, r0
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4403      	add	r3, r0
 8003e76:	3b1e      	subs	r3, #30
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	e022      	b.n	8003eca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6919      	ldr	r1, [r3, #16]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	2207      	movs	r2, #7
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6919      	ldr	r1, [r3, #16]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	4618      	mov	r0, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4403      	add	r3, r0
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d824      	bhi.n	8003f1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3b05      	subs	r3, #5
 8003ee4:	221f      	movs	r2, #31
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43da      	mvns	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4618      	mov	r0, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3b05      	subs	r3, #5
 8003f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	635a      	str	r2, [r3, #52]	; 0x34
 8003f1a:	e04c      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	d824      	bhi.n	8003f6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	3b23      	subs	r3, #35	; 0x23
 8003f36:	221f      	movs	r2, #31
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43da      	mvns	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	400a      	ands	r2, r1
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	4618      	mov	r0, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3b23      	subs	r3, #35	; 0x23
 8003f60:	fa00 f203 	lsl.w	r2, r0, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f6c:	e023      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3b41      	subs	r3, #65	; 0x41
 8003f80:	221f      	movs	r2, #31
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43da      	mvns	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3b41      	subs	r3, #65	; 0x41
 8003faa:	fa00 f203 	lsl.w	r2, r0, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <HAL_ADC_ConfigChannel+0x234>)
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a21      	ldr	r2, [pc, #132]	; (8004044 <HAL_ADC_ConfigChannel+0x238>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d109      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x1cc>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b12      	cmp	r3, #18
 8003fca:	d105      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	; (8004044 <HAL_ADC_ConfigChannel+0x238>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d123      	bne.n	800402a <HAL_ADC_ConfigChannel+0x21e>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d003      	beq.n	8003ff2 <HAL_ADC_ConfigChannel+0x1e6>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b11      	cmp	r3, #17
 8003ff0:	d11b      	bne.n	800402a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b10      	cmp	r3, #16
 8004004:	d111      	bne.n	800402a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <HAL_ADC_ConfigChannel+0x23c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a10      	ldr	r2, [pc, #64]	; (800404c <HAL_ADC_ConfigChannel+0x240>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	0c9a      	lsrs	r2, r3, #18
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800401c:	e002      	b.n	8004024 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3b01      	subs	r3, #1
 8004022:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f9      	bne.n	800401e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40012300 	.word	0x40012300
 8004044:	40012000 	.word	0x40012000
 8004048:	20000008 	.word	0x20000008
 800404c:	431bde83 	.word	0x431bde83

08004050 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004058:	4b79      	ldr	r3, [pc, #484]	; (8004240 <ADC_Init+0x1f0>)
 800405a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	021a      	lsls	r2, r3, #8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6899      	ldr	r1, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	4a58      	ldr	r2, [pc, #352]	; (8004244 <ADC_Init+0x1f4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6899      	ldr	r1, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6899      	ldr	r1, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	e00f      	b.n	800414e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800413c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800414c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0202 	bic.w	r2, r2, #2
 800415c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6899      	ldr	r1, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7e1b      	ldrb	r3, [r3, #24]
 8004168:	005a      	lsls	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01b      	beq.n	80041b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800419a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	3b01      	subs	r3, #1
 80041a8:	035a      	lsls	r2, r3, #13
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	e007      	b.n	80041c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	3b01      	subs	r3, #1
 80041e0:	051a      	lsls	r2, r3, #20
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6899      	ldr	r1, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004206:	025a      	lsls	r2, r3, #9
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6899      	ldr	r1, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	029a      	lsls	r2, r3, #10
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40012300 	.word	0x40012300
 8004244:	0f000001 	.word	0x0f000001

08004248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <__NVIC_SetPriorityGrouping+0x44>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004264:	4013      	ands	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800427a:	4a04      	ldr	r2, [pc, #16]	; (800428c <__NVIC_SetPriorityGrouping+0x44>)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	60d3      	str	r3, [r2, #12]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	f003 0307 	and.w	r3, r3, #7
}
 800429e:	4618      	mov	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	db0b      	blt.n	80042d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	f003 021f 	and.w	r2, r3, #31
 80042c4:	4907      	ldr	r1, [pc, #28]	; (80042e4 <__NVIC_EnableIRQ+0x38>)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2001      	movs	r0, #1
 80042ce:	fa00 f202 	lsl.w	r2, r0, r2
 80042d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	e000e100 	.word	0xe000e100

080042e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db0a      	blt.n	8004312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	490c      	ldr	r1, [pc, #48]	; (8004334 <__NVIC_SetPriority+0x4c>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	440b      	add	r3, r1
 800430c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004310:	e00a      	b.n	8004328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4908      	ldr	r1, [pc, #32]	; (8004338 <__NVIC_SetPriority+0x50>)
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	3b04      	subs	r3, #4
 8004320:	0112      	lsls	r2, r2, #4
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	440b      	add	r3, r1
 8004326:	761a      	strb	r2, [r3, #24]
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000e100 	.word	0xe000e100
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800433c:	b480      	push	{r7}
 800433e:	b089      	sub	sp, #36	; 0x24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f1c3 0307 	rsb	r3, r3, #7
 8004356:	2b04      	cmp	r3, #4
 8004358:	bf28      	it	cs
 800435a:	2304      	movcs	r3, #4
 800435c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3304      	adds	r3, #4
 8004362:	2b06      	cmp	r3, #6
 8004364:	d902      	bls.n	800436c <NVIC_EncodePriority+0x30>
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3b03      	subs	r3, #3
 800436a:	e000      	b.n	800436e <NVIC_EncodePriority+0x32>
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004370:	f04f 32ff 	mov.w	r2, #4294967295
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43da      	mvns	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	401a      	ands	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004384:	f04f 31ff 	mov.w	r1, #4294967295
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	fa01 f303 	lsl.w	r3, r1, r3
 800438e:	43d9      	mvns	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004394:	4313      	orrs	r3, r2
         );
}
 8004396:	4618      	mov	r0, r3
 8004398:	3724      	adds	r7, #36	; 0x24
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043b4:	d301      	bcc.n	80043ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043b6:	2301      	movs	r3, #1
 80043b8:	e00f      	b.n	80043da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ba:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <SysTick_Config+0x40>)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3b01      	subs	r3, #1
 80043c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043c2:	210f      	movs	r1, #15
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	f7ff ff8e 	bl	80042e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <SysTick_Config+0x40>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043d2:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <SysTick_Config+0x40>)
 80043d4:	2207      	movs	r2, #7
 80043d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	e000e010 	.word	0xe000e010

080043e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff ff29 	bl	8004248 <__NVIC_SetPriorityGrouping>
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af00      	add	r7, sp, #0
 8004404:	4603      	mov	r3, r0
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004410:	f7ff ff3e 	bl	8004290 <__NVIC_GetPriorityGrouping>
 8004414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	6978      	ldr	r0, [r7, #20]
 800441c:	f7ff ff8e 	bl	800433c <NVIC_EncodePriority>
 8004420:	4602      	mov	r2, r0
 8004422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff ff5d 	bl	80042e8 <__NVIC_SetPriority>
}
 800442e:	bf00      	nop
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	4603      	mov	r3, r0
 800443e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff31 	bl	80042ac <__NVIC_EnableIRQ>
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff ffa2 	bl	80043a4 <SysTick_Config>
 8004460:	4603      	mov	r3, r0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004478:	f7ff fb50 	bl	8003b1c <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e099      	b.n	80045bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044a8:	e00f      	b.n	80044ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044aa:	f7ff fb37 	bl	8003b1c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b05      	cmp	r3, #5
 80044b6:	d908      	bls.n	80044ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2203      	movs	r2, #3
 80044c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e078      	b.n	80045bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e8      	bne.n	80044aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4b38      	ldr	r3, [pc, #224]	; (80045c4 <HAL_DMA_Init+0x158>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800450e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	2b04      	cmp	r3, #4
 8004522:	d107      	bne.n	8004534 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	4313      	orrs	r3, r2
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0307 	bic.w	r3, r3, #7
 800454a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	2b04      	cmp	r3, #4
 800455c:	d117      	bne.n	800458e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00e      	beq.n	800458e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fa91 	bl	8004a98 <DMA_CheckFifoParam>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2240      	movs	r2, #64	; 0x40
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800458a:	2301      	movs	r3, #1
 800458c:	e016      	b.n	80045bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa48 	bl	8004a2c <DMA_CalcBaseAndBitshift>
 800459c:	4603      	mov	r3, r0
 800459e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a4:	223f      	movs	r2, #63	; 0x3f
 80045a6:	409a      	lsls	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	f010803f 	.word	0xf010803f

080045c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_DMA_Start_IT+0x26>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e040      	b.n	8004670 <HAL_DMA_Start_IT+0xa8>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d12f      	bne.n	8004662 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2202      	movs	r2, #2
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f9da 	bl	80049d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	223f      	movs	r2, #63	; 0x3f
 8004622:	409a      	lsls	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0216 	orr.w	r2, r2, #22
 8004636:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0208 	orr.w	r2, r2, #8
 800464e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e005      	b.n	800466e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800466a:	2302      	movs	r3, #2
 800466c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800466e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d004      	beq.n	8004696 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2280      	movs	r2, #128	; 0x80
 8004690:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e00c      	b.n	80046b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2205      	movs	r2, #5
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046c8:	4b92      	ldr	r3, [pc, #584]	; (8004914 <HAL_DMA_IRQHandler+0x258>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a92      	ldr	r2, [pc, #584]	; (8004918 <HAL_DMA_IRQHandler+0x25c>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	0a9b      	lsrs	r3, r3, #10
 80046d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e6:	2208      	movs	r2, #8
 80046e8:	409a      	lsls	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01a      	beq.n	8004728 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0204 	bic.w	r2, r2, #4
 800470e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	2208      	movs	r2, #8
 8004716:	409a      	lsls	r2, r3
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	f043 0201 	orr.w	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	2201      	movs	r2, #1
 800472e:	409a      	lsls	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4013      	ands	r3, r2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d012      	beq.n	800475e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474a:	2201      	movs	r2, #1
 800474c:	409a      	lsls	r2, r3
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	f043 0202 	orr.w	r2, r3, #2
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004762:	2204      	movs	r2, #4
 8004764:	409a      	lsls	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d012      	beq.n	8004794 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004780:	2204      	movs	r2, #4
 8004782:	409a      	lsls	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	f043 0204 	orr.w	r2, r3, #4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004798:	2210      	movs	r2, #16
 800479a:	409a      	lsls	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d043      	beq.n	800482c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d03c      	beq.n	800482c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b6:	2210      	movs	r2, #16
 80047b8:	409a      	lsls	r2, r3
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d018      	beq.n	80047fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d108      	bne.n	80047ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d024      	beq.n	800482c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
 80047ea:	e01f      	b.n	800482c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01b      	beq.n	800482c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
 80047fc:	e016      	b.n	800482c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d107      	bne.n	800481c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0208 	bic.w	r2, r2, #8
 800481a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	2220      	movs	r2, #32
 8004832:	409a      	lsls	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 808e 	beq.w	800495a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8086 	beq.w	800495a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004852:	2220      	movs	r2, #32
 8004854:	409a      	lsls	r2, r3
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b05      	cmp	r3, #5
 8004864:	d136      	bne.n	80048d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0216 	bic.w	r2, r2, #22
 8004874:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004884:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <HAL_DMA_IRQHandler+0x1da>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0208 	bic.w	r2, r2, #8
 80048a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048aa:	223f      	movs	r2, #63	; 0x3f
 80048ac:	409a      	lsls	r2, r3
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d07d      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	4798      	blx	r3
        }
        return;
 80048d2:	e078      	b.n	80049c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01c      	beq.n	800491c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d108      	bne.n	8004902 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d030      	beq.n	800495a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
 8004900:	e02b      	b.n	800495a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d027      	beq.n	800495a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	4798      	blx	r3
 8004912:	e022      	b.n	800495a <HAL_DMA_IRQHandler+0x29e>
 8004914:	20000008 	.word	0x20000008
 8004918:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10f      	bne.n	800494a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0210 	bic.w	r2, r2, #16
 8004938:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	2b00      	cmp	r3, #0
 8004960:	d032      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d022      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2205      	movs	r2, #5
 8004972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	3301      	adds	r3, #1
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	429a      	cmp	r2, r3
 8004990:	d307      	bcc.n	80049a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f2      	bne.n	8004986 <HAL_DMA_IRQHandler+0x2ca>
 80049a0:	e000      	b.n	80049a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80049a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
 80049c4:	e000      	b.n	80049c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80049c6:	bf00      	nop
    }
  }
}
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop

080049d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d108      	bne.n	8004a10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a0e:	e007      	b.n	8004a20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	60da      	str	r2, [r3, #12]
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	3b10      	subs	r3, #16
 8004a3c:	4a14      	ldr	r2, [pc, #80]	; (8004a90 <DMA_CalcBaseAndBitshift+0x64>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	091b      	lsrs	r3, r3, #4
 8004a44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a46:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <DMA_CalcBaseAndBitshift+0x68>)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d909      	bls.n	8004a6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a62:	f023 0303 	bic.w	r3, r3, #3
 8004a66:	1d1a      	adds	r2, r3, #4
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	659a      	str	r2, [r3, #88]	; 0x58
 8004a6c:	e007      	b.n	8004a7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	aaaaaaab 	.word	0xaaaaaaab
 8004a94:	0800c680 	.word	0x0800c680

08004a98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d11f      	bne.n	8004af2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d855      	bhi.n	8004b64 <DMA_CheckFifoParam+0xcc>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <DMA_CheckFifoParam+0x28>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004ae3 	.word	0x08004ae3
 8004ac8:	08004ad1 	.word	0x08004ad1
 8004acc:	08004b65 	.word	0x08004b65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d045      	beq.n	8004b68 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae0:	e042      	b.n	8004b68 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aea:	d13f      	bne.n	8004b6c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af0:	e03c      	b.n	8004b6c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afa:	d121      	bne.n	8004b40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d836      	bhi.n	8004b70 <DMA_CheckFifoParam+0xd8>
 8004b02:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <DMA_CheckFifoParam+0x70>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b19 	.word	0x08004b19
 8004b0c:	08004b1f 	.word	0x08004b1f
 8004b10:	08004b19 	.word	0x08004b19
 8004b14:	08004b31 	.word	0x08004b31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1c:	e02f      	b.n	8004b7e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d024      	beq.n	8004b74 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b2e:	e021      	b.n	8004b74 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b38:	d11e      	bne.n	8004b78 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b3e:	e01b      	b.n	8004b78 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d902      	bls.n	8004b4c <DMA_CheckFifoParam+0xb4>
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d003      	beq.n	8004b52 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b4a:	e018      	b.n	8004b7e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b50:	e015      	b.n	8004b7e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00e      	beq.n	8004b7c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
      break;
 8004b62:	e00b      	b.n	8004b7c <DMA_CheckFifoParam+0xe4>
      break;
 8004b64:	bf00      	nop
 8004b66:	e00a      	b.n	8004b7e <DMA_CheckFifoParam+0xe6>
      break;
 8004b68:	bf00      	nop
 8004b6a:	e008      	b.n	8004b7e <DMA_CheckFifoParam+0xe6>
      break;
 8004b6c:	bf00      	nop
 8004b6e:	e006      	b.n	8004b7e <DMA_CheckFifoParam+0xe6>
      break;
 8004b70:	bf00      	nop
 8004b72:	e004      	b.n	8004b7e <DMA_CheckFifoParam+0xe6>
      break;
 8004b74:	bf00      	nop
 8004b76:	e002      	b.n	8004b7e <DMA_CheckFifoParam+0xe6>
      break;   
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <DMA_CheckFifoParam+0xe6>
      break;
 8004b7c:	bf00      	nop
    }
  } 
  
  return status; 
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	; 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	e16b      	b.n	8004e80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ba8:	2201      	movs	r2, #1
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	f040 815a 	bne.w	8004e7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d00b      	beq.n	8004be6 <HAL_GPIO_Init+0x5a>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d007      	beq.n	8004be6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bda:	2b11      	cmp	r3, #17
 8004bdc:	d003      	beq.n	8004be6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b12      	cmp	r3, #18
 8004be4:	d130      	bne.n	8004c48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 0201 	and.w	r2, r3, #1
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	2203      	movs	r2, #3
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d003      	beq.n	8004c88 <HAL_GPIO_Init+0xfc>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b12      	cmp	r3, #18
 8004c86:	d123      	bne.n	8004cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	08da      	lsrs	r2, r3, #3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3208      	adds	r2, #8
 8004c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	220f      	movs	r2, #15
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	08da      	lsrs	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3208      	adds	r2, #8
 8004cca:	69b9      	ldr	r1, [r7, #24]
 8004ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	2203      	movs	r2, #3
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 0203 	and.w	r2, r3, #3
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80b4 	beq.w	8004e7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	4b5f      	ldr	r3, [pc, #380]	; (8004e94 <HAL_GPIO_Init+0x308>)
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	4a5e      	ldr	r2, [pc, #376]	; (8004e94 <HAL_GPIO_Init+0x308>)
 8004d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d20:	6453      	str	r3, [r2, #68]	; 0x44
 8004d22:	4b5c      	ldr	r3, [pc, #368]	; (8004e94 <HAL_GPIO_Init+0x308>)
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d2e:	4a5a      	ldr	r2, [pc, #360]	; (8004e98 <HAL_GPIO_Init+0x30c>)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	089b      	lsrs	r3, r3, #2
 8004d34:	3302      	adds	r3, #2
 8004d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	220f      	movs	r2, #15
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a51      	ldr	r2, [pc, #324]	; (8004e9c <HAL_GPIO_Init+0x310>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d02b      	beq.n	8004db2 <HAL_GPIO_Init+0x226>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a50      	ldr	r2, [pc, #320]	; (8004ea0 <HAL_GPIO_Init+0x314>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d025      	beq.n	8004dae <HAL_GPIO_Init+0x222>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a4f      	ldr	r2, [pc, #316]	; (8004ea4 <HAL_GPIO_Init+0x318>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d01f      	beq.n	8004daa <HAL_GPIO_Init+0x21e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a4e      	ldr	r2, [pc, #312]	; (8004ea8 <HAL_GPIO_Init+0x31c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d019      	beq.n	8004da6 <HAL_GPIO_Init+0x21a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a4d      	ldr	r2, [pc, #308]	; (8004eac <HAL_GPIO_Init+0x320>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_GPIO_Init+0x216>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a4c      	ldr	r2, [pc, #304]	; (8004eb0 <HAL_GPIO_Init+0x324>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00d      	beq.n	8004d9e <HAL_GPIO_Init+0x212>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a4b      	ldr	r2, [pc, #300]	; (8004eb4 <HAL_GPIO_Init+0x328>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <HAL_GPIO_Init+0x20e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a4a      	ldr	r2, [pc, #296]	; (8004eb8 <HAL_GPIO_Init+0x32c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <HAL_GPIO_Init+0x20a>
 8004d92:	2307      	movs	r3, #7
 8004d94:	e00e      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004d96:	2308      	movs	r3, #8
 8004d98:	e00c      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004d9a:	2306      	movs	r3, #6
 8004d9c:	e00a      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004d9e:	2305      	movs	r3, #5
 8004da0:	e008      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004da2:	2304      	movs	r3, #4
 8004da4:	e006      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004da6:	2303      	movs	r3, #3
 8004da8:	e004      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e002      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004db2:	2300      	movs	r3, #0
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	f002 0203 	and.w	r2, r2, #3
 8004dba:	0092      	lsls	r2, r2, #2
 8004dbc:	4093      	lsls	r3, r2
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dc4:	4934      	ldr	r1, [pc, #208]	; (8004e98 <HAL_GPIO_Init+0x30c>)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	089b      	lsrs	r3, r3, #2
 8004dca:	3302      	adds	r3, #2
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dd2:	4b3a      	ldr	r3, [pc, #232]	; (8004ebc <HAL_GPIO_Init+0x330>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4013      	ands	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004df6:	4a31      	ldr	r2, [pc, #196]	; (8004ebc <HAL_GPIO_Init+0x330>)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004dfc:	4b2f      	ldr	r3, [pc, #188]	; (8004ebc <HAL_GPIO_Init+0x330>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e20:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <HAL_GPIO_Init+0x330>)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e26:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <HAL_GPIO_Init+0x330>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <HAL_GPIO_Init+0x330>)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e50:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <HAL_GPIO_Init+0x330>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e74:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <HAL_GPIO_Init+0x330>)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b0f      	cmp	r3, #15
 8004e84:	f67f ae90 	bls.w	8004ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e88:	bf00      	nop
 8004e8a:	3724      	adds	r7, #36	; 0x24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40023800 	.word	0x40023800
 8004e98:	40013800 	.word	0x40013800
 8004e9c:	40020000 	.word	0x40020000
 8004ea0:	40020400 	.word	0x40020400
 8004ea4:	40020800 	.word	0x40020800
 8004ea8:	40020c00 	.word	0x40020c00
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	40021400 	.word	0x40021400
 8004eb4:	40021800 	.word	0x40021800
 8004eb8:	40021c00 	.word	0x40021c00
 8004ebc:	40013c00 	.word	0x40013c00

08004ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e11f      	b.n	8005112 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fe f9ee 	bl	80032c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2224      	movs	r2, #36	; 0x24
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f24:	f001 fbb8 	bl	8006698 <HAL_RCC_GetPCLK1Freq>
 8004f28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	4a7b      	ldr	r2, [pc, #492]	; (800511c <HAL_I2C_Init+0x25c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d807      	bhi.n	8004f44 <HAL_I2C_Init+0x84>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4a7a      	ldr	r2, [pc, #488]	; (8005120 <HAL_I2C_Init+0x260>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	bf94      	ite	ls
 8004f3c:	2301      	movls	r3, #1
 8004f3e:	2300      	movhi	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	e006      	b.n	8004f52 <HAL_I2C_Init+0x92>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a77      	ldr	r2, [pc, #476]	; (8005124 <HAL_I2C_Init+0x264>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	bf94      	ite	ls
 8004f4c:	2301      	movls	r3, #1
 8004f4e:	2300      	movhi	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e0db      	b.n	8005112 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4a72      	ldr	r2, [pc, #456]	; (8005128 <HAL_I2C_Init+0x268>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	0c9b      	lsrs	r3, r3, #18
 8004f64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4a64      	ldr	r2, [pc, #400]	; (800511c <HAL_I2C_Init+0x25c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d802      	bhi.n	8004f94 <HAL_I2C_Init+0xd4>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	3301      	adds	r3, #1
 8004f92:	e009      	b.n	8004fa8 <HAL_I2C_Init+0xe8>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	4a63      	ldr	r2, [pc, #396]	; (800512c <HAL_I2C_Init+0x26c>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	099b      	lsrs	r3, r3, #6
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004fba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4956      	ldr	r1, [pc, #344]	; (800511c <HAL_I2C_Init+0x25c>)
 8004fc4:	428b      	cmp	r3, r1
 8004fc6:	d80d      	bhi.n	8004fe4 <HAL_I2C_Init+0x124>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1e59      	subs	r1, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	bf38      	it	cc
 8004fe0:	2304      	movcc	r3, #4
 8004fe2:	e04f      	b.n	8005084 <HAL_I2C_Init+0x1c4>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d111      	bne.n	8005010 <HAL_I2C_Init+0x150>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1e58      	subs	r0, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	440b      	add	r3, r1
 8004ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ffe:	3301      	adds	r3, #1
 8005000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005004:	2b00      	cmp	r3, #0
 8005006:	bf0c      	ite	eq
 8005008:	2301      	moveq	r3, #1
 800500a:	2300      	movne	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	e012      	b.n	8005036 <HAL_I2C_Init+0x176>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1e58      	subs	r0, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6859      	ldr	r1, [r3, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	0099      	lsls	r1, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	fbb0 f3f3 	udiv	r3, r0, r3
 8005026:	3301      	adds	r3, #1
 8005028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502c:	2b00      	cmp	r3, #0
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_I2C_Init+0x17e>
 800503a:	2301      	movs	r3, #1
 800503c:	e022      	b.n	8005084 <HAL_I2C_Init+0x1c4>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10e      	bne.n	8005064 <HAL_I2C_Init+0x1a4>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1e58      	subs	r0, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	440b      	add	r3, r1
 8005054:	fbb0 f3f3 	udiv	r3, r0, r3
 8005058:	3301      	adds	r3, #1
 800505a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800505e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005062:	e00f      	b.n	8005084 <HAL_I2C_Init+0x1c4>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1e58      	subs	r0, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6859      	ldr	r1, [r3, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	0099      	lsls	r1, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	fbb0 f3f3 	udiv	r3, r0, r3
 800507a:	3301      	adds	r3, #1
 800507c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	6809      	ldr	r1, [r1, #0]
 8005088:	4313      	orrs	r3, r2
 800508a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69da      	ldr	r2, [r3, #28]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6911      	ldr	r1, [r2, #16]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68d2      	ldr	r2, [r2, #12]
 80050be:	4311      	orrs	r1, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	430b      	orrs	r3, r1
 80050c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	000186a0 	.word	0x000186a0
 8005120:	001e847f 	.word	0x001e847f
 8005124:	003d08ff 	.word	0x003d08ff
 8005128:	431bde83 	.word	0x431bde83
 800512c:	10624dd3 	.word	0x10624dd3

08005130 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	4608      	mov	r0, r1
 800513a:	4611      	mov	r1, r2
 800513c:	461a      	mov	r2, r3
 800513e:	4603      	mov	r3, r0
 8005140:	817b      	strh	r3, [r7, #10]
 8005142:	460b      	mov	r3, r1
 8005144:	813b      	strh	r3, [r7, #8]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800514a:	f7fe fce7 	bl	8003b1c <HAL_GetTick>
 800514e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b20      	cmp	r3, #32
 800515a:	f040 80d9 	bne.w	8005310 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	2319      	movs	r3, #25
 8005164:	2201      	movs	r2, #1
 8005166:	496d      	ldr	r1, [pc, #436]	; (800531c <HAL_I2C_Mem_Write+0x1ec>)
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 fc7f 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005174:	2302      	movs	r3, #2
 8005176:	e0cc      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_I2C_Mem_Write+0x56>
 8005182:	2302      	movs	r3, #2
 8005184:	e0c5      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b01      	cmp	r3, #1
 800519a:	d007      	beq.n	80051ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2221      	movs	r2, #33	; 0x21
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2240      	movs	r2, #64	; 0x40
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a4d      	ldr	r2, [pc, #308]	; (8005320 <HAL_I2C_Mem_Write+0x1f0>)
 80051ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051ee:	88f8      	ldrh	r0, [r7, #6]
 80051f0:	893a      	ldrh	r2, [r7, #8]
 80051f2:	8979      	ldrh	r1, [r7, #10]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	4603      	mov	r3, r0
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 fab6 	bl	8005770 <I2C_RequestMemoryWrite>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d052      	beq.n	80052b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e081      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fd00 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	2b04      	cmp	r3, #4
 8005224:	d107      	bne.n	8005236 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e06b      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	781a      	ldrb	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b04      	cmp	r3, #4
 8005276:	d11b      	bne.n	80052b0 <HAL_I2C_Mem_Write+0x180>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527c:	2b00      	cmp	r3, #0
 800527e:	d017      	beq.n	80052b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1aa      	bne.n	800520e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fcec 	bl	8005c9a <I2C_WaitOnBTFFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00d      	beq.n	80052e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d107      	bne.n	80052e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e016      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	e000      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005310:	2302      	movs	r3, #2
  }
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	00100002 	.word	0x00100002
 8005320:	ffff0000 	.word	0xffff0000

08005324 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08c      	sub	sp, #48	; 0x30
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4603      	mov	r3, r0
 8005334:	817b      	strh	r3, [r7, #10]
 8005336:	460b      	mov	r3, r1
 8005338:	813b      	strh	r3, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800533e:	f7fe fbed 	bl	8003b1c <HAL_GetTick>
 8005342:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b20      	cmp	r3, #32
 800534e:	f040 8208 	bne.w	8005762 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	2319      	movs	r3, #25
 8005358:	2201      	movs	r2, #1
 800535a:	497b      	ldr	r1, [pc, #492]	; (8005548 <HAL_I2C_Mem_Read+0x224>)
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fb85 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
 800536a:	e1fb      	b.n	8005764 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_I2C_Mem_Read+0x56>
 8005376:	2302      	movs	r3, #2
 8005378:	e1f4      	b.n	8005764 <HAL_I2C_Mem_Read+0x440>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d007      	beq.n	80053a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2222      	movs	r2, #34	; 0x22
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2240      	movs	r2, #64	; 0x40
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80053d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a5b      	ldr	r2, [pc, #364]	; (800554c <HAL_I2C_Mem_Read+0x228>)
 80053e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053e2:	88f8      	ldrh	r0, [r7, #6]
 80053e4:	893a      	ldrh	r2, [r7, #8]
 80053e6:	8979      	ldrh	r1, [r7, #10]
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	4603      	mov	r3, r0
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 fa52 	bl	800589c <I2C_RequestMemoryRead>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e1b0      	b.n	8005764 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d113      	bne.n	8005432 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540a:	2300      	movs	r3, #0
 800540c:	623b      	str	r3, [r7, #32]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	623b      	str	r3, [r7, #32]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	623b      	str	r3, [r7, #32]
 800541e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e184      	b.n	800573c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005436:	2b01      	cmp	r3, #1
 8005438:	d11b      	bne.n	8005472 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	61fb      	str	r3, [r7, #28]
 800545e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e164      	b.n	800573c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005476:	2b02      	cmp	r3, #2
 8005478:	d11b      	bne.n	80054b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005488:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549a:	2300      	movs	r3, #0
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	e144      	b.n	800573c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80054c8:	e138      	b.n	800573c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	f200 80f1 	bhi.w	80056b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d123      	bne.n	8005524 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 fc1b 	bl	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e139      	b.n	8005764 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005522:	e10b      	b.n	800573c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005528:	2b02      	cmp	r3, #2
 800552a:	d14e      	bne.n	80055ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	2200      	movs	r2, #0
 8005534:	4906      	ldr	r1, [pc, #24]	; (8005550 <HAL_I2C_Mem_Read+0x22c>)
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fa98 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d008      	beq.n	8005554 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e10e      	b.n	8005764 <HAL_I2C_Mem_Read+0x440>
 8005546:	bf00      	nop
 8005548:	00100002 	.word	0x00100002
 800554c:	ffff0000 	.word	0xffff0000
 8005550:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055c8:	e0b8      	b.n	800573c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	2200      	movs	r2, #0
 80055d2:	4966      	ldr	r1, [pc, #408]	; (800576c <HAL_I2C_Mem_Read+0x448>)
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 fa49 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0bf      	b.n	8005764 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	2200      	movs	r2, #0
 800562e:	494f      	ldr	r1, [pc, #316]	; (800576c <HAL_I2C_Mem_Read+0x448>)
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fa1b 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e091      	b.n	8005764 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056b4:	e042      	b.n	800573c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fb2e 	bl	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e04c      	b.n	8005764 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b04      	cmp	r3, #4
 8005708:	d118      	bne.n	800573c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	2b00      	cmp	r3, #0
 8005742:	f47f aec2 	bne.w	80054ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3728      	adds	r7, #40	; 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	00010004 	.word	0x00010004

08005770 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	817b      	strh	r3, [r7, #10]
 8005782:	460b      	mov	r3, r1
 8005784:	813b      	strh	r3, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f960 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c0:	d103      	bne.n	80057ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e05f      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057ce:	897b      	ldrh	r3, [r7, #10]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	461a      	mov	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	492d      	ldr	r1, [pc, #180]	; (8005898 <I2C_RequestMemoryWrite+0x128>)
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f998 	bl	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e04c      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800580a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580c:	6a39      	ldr	r1, [r7, #32]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fa02 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00d      	beq.n	8005836 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	2b04      	cmp	r3, #4
 8005820:	d107      	bne.n	8005832 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e02b      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d105      	bne.n	8005848 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800583c:	893b      	ldrh	r3, [r7, #8]
 800583e:	b2da      	uxtb	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	611a      	str	r2, [r3, #16]
 8005846:	e021      	b.n	800588c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005848:	893b      	ldrh	r3, [r7, #8]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	b29b      	uxth	r3, r3
 800584e:	b2da      	uxtb	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005858:	6a39      	ldr	r1, [r7, #32]
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f9dc 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00d      	beq.n	8005882 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	2b04      	cmp	r3, #4
 800586c:	d107      	bne.n	800587e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e005      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005882:	893b      	ldrh	r3, [r7, #8]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	00010002 	.word	0x00010002

0800589c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	4608      	mov	r0, r1
 80058a6:	4611      	mov	r1, r2
 80058a8:	461a      	mov	r2, r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	817b      	strh	r3, [r7, #10]
 80058ae:	460b      	mov	r3, r1
 80058b0:	813b      	strh	r3, [r7, #8]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2200      	movs	r2, #0
 80058de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f8c2 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fc:	d103      	bne.n	8005906 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e0aa      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800590a:	897b      	ldrh	r3, [r7, #10]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	6a3a      	ldr	r2, [r7, #32]
 800591e:	4952      	ldr	r1, [pc, #328]	; (8005a68 <I2C_RequestMemoryRead+0x1cc>)
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f8fa 	bl	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e097      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005948:	6a39      	ldr	r1, [r7, #32]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f964 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00d      	beq.n	8005972 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	2b04      	cmp	r3, #4
 800595c:	d107      	bne.n	800596e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e076      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d105      	bne.n	8005984 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005978:	893b      	ldrh	r3, [r7, #8]
 800597a:	b2da      	uxtb	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	611a      	str	r2, [r3, #16]
 8005982:	e021      	b.n	80059c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005984:	893b      	ldrh	r3, [r7, #8]
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	b29b      	uxth	r3, r3
 800598a:	b2da      	uxtb	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005994:	6a39      	ldr	r1, [r7, #32]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f93e 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d107      	bne.n	80059ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e050      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059be:	893b      	ldrh	r3, [r7, #8]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ca:	6a39      	ldr	r1, [r7, #32]
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f923 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00d      	beq.n	80059f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d107      	bne.n	80059f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e035      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f82b 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2a:	d103      	bne.n	8005a34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e013      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a38:	897b      	ldrh	r3, [r7, #10]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	6a3a      	ldr	r2, [r7, #32]
 8005a4c:	4906      	ldr	r1, [pc, #24]	; (8005a68 <I2C_RequestMemoryRead+0x1cc>)
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f863 	bl	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	00010002 	.word	0x00010002

08005a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a7c:	e025      	b.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a84:	d021      	beq.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a86:	f7fe f849 	bl	8003b1c <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d302      	bcc.n	8005a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d116      	bne.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e023      	b.n	8005b12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10d      	bne.n	8005af0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	43da      	mvns	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bf0c      	ite	eq
 8005ae6:	2301      	moveq	r3, #1
 8005ae8:	2300      	movne	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	e00c      	b.n	8005b0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	43da      	mvns	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4013      	ands	r3, r2
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf0c      	ite	eq
 8005b02:	2301      	moveq	r3, #1
 8005b04:	2300      	movne	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d0b6      	beq.n	8005a7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b28:	e051      	b.n	8005bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b38:	d123      	bne.n	8005b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f043 0204 	orr.w	r2, r3, #4
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e046      	b.n	8005c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d021      	beq.n	8005bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8a:	f7fd ffc7 	bl	8003b1c <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d302      	bcc.n	8005ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d116      	bne.n	8005bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f043 0220 	orr.w	r2, r3, #32
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e020      	b.n	8005c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d10c      	bne.n	8005bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	43da      	mvns	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4013      	ands	r3, r2
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bf14      	ite	ne
 8005bea:	2301      	movne	r3, #1
 8005bec:	2300      	moveq	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	e00b      	b.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	43da      	mvns	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf14      	ite	ne
 8005c04:	2301      	movne	r3, #1
 8005c06:	2300      	moveq	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d18d      	bne.n	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c24:	e02d      	b.n	8005c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 f8ce 	bl	8005dc8 <I2C_IsAcknowledgeFailed>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e02d      	b.n	8005c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d021      	beq.n	8005c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3e:	f7fd ff6d 	bl	8003b1c <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d302      	bcc.n	8005c54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d116      	bne.n	8005c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f043 0220 	orr.w	r2, r3, #32
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e007      	b.n	8005c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	2b80      	cmp	r3, #128	; 0x80
 8005c8e:	d1ca      	bne.n	8005c26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ca6:	e02d      	b.n	8005d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f88d 	bl	8005dc8 <I2C_IsAcknowledgeFailed>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e02d      	b.n	8005d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbe:	d021      	beq.n	8005d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc0:	f7fd ff2c 	bl	8003b1c <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d302      	bcc.n	8005cd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d116      	bne.n	8005d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	f043 0220 	orr.w	r2, r3, #32
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e007      	b.n	8005d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d1ca      	bne.n	8005ca8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d28:	e042      	b.n	8005db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d119      	bne.n	8005d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0210 	mvn.w	r2, #16
 8005d40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e029      	b.n	8005dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6c:	f7fd fed6 	bl	8003b1c <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d302      	bcc.n	8005d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d116      	bne.n	8005db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e007      	b.n	8005dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d1b5      	bne.n	8005d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	d11b      	bne.n	8005e18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005de8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	f043 0204 	orr.w	r2, r3, #4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e25b      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d075      	beq.n	8005f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e46:	4ba3      	ldr	r3, [pc, #652]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d00c      	beq.n	8005e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e52:	4ba0      	ldr	r3, [pc, #640]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d112      	bne.n	8005e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5e:	4b9d      	ldr	r3, [pc, #628]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e6a:	d10b      	bne.n	8005e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	4b99      	ldr	r3, [pc, #612]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d05b      	beq.n	8005f30 <HAL_RCC_OscConfig+0x108>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d157      	bne.n	8005f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e236      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8c:	d106      	bne.n	8005e9c <HAL_RCC_OscConfig+0x74>
 8005e8e:	4b91      	ldr	r3, [pc, #580]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a90      	ldr	r2, [pc, #576]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e01d      	b.n	8005ed8 <HAL_RCC_OscConfig+0xb0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x98>
 8005ea6:	4b8b      	ldr	r3, [pc, #556]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a8a      	ldr	r2, [pc, #552]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b88      	ldr	r3, [pc, #544]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a87      	ldr	r2, [pc, #540]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCC_OscConfig+0xb0>
 8005ec0:	4b84      	ldr	r3, [pc, #528]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a83      	ldr	r2, [pc, #524]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4b81      	ldr	r3, [pc, #516]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a80      	ldr	r2, [pc, #512]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d013      	beq.n	8005f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee0:	f7fd fe1c 	bl	8003b1c <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ee8:	f7fd fe18 	bl	8003b1c <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	; 0x64
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e1fb      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efa:	4b76      	ldr	r3, [pc, #472]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0xc0>
 8005f06:	e014      	b.n	8005f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f08:	f7fd fe08 	bl	8003b1c <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f10:	f7fd fe04 	bl	8003b1c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	; 0x64
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e1e7      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f22:	4b6c      	ldr	r3, [pc, #432]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0xe8>
 8005f2e:	e000      	b.n	8005f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d063      	beq.n	8006006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f3e:	4b65      	ldr	r3, [pc, #404]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00b      	beq.n	8005f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f4a:	4b62      	ldr	r3, [pc, #392]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d11c      	bne.n	8005f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f56:	4b5f      	ldr	r3, [pc, #380]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d116      	bne.n	8005f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f62:	4b5c      	ldr	r3, [pc, #368]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_RCC_OscConfig+0x152>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d001      	beq.n	8005f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e1bb      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7a:	4b56      	ldr	r3, [pc, #344]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4952      	ldr	r1, [pc, #328]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f8e:	e03a      	b.n	8006006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d020      	beq.n	8005fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f98:	4b4f      	ldr	r3, [pc, #316]	; (80060d8 <HAL_RCC_OscConfig+0x2b0>)
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9e:	f7fd fdbd 	bl	8003b1c <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa6:	f7fd fdb9 	bl	8003b1c <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e19c      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb8:	4b46      	ldr	r3, [pc, #280]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc4:	4b43      	ldr	r3, [pc, #268]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	4940      	ldr	r1, [pc, #256]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	600b      	str	r3, [r1, #0]
 8005fd8:	e015      	b.n	8006006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fda:	4b3f      	ldr	r3, [pc, #252]	; (80060d8 <HAL_RCC_OscConfig+0x2b0>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fd fd9c 	bl	8003b1c <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fe8:	f7fd fd98 	bl	8003b1c <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e17b      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ffa:	4b36      	ldr	r3, [pc, #216]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d030      	beq.n	8006074 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d016      	beq.n	8006048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800601a:	4b30      	ldr	r3, [pc, #192]	; (80060dc <HAL_RCC_OscConfig+0x2b4>)
 800601c:	2201      	movs	r2, #1
 800601e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006020:	f7fd fd7c 	bl	8003b1c <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006028:	f7fd fd78 	bl	8003b1c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e15b      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800603a:	4b26      	ldr	r3, [pc, #152]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 800603c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0x200>
 8006046:	e015      	b.n	8006074 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006048:	4b24      	ldr	r3, [pc, #144]	; (80060dc <HAL_RCC_OscConfig+0x2b4>)
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800604e:	f7fd fd65 	bl	8003b1c <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006054:	e008      	b.n	8006068 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006056:	f7fd fd61 	bl	8003b1c <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e144      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006068:	4b1a      	ldr	r3, [pc, #104]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 800606a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1f0      	bne.n	8006056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80a0 	beq.w	80061c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006082:	2300      	movs	r3, #0
 8006084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006086:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10f      	bne.n	80060b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	4b0f      	ldr	r3, [pc, #60]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	4a0e      	ldr	r2, [pc, #56]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 800609c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a0:	6413      	str	r3, [r2, #64]	; 0x40
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ae:	2301      	movs	r3, #1
 80060b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b2:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <HAL_RCC_OscConfig+0x2b8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d121      	bne.n	8006102 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060be:	4b08      	ldr	r3, [pc, #32]	; (80060e0 <HAL_RCC_OscConfig+0x2b8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a07      	ldr	r2, [pc, #28]	; (80060e0 <HAL_RCC_OscConfig+0x2b8>)
 80060c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ca:	f7fd fd27 	bl	8003b1c <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d0:	e011      	b.n	80060f6 <HAL_RCC_OscConfig+0x2ce>
 80060d2:	bf00      	nop
 80060d4:	40023800 	.word	0x40023800
 80060d8:	42470000 	.word	0x42470000
 80060dc:	42470e80 	.word	0x42470e80
 80060e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e4:	f7fd fd1a 	bl	8003b1c <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e0fd      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f6:	4b81      	ldr	r3, [pc, #516]	; (80062fc <HAL_RCC_OscConfig+0x4d4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d106      	bne.n	8006118 <HAL_RCC_OscConfig+0x2f0>
 800610a:	4b7d      	ldr	r3, [pc, #500]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	4a7c      	ldr	r2, [pc, #496]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	6713      	str	r3, [r2, #112]	; 0x70
 8006116:	e01c      	b.n	8006152 <HAL_RCC_OscConfig+0x32a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b05      	cmp	r3, #5
 800611e:	d10c      	bne.n	800613a <HAL_RCC_OscConfig+0x312>
 8006120:	4b77      	ldr	r3, [pc, #476]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 8006122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006124:	4a76      	ldr	r2, [pc, #472]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 8006126:	f043 0304 	orr.w	r3, r3, #4
 800612a:	6713      	str	r3, [r2, #112]	; 0x70
 800612c:	4b74      	ldr	r3, [pc, #464]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 800612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006130:	4a73      	ldr	r2, [pc, #460]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	6713      	str	r3, [r2, #112]	; 0x70
 8006138:	e00b      	b.n	8006152 <HAL_RCC_OscConfig+0x32a>
 800613a:	4b71      	ldr	r3, [pc, #452]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 800613c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613e:	4a70      	ldr	r2, [pc, #448]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	6713      	str	r3, [r2, #112]	; 0x70
 8006146:	4b6e      	ldr	r3, [pc, #440]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 8006148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614a:	4a6d      	ldr	r2, [pc, #436]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 800614c:	f023 0304 	bic.w	r3, r3, #4
 8006150:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d015      	beq.n	8006186 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615a:	f7fd fcdf 	bl	8003b1c <HAL_GetTick>
 800615e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006160:	e00a      	b.n	8006178 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006162:	f7fd fcdb 	bl	8003b1c <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006170:	4293      	cmp	r3, r2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e0bc      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006178:	4b61      	ldr	r3, [pc, #388]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0ee      	beq.n	8006162 <HAL_RCC_OscConfig+0x33a>
 8006184:	e014      	b.n	80061b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006186:	f7fd fcc9 	bl	8003b1c <HAL_GetTick>
 800618a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618c:	e00a      	b.n	80061a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800618e:	f7fd fcc5 	bl	8003b1c <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	f241 3288 	movw	r2, #5000	; 0x1388
 800619c:	4293      	cmp	r3, r2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e0a6      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a4:	4b56      	ldr	r3, [pc, #344]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 80061a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1ee      	bne.n	800618e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d105      	bne.n	80061c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b6:	4b52      	ldr	r3, [pc, #328]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	4a51      	ldr	r2, [pc, #324]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 80061bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 8092 	beq.w	80062f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061cc:	4b4c      	ldr	r3, [pc, #304]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 030c 	and.w	r3, r3, #12
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d05c      	beq.n	8006292 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d141      	bne.n	8006264 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e0:	4b48      	ldr	r3, [pc, #288]	; (8006304 <HAL_RCC_OscConfig+0x4dc>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e6:	f7fd fc99 	bl	8003b1c <HAL_GetTick>
 80061ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ee:	f7fd fc95 	bl	8003b1c <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e078      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006200:	4b3f      	ldr	r3, [pc, #252]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f0      	bne.n	80061ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	019b      	lsls	r3, r3, #6
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	3b01      	subs	r3, #1
 8006226:	041b      	lsls	r3, r3, #16
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	061b      	lsls	r3, r3, #24
 8006230:	4933      	ldr	r1, [pc, #204]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 8006232:	4313      	orrs	r3, r2
 8006234:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006236:	4b33      	ldr	r3, [pc, #204]	; (8006304 <HAL_RCC_OscConfig+0x4dc>)
 8006238:	2201      	movs	r2, #1
 800623a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623c:	f7fd fc6e 	bl	8003b1c <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006244:	f7fd fc6a 	bl	8003b1c <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e04d      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006256:	4b2a      	ldr	r3, [pc, #168]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0x41c>
 8006262:	e045      	b.n	80062f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006264:	4b27      	ldr	r3, [pc, #156]	; (8006304 <HAL_RCC_OscConfig+0x4dc>)
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626a:	f7fd fc57 	bl	8003b1c <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006272:	f7fd fc53 	bl	8003b1c <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e036      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006284:	4b1e      	ldr	r3, [pc, #120]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f0      	bne.n	8006272 <HAL_RCC_OscConfig+0x44a>
 8006290:	e02e      	b.n	80062f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e029      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800629e:	4b18      	ldr	r3, [pc, #96]	; (8006300 <HAL_RCC_OscConfig+0x4d8>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d11c      	bne.n	80062ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062bc:	429a      	cmp	r2, r3
 80062be:	d115      	bne.n	80062ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062c6:	4013      	ands	r3, r2
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10d      	bne.n	80062ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062da:	429a      	cmp	r2, r3
 80062dc:	d106      	bne.n	80062ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d001      	beq.n	80062f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	40007000 	.word	0x40007000
 8006300:	40023800 	.word	0x40023800
 8006304:	42470060 	.word	0x42470060

08006308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0cc      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800631c:	4b68      	ldr	r3, [pc, #416]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d90c      	bls.n	8006344 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632a:	4b65      	ldr	r3, [pc, #404]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006332:	4b63      	ldr	r3, [pc, #396]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 030f 	and.w	r3, r3, #15
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d001      	beq.n	8006344 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e0b8      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d020      	beq.n	8006392 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800635c:	4b59      	ldr	r3, [pc, #356]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4a58      	ldr	r2, [pc, #352]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006366:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006374:	4b53      	ldr	r3, [pc, #332]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4a52      	ldr	r2, [pc, #328]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800637e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006380:	4b50      	ldr	r3, [pc, #320]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	494d      	ldr	r1, [pc, #308]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	4313      	orrs	r3, r2
 8006390:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d044      	beq.n	8006428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d107      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063a6:	4b47      	ldr	r3, [pc, #284]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d119      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e07f      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d003      	beq.n	80063c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d107      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063c6:	4b3f      	ldr	r3, [pc, #252]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e06f      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d6:	4b3b      	ldr	r3, [pc, #236]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e067      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063e6:	4b37      	ldr	r3, [pc, #220]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f023 0203 	bic.w	r2, r3, #3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	4934      	ldr	r1, [pc, #208]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063f8:	f7fd fb90 	bl	8003b1c <HAL_GetTick>
 80063fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063fe:	e00a      	b.n	8006416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006400:	f7fd fb8c 	bl	8003b1c <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	f241 3288 	movw	r2, #5000	; 0x1388
 800640e:	4293      	cmp	r3, r2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e04f      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006416:	4b2b      	ldr	r3, [pc, #172]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 020c 	and.w	r2, r3, #12
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	429a      	cmp	r2, r3
 8006426:	d1eb      	bne.n	8006400 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006428:	4b25      	ldr	r3, [pc, #148]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 030f 	and.w	r3, r3, #15
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d20c      	bcs.n	8006450 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006436:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800643e:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d001      	beq.n	8006450 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e032      	b.n	80064b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d008      	beq.n	800646e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800645c:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4916      	ldr	r1, [pc, #88]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800647a:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	490e      	ldr	r1, [pc, #56]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	4313      	orrs	r3, r2
 800648c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800648e:	f000 f821 	bl	80064d4 <HAL_RCC_GetSysClockFreq>
 8006492:	4601      	mov	r1, r0
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <HAL_RCC_ClockConfig+0x1c0>)
 80064a0:	5cd3      	ldrb	r3, [r2, r3]
 80064a2:	fa21 f303 	lsr.w	r3, r1, r3
 80064a6:	4a09      	ldr	r2, [pc, #36]	; (80064cc <HAL_RCC_ClockConfig+0x1c4>)
 80064a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064aa:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <HAL_RCC_ClockConfig+0x1c8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fd faf0 	bl	8003a94 <HAL_InitTick>

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40023c00 	.word	0x40023c00
 80064c4:	40023800 	.word	0x40023800
 80064c8:	0800c668 	.word	0x0800c668
 80064cc:	20000008 	.word	0x20000008
 80064d0:	2000000c 	.word	0x2000000c

080064d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	607b      	str	r3, [r7, #4]
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	2300      	movs	r3, #0
 80064e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ea:	4b63      	ldr	r3, [pc, #396]	; (8006678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 030c 	and.w	r3, r3, #12
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d007      	beq.n	8006506 <HAL_RCC_GetSysClockFreq+0x32>
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d008      	beq.n	800650c <HAL_RCC_GetSysClockFreq+0x38>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 80b4 	bne.w	8006668 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006500:	4b5e      	ldr	r3, [pc, #376]	; (800667c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006502:	60bb      	str	r3, [r7, #8]
       break;
 8006504:	e0b3      	b.n	800666e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006506:	4b5d      	ldr	r3, [pc, #372]	; (800667c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006508:	60bb      	str	r3, [r7, #8]
      break;
 800650a:	e0b0      	b.n	800666e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800650c:	4b5a      	ldr	r3, [pc, #360]	; (8006678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006514:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006516:	4b58      	ldr	r3, [pc, #352]	; (8006678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d04a      	beq.n	80065b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006522:	4b55      	ldr	r3, [pc, #340]	; (8006678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	099b      	lsrs	r3, r3, #6
 8006528:	f04f 0400 	mov.w	r4, #0
 800652c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	ea03 0501 	and.w	r5, r3, r1
 8006538:	ea04 0602 	and.w	r6, r4, r2
 800653c:	4629      	mov	r1, r5
 800653e:	4632      	mov	r2, r6
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	f04f 0400 	mov.w	r4, #0
 8006548:	0154      	lsls	r4, r2, #5
 800654a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800654e:	014b      	lsls	r3, r1, #5
 8006550:	4619      	mov	r1, r3
 8006552:	4622      	mov	r2, r4
 8006554:	1b49      	subs	r1, r1, r5
 8006556:	eb62 0206 	sbc.w	r2, r2, r6
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	f04f 0400 	mov.w	r4, #0
 8006562:	0194      	lsls	r4, r2, #6
 8006564:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006568:	018b      	lsls	r3, r1, #6
 800656a:	1a5b      	subs	r3, r3, r1
 800656c:	eb64 0402 	sbc.w	r4, r4, r2
 8006570:	f04f 0100 	mov.w	r1, #0
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	00e2      	lsls	r2, r4, #3
 800657a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800657e:	00d9      	lsls	r1, r3, #3
 8006580:	460b      	mov	r3, r1
 8006582:	4614      	mov	r4, r2
 8006584:	195b      	adds	r3, r3, r5
 8006586:	eb44 0406 	adc.w	r4, r4, r6
 800658a:	f04f 0100 	mov.w	r1, #0
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	02a2      	lsls	r2, r4, #10
 8006594:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006598:	0299      	lsls	r1, r3, #10
 800659a:	460b      	mov	r3, r1
 800659c:	4614      	mov	r4, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	4621      	mov	r1, r4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f04f 0400 	mov.w	r4, #0
 80065a8:	461a      	mov	r2, r3
 80065aa:	4623      	mov	r3, r4
 80065ac:	f7fa fbbc 	bl	8000d28 <__aeabi_uldivmod>
 80065b0:	4603      	mov	r3, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	e049      	b.n	800664c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065b8:	4b2f      	ldr	r3, [pc, #188]	; (8006678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	099b      	lsrs	r3, r3, #6
 80065be:	f04f 0400 	mov.w	r4, #0
 80065c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	ea03 0501 	and.w	r5, r3, r1
 80065ce:	ea04 0602 	and.w	r6, r4, r2
 80065d2:	4629      	mov	r1, r5
 80065d4:	4632      	mov	r2, r6
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	f04f 0400 	mov.w	r4, #0
 80065de:	0154      	lsls	r4, r2, #5
 80065e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80065e4:	014b      	lsls	r3, r1, #5
 80065e6:	4619      	mov	r1, r3
 80065e8:	4622      	mov	r2, r4
 80065ea:	1b49      	subs	r1, r1, r5
 80065ec:	eb62 0206 	sbc.w	r2, r2, r6
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	f04f 0400 	mov.w	r4, #0
 80065f8:	0194      	lsls	r4, r2, #6
 80065fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80065fe:	018b      	lsls	r3, r1, #6
 8006600:	1a5b      	subs	r3, r3, r1
 8006602:	eb64 0402 	sbc.w	r4, r4, r2
 8006606:	f04f 0100 	mov.w	r1, #0
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	00e2      	lsls	r2, r4, #3
 8006610:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006614:	00d9      	lsls	r1, r3, #3
 8006616:	460b      	mov	r3, r1
 8006618:	4614      	mov	r4, r2
 800661a:	195b      	adds	r3, r3, r5
 800661c:	eb44 0406 	adc.w	r4, r4, r6
 8006620:	f04f 0100 	mov.w	r1, #0
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	02a2      	lsls	r2, r4, #10
 800662a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800662e:	0299      	lsls	r1, r3, #10
 8006630:	460b      	mov	r3, r1
 8006632:	4614      	mov	r4, r2
 8006634:	4618      	mov	r0, r3
 8006636:	4621      	mov	r1, r4
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f04f 0400 	mov.w	r4, #0
 800663e:	461a      	mov	r2, r3
 8006640:	4623      	mov	r3, r4
 8006642:	f7fa fb71 	bl	8000d28 <__aeabi_uldivmod>
 8006646:	4603      	mov	r3, r0
 8006648:	460c      	mov	r4, r1
 800664a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800664c:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	3301      	adds	r3, #1
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	fbb2 f3f3 	udiv	r3, r2, r3
 8006664:	60bb      	str	r3, [r7, #8]
      break;
 8006666:	e002      	b.n	800666e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006668:	4b04      	ldr	r3, [pc, #16]	; (800667c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800666a:	60bb      	str	r3, [r7, #8]
      break;
 800666c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800666e:	68bb      	ldr	r3, [r7, #8]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006678:	40023800 	.word	0x40023800
 800667c:	00f42400 	.word	0x00f42400

08006680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006684:	4b03      	ldr	r3, [pc, #12]	; (8006694 <HAL_RCC_GetHCLKFreq+0x14>)
 8006686:	681b      	ldr	r3, [r3, #0]
}
 8006688:	4618      	mov	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000008 	.word	0x20000008

08006698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800669c:	f7ff fff0 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 80066a0:	4601      	mov	r1, r0
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	0a9b      	lsrs	r3, r3, #10
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	4a03      	ldr	r2, [pc, #12]	; (80066bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ae:	5cd3      	ldrb	r3, [r2, r3]
 80066b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40023800 	.word	0x40023800
 80066bc:	0800c678 	.word	0x0800c678

080066c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066c4:	f7ff ffdc 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 80066c8:	4601      	mov	r1, r0
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	0b5b      	lsrs	r3, r3, #13
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	4a03      	ldr	r2, [pc, #12]	; (80066e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066d6:	5cd3      	ldrb	r3, [r2, r3]
 80066d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80066dc:	4618      	mov	r0, r3
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40023800 	.word	0x40023800
 80066e4:	0800c678 	.word	0x0800c678

080066e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e01d      	b.n	8006736 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fc ff62 	bl	80035d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3304      	adds	r3, #4
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f000 f8d0 	bl	80068cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e01d      	b.n	800678c <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d106      	bne.n	800676a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7fc fe4f 	bl	8003408 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3304      	adds	r3, #4
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f000 f8a5 	bl	80068cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <HAL_TIM_IC_ConfigChannel+0x1a>
 80067aa:	2302      	movs	r3, #2
 80067ac:	e08a      	b.n	80068c4 <HAL_TIM_IC_ConfigChannel+0x130>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2202      	movs	r2, #2
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d11b      	bne.n	80067fc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6819      	ldr	r1, [r3, #0]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f000 f91a 	bl	8006a0c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699a      	ldr	r2, [r3, #24]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 020c 	bic.w	r2, r2, #12
 80067e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6999      	ldr	r1, [r3, #24]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	619a      	str	r2, [r3, #24]
 80067fa:	e05a      	b.n	80068b2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d11c      	bne.n	800683c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6819      	ldr	r1, [r3, #0]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f000 f96f 	bl	8006af4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699a      	ldr	r2, [r3, #24]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006824:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6999      	ldr	r1, [r3, #24]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	021a      	lsls	r2, r3, #8
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	619a      	str	r2, [r3, #24]
 800683a:	e03a      	b.n	80068b2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b08      	cmp	r3, #8
 8006840:	d11b      	bne.n	800687a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6819      	ldr	r1, [r3, #0]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f000 f98c 	bl	8006b6e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 020c 	bic.w	r2, r2, #12
 8006864:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69d9      	ldr	r1, [r3, #28]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	61da      	str	r2, [r3, #28]
 8006878:	e01b      	b.n	80068b2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	6819      	ldr	r1, [r3, #0]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f000 f9ac 	bl	8006be6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69da      	ldr	r2, [r3, #28]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800689c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69d9      	ldr	r1, [r3, #28]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	021a      	lsls	r2, r3, #8
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a40      	ldr	r2, [pc, #256]	; (80069e0 <TIM_Base_SetConfig+0x114>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ea:	d00f      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a3d      	ldr	r2, [pc, #244]	; (80069e4 <TIM_Base_SetConfig+0x118>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a3c      	ldr	r2, [pc, #240]	; (80069e8 <TIM_Base_SetConfig+0x11c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a3b      	ldr	r2, [pc, #236]	; (80069ec <TIM_Base_SetConfig+0x120>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a3a      	ldr	r2, [pc, #232]	; (80069f0 <TIM_Base_SetConfig+0x124>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d108      	bne.n	800691e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a2f      	ldr	r2, [pc, #188]	; (80069e0 <TIM_Base_SetConfig+0x114>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d02b      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692c:	d027      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a2c      	ldr	r2, [pc, #176]	; (80069e4 <TIM_Base_SetConfig+0x118>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d023      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2b      	ldr	r2, [pc, #172]	; (80069e8 <TIM_Base_SetConfig+0x11c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01f      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2a      	ldr	r2, [pc, #168]	; (80069ec <TIM_Base_SetConfig+0x120>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01b      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a29      	ldr	r2, [pc, #164]	; (80069f0 <TIM_Base_SetConfig+0x124>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d017      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a28      	ldr	r2, [pc, #160]	; (80069f4 <TIM_Base_SetConfig+0x128>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a27      	ldr	r2, [pc, #156]	; (80069f8 <TIM_Base_SetConfig+0x12c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00f      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a26      	ldr	r2, [pc, #152]	; (80069fc <TIM_Base_SetConfig+0x130>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00b      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a25      	ldr	r2, [pc, #148]	; (8006a00 <TIM_Base_SetConfig+0x134>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d007      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a24      	ldr	r2, [pc, #144]	; (8006a04 <TIM_Base_SetConfig+0x138>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d003      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a23      	ldr	r2, [pc, #140]	; (8006a08 <TIM_Base_SetConfig+0x13c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d108      	bne.n	8006990 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a0a      	ldr	r2, [pc, #40]	; (80069e0 <TIM_Base_SetConfig+0x114>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_Base_SetConfig+0xf8>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <TIM_Base_SetConfig+0x124>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d103      	bne.n	80069cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	615a      	str	r2, [r3, #20]
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800
 8006a00:	40001800 	.word	0x40001800
 8006a04:	40001c00 	.word	0x40001c00
 8006a08:	40002000 	.word	0x40002000

08006a0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0201 	bic.w	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a28      	ldr	r2, [pc, #160]	; (8006ad8 <TIM_TI1_SetConfig+0xcc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01b      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a40:	d017      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4a25      	ldr	r2, [pc, #148]	; (8006adc <TIM_TI1_SetConfig+0xd0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d013      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4a24      	ldr	r2, [pc, #144]	; (8006ae0 <TIM_TI1_SetConfig+0xd4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00f      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4a23      	ldr	r2, [pc, #140]	; (8006ae4 <TIM_TI1_SetConfig+0xd8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00b      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4a22      	ldr	r2, [pc, #136]	; (8006ae8 <TIM_TI1_SetConfig+0xdc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d007      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4a21      	ldr	r2, [pc, #132]	; (8006aec <TIM_TI1_SetConfig+0xe0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d003      	beq.n	8006a72 <TIM_TI1_SetConfig+0x66>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4a20      	ldr	r2, [pc, #128]	; (8006af0 <TIM_TI1_SetConfig+0xe4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d101      	bne.n	8006a76 <TIM_TI1_SetConfig+0x6a>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <TIM_TI1_SetConfig+0x6c>
 8006a76:	2300      	movs	r3, #0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0303 	bic.w	r3, r3, #3
 8006a82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	e003      	b.n	8006a96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f023 030a 	bic.w	r3, r3, #10
 8006ab0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f003 030a 	and.w	r3, r3, #10
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	40010400 	.word	0x40010400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40001800 	.word	0x40001800

08006af4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	f023 0210 	bic.w	r2, r3, #16
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	031b      	lsls	r3, r3, #12
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b087      	sub	sp, #28
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
 8006b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f023 0303 	bic.w	r3, r3, #3
 8006b9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006baa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006bbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	621a      	str	r2, [r3, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b087      	sub	sp, #28
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
 8006bf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	031b      	lsls	r3, r3, #12
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006c38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	031b      	lsls	r3, r3, #12
 8006c3e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	621a      	str	r2, [r3, #32]
}
 8006c54:	bf00      	nop
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e05a      	b.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a21      	ldr	r2, [pc, #132]	; (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d022      	beq.n	8006d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc4:	d01d      	beq.n	8006d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1d      	ldr	r2, [pc, #116]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d018      	beq.n	8006d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1b      	ldr	r2, [pc, #108]	; (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1a      	ldr	r2, [pc, #104]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00e      	beq.n	8006d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d009      	beq.n	8006d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d10c      	bne.n	8006d1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40000400 	.word	0x40000400
 8006d44:	40000800 	.word	0x40000800
 8006d48:	40000c00 	.word	0x40000c00
 8006d4c:	40010400 	.word	0x40010400
 8006d50:	40014000 	.word	0x40014000
 8006d54:	40001800 	.word	0x40001800

08006d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e03f      	b.n	8006dea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fc fc4c 	bl	800361c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2224      	movs	r2, #36	; 0x24
 8006d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fc6d 	bl	800767c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695a      	ldr	r2, [r3, #20]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b088      	sub	sp, #32
 8006df6:	af02      	add	r7, sp, #8
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	603b      	str	r3, [r7, #0]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	f040 8083 	bne.w	8006f1a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <HAL_UART_Transmit+0x2e>
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e07b      	b.n	8006f1c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_UART_Transmit+0x40>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e074      	b.n	8006f1c <HAL_UART_Transmit+0x12a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2221      	movs	r2, #33	; 0x21
 8006e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006e48:	f7fc fe68 	bl	8003b1c <HAL_GetTick>
 8006e4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	88fa      	ldrh	r2, [r7, #6]
 8006e52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	88fa      	ldrh	r2, [r7, #6]
 8006e58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006e62:	e042      	b.n	8006eea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7a:	d122      	bne.n	8006ec2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2200      	movs	r2, #0
 8006e84:	2180      	movs	r1, #128	; 0x80
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 fa76 	bl	8007378 <UART_WaitOnFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e042      	b.n	8006f1c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ea8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	3302      	adds	r3, #2
 8006eb6:	60bb      	str	r3, [r7, #8]
 8006eb8:	e017      	b.n	8006eea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	60bb      	str	r3, [r7, #8]
 8006ec0:	e013      	b.n	8006eea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2180      	movs	r1, #128	; 0x80
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 fa53 	bl	8007378 <UART_WaitOnFlagUntilTimeout>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e01f      	b.n	8006f1c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	60ba      	str	r2, [r7, #8]
 8006ee2:	781a      	ldrb	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1b7      	bne.n	8006e64 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2200      	movs	r2, #0
 8006efc:	2140      	movs	r1, #64	; 0x40
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 fa3a 	bl	8007378 <UART_WaitOnFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e006      	b.n	8006f1c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e000      	b.n	8006f1c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006f1a:	2302      	movs	r3, #2
  }
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d166      	bne.n	800700c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <HAL_UART_Receive_DMA+0x26>
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e05f      	b.n	800700e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_UART_Receive_DMA+0x38>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e058      	b.n	800700e <HAL_UART_Receive_DMA+0xea>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	88fa      	ldrh	r2, [r7, #6]
 8006f6e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2222      	movs	r2, #34	; 0x22
 8006f7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	4a25      	ldr	r2, [pc, #148]	; (8007018 <HAL_UART_Receive_DMA+0xf4>)
 8006f84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	4a24      	ldr	r2, [pc, #144]	; (800701c <HAL_UART_Receive_DMA+0xf8>)
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f92:	4a23      	ldr	r2, [pc, #140]	; (8007020 <HAL_UART_Receive_DMA+0xfc>)
 8006f94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006f9e:	f107 0308 	add.w	r3, r7, #8
 8006fa2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	f7fd fb07 	bl	80045c8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fe6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695a      	ldr	r2, [r3, #20]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	695a      	ldr	r2, [r3, #20]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007006:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	e000      	b.n	800700e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800700c:	2302      	movs	r3, #2
  }
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	08007261 	.word	0x08007261
 800701c:	080072c9 	.word	0x080072c9
 8007020:	080072e5 	.word	0x080072e5

08007024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007044:	2300      	movs	r3, #0
 8007046:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f003 030f 	and.w	r3, r3, #15
 8007052:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10d      	bne.n	8007076 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <HAL_UART_IRQHandler+0x52>
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa82 	bl	8007578 <UART_Receive_IT>
      return;
 8007074:	e0d1      	b.n	800721a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80b0 	beq.w	80071de <HAL_UART_IRQHandler+0x1ba>
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d105      	bne.n	8007094 <HAL_UART_IRQHandler+0x70>
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80a5 	beq.w	80071de <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <HAL_UART_IRQHandler+0x90>
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ac:	f043 0201 	orr.w	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <HAL_UART_IRQHandler+0xb0>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070cc:	f043 0202 	orr.w	r2, r3, #2
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <HAL_UART_IRQHandler+0xd0>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ec:	f043 0204 	orr.w	r2, r3, #4
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00f      	beq.n	800711e <HAL_UART_IRQHandler+0xfa>
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	f003 0320 	and.w	r3, r3, #32
 8007104:	2b00      	cmp	r3, #0
 8007106:	d104      	bne.n	8007112 <HAL_UART_IRQHandler+0xee>
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d005      	beq.n	800711e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	f043 0208 	orr.w	r2, r3, #8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d078      	beq.n	8007218 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <HAL_UART_IRQHandler+0x11c>
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa1c 	bl	8007578 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714a:	2b40      	cmp	r3, #64	; 0x40
 800714c:	bf0c      	ite	eq
 800714e:	2301      	moveq	r3, #1
 8007150:	2300      	movne	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b00      	cmp	r3, #0
 8007160:	d102      	bne.n	8007168 <HAL_UART_IRQHandler+0x144>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d031      	beq.n	80071cc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f965 	bl	8007438 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007178:	2b40      	cmp	r3, #64	; 0x40
 800717a:	d123      	bne.n	80071c4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695a      	ldr	r2, [r3, #20]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800718a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007190:	2b00      	cmp	r3, #0
 8007192:	d013      	beq.n	80071bc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	4a21      	ldr	r2, [pc, #132]	; (8007220 <HAL_UART_IRQHandler+0x1fc>)
 800719a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fd fa69 	bl	8004678 <HAL_DMA_Abort_IT>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d016      	beq.n	80071da <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071b6:	4610      	mov	r0, r2
 80071b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ba:	e00e      	b.n	80071da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f845 	bl	800724c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c2:	e00a      	b.n	80071da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f841 	bl	800724c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ca:	e006      	b.n	80071da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f83d 	bl	800724c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80071d8:	e01e      	b.n	8007218 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071da:	bf00      	nop
    return;
 80071dc:	e01c      	b.n	8007218 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <HAL_UART_IRQHandler+0x1d6>
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f952 	bl	800749c <UART_Transmit_IT>
    return;
 80071f8:	e00f      	b.n	800721a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <HAL_UART_IRQHandler+0x1f6>
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f99a 	bl	8007548 <UART_EndTransmit_IT>
    return;
 8007214:	bf00      	nop
 8007216:	e000      	b.n	800721a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007218:	bf00      	nop
  }
}
 800721a:	3720      	adds	r7, #32
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	08007475 	.word	0x08007475

08007224 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d11e      	bne.n	80072ba <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007290:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	695a      	ldr	r2, [r3, #20]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0201 	bic.w	r2, r2, #1
 80072a0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	695a      	ldr	r2, [r3, #20]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072b0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f7fb fedc 	bl	8003078 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072c0:	bf00      	nop
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7ff ffae 	bl	8007238 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072dc:	bf00      	nop
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007300:	2b80      	cmp	r3, #128	; 0x80
 8007302:	bf0c      	ite	eq
 8007304:	2301      	moveq	r3, #1
 8007306:	2300      	movne	r3, #0
 8007308:	b2db      	uxtb	r3, r3
 800730a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b21      	cmp	r3, #33	; 0x21
 8007316:	d108      	bne.n	800732a <UART_DMAError+0x46>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2200      	movs	r2, #0
 8007322:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007324:	68b8      	ldr	r0, [r7, #8]
 8007326:	f000 f871 	bl	800740c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	bf0c      	ite	eq
 8007338:	2301      	moveq	r3, #1
 800733a:	2300      	movne	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b22      	cmp	r3, #34	; 0x22
 800734a:	d108      	bne.n	800735e <UART_DMAError+0x7a>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d005      	beq.n	800735e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2200      	movs	r2, #0
 8007356:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007358:	68b8      	ldr	r0, [r7, #8]
 800735a:	f000 f86d 	bl	8007438 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007362:	f043 0210 	orr.w	r2, r3, #16
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800736a:	68b8      	ldr	r0, [r7, #8]
 800736c:	f7ff ff6e 	bl	800724c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007370:	bf00      	nop
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	603b      	str	r3, [r7, #0]
 8007384:	4613      	mov	r3, r2
 8007386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007388:	e02c      	b.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007390:	d028      	beq.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d007      	beq.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007398:	f7fc fbc0 	bl	8003b1c <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d21d      	bcs.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	695a      	ldr	r2, [r3, #20]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0201 	bic.w	r2, r2, #1
 80073c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2220      	movs	r2, #32
 80073d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e00f      	b.n	8007404 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	4013      	ands	r3, r2
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	bf0c      	ite	eq
 80073f4:	2301      	moveq	r3, #1
 80073f6:	2300      	movne	r3, #0
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d0c3      	beq.n	800738a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007422:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800744e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695a      	ldr	r2, [r3, #20]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2220      	movs	r2, #32
 8007464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fedc 	bl	800724c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b21      	cmp	r3, #33	; 0x21
 80074ae:	d144      	bne.n	800753a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b8:	d11a      	bne.n	80074f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	461a      	mov	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d105      	bne.n	80074e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	1c9a      	adds	r2, r3, #2
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	621a      	str	r2, [r3, #32]
 80074e2:	e00e      	b.n	8007502 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	621a      	str	r2, [r3, #32]
 80074ee:	e008      	b.n	8007502 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	1c59      	adds	r1, r3, #1
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6211      	str	r1, [r2, #32]
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29b      	uxth	r3, r3
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4619      	mov	r1, r3
 8007510:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10f      	bne.n	8007536 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007524:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007534:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	e000      	b.n	800753c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800753a:	2302      	movs	r3, #2
  }
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800755e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff fe5b 	bl	8007224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b22      	cmp	r3, #34	; 0x22
 800758a:	d171      	bne.n	8007670 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007594:	d123      	bne.n	80075de <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10e      	bne.n	80075c2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ba:	1c9a      	adds	r2, r3, #2
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	629a      	str	r2, [r3, #40]	; 0x28
 80075c0:	e029      	b.n	8007616 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	629a      	str	r2, [r3, #40]	; 0x28
 80075dc:	e01b      	b.n	8007616 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10a      	bne.n	80075fc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6858      	ldr	r0, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	1c59      	adds	r1, r3, #1
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6291      	str	r1, [r2, #40]	; 0x28
 80075f6:	b2c2      	uxtb	r2, r0
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e00c      	b.n	8007616 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	b2da      	uxtb	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	1c58      	adds	r0, r3, #1
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	6288      	str	r0, [r1, #40]	; 0x28
 800760e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29b      	uxth	r3, r3
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	4619      	mov	r1, r3
 8007624:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007626:	2b00      	cmp	r3, #0
 8007628:	d120      	bne.n	800766c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0220 	bic.w	r2, r2, #32
 8007638:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	695a      	ldr	r2, [r3, #20]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0201 	bic.w	r2, r2, #1
 8007658:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7fb fd08 	bl	8003078 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	e002      	b.n	8007672 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	e000      	b.n	8007672 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007670:	2302      	movs	r3, #2
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
	...

0800767c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80076be:	f023 030c 	bic.w	r3, r3, #12
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	68f9      	ldr	r1, [r7, #12]
 80076c8:	430b      	orrs	r3, r1
 80076ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ea:	f040 818b 	bne.w	8007a04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4ac1      	ldr	r2, [pc, #772]	; (80079f8 <UART_SetConfig+0x37c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d005      	beq.n	8007704 <UART_SetConfig+0x88>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4abf      	ldr	r2, [pc, #764]	; (80079fc <UART_SetConfig+0x380>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	f040 80bd 	bne.w	800787e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007704:	f7fe ffdc 	bl	80066c0 <HAL_RCC_GetPCLK2Freq>
 8007708:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	461d      	mov	r5, r3
 800770e:	f04f 0600 	mov.w	r6, #0
 8007712:	46a8      	mov	r8, r5
 8007714:	46b1      	mov	r9, r6
 8007716:	eb18 0308 	adds.w	r3, r8, r8
 800771a:	eb49 0409 	adc.w	r4, r9, r9
 800771e:	4698      	mov	r8, r3
 8007720:	46a1      	mov	r9, r4
 8007722:	eb18 0805 	adds.w	r8, r8, r5
 8007726:	eb49 0906 	adc.w	r9, r9, r6
 800772a:	f04f 0100 	mov.w	r1, #0
 800772e:	f04f 0200 	mov.w	r2, #0
 8007732:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007736:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800773a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800773e:	4688      	mov	r8, r1
 8007740:	4691      	mov	r9, r2
 8007742:	eb18 0005 	adds.w	r0, r8, r5
 8007746:	eb49 0106 	adc.w	r1, r9, r6
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	461d      	mov	r5, r3
 8007750:	f04f 0600 	mov.w	r6, #0
 8007754:	196b      	adds	r3, r5, r5
 8007756:	eb46 0406 	adc.w	r4, r6, r6
 800775a:	461a      	mov	r2, r3
 800775c:	4623      	mov	r3, r4
 800775e:	f7f9 fae3 	bl	8000d28 <__aeabi_uldivmod>
 8007762:	4603      	mov	r3, r0
 8007764:	460c      	mov	r4, r1
 8007766:	461a      	mov	r2, r3
 8007768:	4ba5      	ldr	r3, [pc, #660]	; (8007a00 <UART_SetConfig+0x384>)
 800776a:	fba3 2302 	umull	r2, r3, r3, r2
 800776e:	095b      	lsrs	r3, r3, #5
 8007770:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	461d      	mov	r5, r3
 8007778:	f04f 0600 	mov.w	r6, #0
 800777c:	46a9      	mov	r9, r5
 800777e:	46b2      	mov	sl, r6
 8007780:	eb19 0309 	adds.w	r3, r9, r9
 8007784:	eb4a 040a 	adc.w	r4, sl, sl
 8007788:	4699      	mov	r9, r3
 800778a:	46a2      	mov	sl, r4
 800778c:	eb19 0905 	adds.w	r9, r9, r5
 8007790:	eb4a 0a06 	adc.w	sl, sl, r6
 8007794:	f04f 0100 	mov.w	r1, #0
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077a8:	4689      	mov	r9, r1
 80077aa:	4692      	mov	sl, r2
 80077ac:	eb19 0005 	adds.w	r0, r9, r5
 80077b0:	eb4a 0106 	adc.w	r1, sl, r6
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	461d      	mov	r5, r3
 80077ba:	f04f 0600 	mov.w	r6, #0
 80077be:	196b      	adds	r3, r5, r5
 80077c0:	eb46 0406 	adc.w	r4, r6, r6
 80077c4:	461a      	mov	r2, r3
 80077c6:	4623      	mov	r3, r4
 80077c8:	f7f9 faae 	bl	8000d28 <__aeabi_uldivmod>
 80077cc:	4603      	mov	r3, r0
 80077ce:	460c      	mov	r4, r1
 80077d0:	461a      	mov	r2, r3
 80077d2:	4b8b      	ldr	r3, [pc, #556]	; (8007a00 <UART_SetConfig+0x384>)
 80077d4:	fba3 1302 	umull	r1, r3, r3, r2
 80077d8:	095b      	lsrs	r3, r3, #5
 80077da:	2164      	movs	r1, #100	; 0x64
 80077dc:	fb01 f303 	mul.w	r3, r1, r3
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	3332      	adds	r3, #50	; 0x32
 80077e6:	4a86      	ldr	r2, [pc, #536]	; (8007a00 <UART_SetConfig+0x384>)
 80077e8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077f4:	4498      	add	r8, r3
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	461d      	mov	r5, r3
 80077fa:	f04f 0600 	mov.w	r6, #0
 80077fe:	46a9      	mov	r9, r5
 8007800:	46b2      	mov	sl, r6
 8007802:	eb19 0309 	adds.w	r3, r9, r9
 8007806:	eb4a 040a 	adc.w	r4, sl, sl
 800780a:	4699      	mov	r9, r3
 800780c:	46a2      	mov	sl, r4
 800780e:	eb19 0905 	adds.w	r9, r9, r5
 8007812:	eb4a 0a06 	adc.w	sl, sl, r6
 8007816:	f04f 0100 	mov.w	r1, #0
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007822:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007826:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800782a:	4689      	mov	r9, r1
 800782c:	4692      	mov	sl, r2
 800782e:	eb19 0005 	adds.w	r0, r9, r5
 8007832:	eb4a 0106 	adc.w	r1, sl, r6
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	461d      	mov	r5, r3
 800783c:	f04f 0600 	mov.w	r6, #0
 8007840:	196b      	adds	r3, r5, r5
 8007842:	eb46 0406 	adc.w	r4, r6, r6
 8007846:	461a      	mov	r2, r3
 8007848:	4623      	mov	r3, r4
 800784a:	f7f9 fa6d 	bl	8000d28 <__aeabi_uldivmod>
 800784e:	4603      	mov	r3, r0
 8007850:	460c      	mov	r4, r1
 8007852:	461a      	mov	r2, r3
 8007854:	4b6a      	ldr	r3, [pc, #424]	; (8007a00 <UART_SetConfig+0x384>)
 8007856:	fba3 1302 	umull	r1, r3, r3, r2
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	2164      	movs	r1, #100	; 0x64
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	3332      	adds	r3, #50	; 0x32
 8007868:	4a65      	ldr	r2, [pc, #404]	; (8007a00 <UART_SetConfig+0x384>)
 800786a:	fba2 2303 	umull	r2, r3, r2, r3
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	f003 0207 	and.w	r2, r3, #7
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4442      	add	r2, r8
 800787a:	609a      	str	r2, [r3, #8]
 800787c:	e26f      	b.n	8007d5e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800787e:	f7fe ff0b 	bl	8006698 <HAL_RCC_GetPCLK1Freq>
 8007882:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	461d      	mov	r5, r3
 8007888:	f04f 0600 	mov.w	r6, #0
 800788c:	46a8      	mov	r8, r5
 800788e:	46b1      	mov	r9, r6
 8007890:	eb18 0308 	adds.w	r3, r8, r8
 8007894:	eb49 0409 	adc.w	r4, r9, r9
 8007898:	4698      	mov	r8, r3
 800789a:	46a1      	mov	r9, r4
 800789c:	eb18 0805 	adds.w	r8, r8, r5
 80078a0:	eb49 0906 	adc.w	r9, r9, r6
 80078a4:	f04f 0100 	mov.w	r1, #0
 80078a8:	f04f 0200 	mov.w	r2, #0
 80078ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80078b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80078b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078b8:	4688      	mov	r8, r1
 80078ba:	4691      	mov	r9, r2
 80078bc:	eb18 0005 	adds.w	r0, r8, r5
 80078c0:	eb49 0106 	adc.w	r1, r9, r6
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	461d      	mov	r5, r3
 80078ca:	f04f 0600 	mov.w	r6, #0
 80078ce:	196b      	adds	r3, r5, r5
 80078d0:	eb46 0406 	adc.w	r4, r6, r6
 80078d4:	461a      	mov	r2, r3
 80078d6:	4623      	mov	r3, r4
 80078d8:	f7f9 fa26 	bl	8000d28 <__aeabi_uldivmod>
 80078dc:	4603      	mov	r3, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	461a      	mov	r2, r3
 80078e2:	4b47      	ldr	r3, [pc, #284]	; (8007a00 <UART_SetConfig+0x384>)
 80078e4:	fba3 2302 	umull	r2, r3, r3, r2
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	461d      	mov	r5, r3
 80078f2:	f04f 0600 	mov.w	r6, #0
 80078f6:	46a9      	mov	r9, r5
 80078f8:	46b2      	mov	sl, r6
 80078fa:	eb19 0309 	adds.w	r3, r9, r9
 80078fe:	eb4a 040a 	adc.w	r4, sl, sl
 8007902:	4699      	mov	r9, r3
 8007904:	46a2      	mov	sl, r4
 8007906:	eb19 0905 	adds.w	r9, r9, r5
 800790a:	eb4a 0a06 	adc.w	sl, sl, r6
 800790e:	f04f 0100 	mov.w	r1, #0
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800791a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800791e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007922:	4689      	mov	r9, r1
 8007924:	4692      	mov	sl, r2
 8007926:	eb19 0005 	adds.w	r0, r9, r5
 800792a:	eb4a 0106 	adc.w	r1, sl, r6
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	461d      	mov	r5, r3
 8007934:	f04f 0600 	mov.w	r6, #0
 8007938:	196b      	adds	r3, r5, r5
 800793a:	eb46 0406 	adc.w	r4, r6, r6
 800793e:	461a      	mov	r2, r3
 8007940:	4623      	mov	r3, r4
 8007942:	f7f9 f9f1 	bl	8000d28 <__aeabi_uldivmod>
 8007946:	4603      	mov	r3, r0
 8007948:	460c      	mov	r4, r1
 800794a:	461a      	mov	r2, r3
 800794c:	4b2c      	ldr	r3, [pc, #176]	; (8007a00 <UART_SetConfig+0x384>)
 800794e:	fba3 1302 	umull	r1, r3, r3, r2
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	2164      	movs	r1, #100	; 0x64
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	3332      	adds	r3, #50	; 0x32
 8007960:	4a27      	ldr	r2, [pc, #156]	; (8007a00 <UART_SetConfig+0x384>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800796e:	4498      	add	r8, r3
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	461d      	mov	r5, r3
 8007974:	f04f 0600 	mov.w	r6, #0
 8007978:	46a9      	mov	r9, r5
 800797a:	46b2      	mov	sl, r6
 800797c:	eb19 0309 	adds.w	r3, r9, r9
 8007980:	eb4a 040a 	adc.w	r4, sl, sl
 8007984:	4699      	mov	r9, r3
 8007986:	46a2      	mov	sl, r4
 8007988:	eb19 0905 	adds.w	r9, r9, r5
 800798c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007990:	f04f 0100 	mov.w	r1, #0
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800799c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079a4:	4689      	mov	r9, r1
 80079a6:	4692      	mov	sl, r2
 80079a8:	eb19 0005 	adds.w	r0, r9, r5
 80079ac:	eb4a 0106 	adc.w	r1, sl, r6
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	461d      	mov	r5, r3
 80079b6:	f04f 0600 	mov.w	r6, #0
 80079ba:	196b      	adds	r3, r5, r5
 80079bc:	eb46 0406 	adc.w	r4, r6, r6
 80079c0:	461a      	mov	r2, r3
 80079c2:	4623      	mov	r3, r4
 80079c4:	f7f9 f9b0 	bl	8000d28 <__aeabi_uldivmod>
 80079c8:	4603      	mov	r3, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	461a      	mov	r2, r3
 80079ce:	4b0c      	ldr	r3, [pc, #48]	; (8007a00 <UART_SetConfig+0x384>)
 80079d0:	fba3 1302 	umull	r1, r3, r3, r2
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	2164      	movs	r1, #100	; 0x64
 80079d8:	fb01 f303 	mul.w	r3, r1, r3
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	3332      	adds	r3, #50	; 0x32
 80079e2:	4a07      	ldr	r2, [pc, #28]	; (8007a00 <UART_SetConfig+0x384>)
 80079e4:	fba2 2303 	umull	r2, r3, r2, r3
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	f003 0207 	and.w	r2, r3, #7
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4442      	add	r2, r8
 80079f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80079f6:	e1b2      	b.n	8007d5e <UART_SetConfig+0x6e2>
 80079f8:	40011000 	.word	0x40011000
 80079fc:	40011400 	.word	0x40011400
 8007a00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4ad7      	ldr	r2, [pc, #860]	; (8007d68 <UART_SetConfig+0x6ec>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d005      	beq.n	8007a1a <UART_SetConfig+0x39e>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4ad6      	ldr	r2, [pc, #856]	; (8007d6c <UART_SetConfig+0x6f0>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	f040 80d1 	bne.w	8007bbc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a1a:	f7fe fe51 	bl	80066c0 <HAL_RCC_GetPCLK2Freq>
 8007a1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	469a      	mov	sl, r3
 8007a24:	f04f 0b00 	mov.w	fp, #0
 8007a28:	46d0      	mov	r8, sl
 8007a2a:	46d9      	mov	r9, fp
 8007a2c:	eb18 0308 	adds.w	r3, r8, r8
 8007a30:	eb49 0409 	adc.w	r4, r9, r9
 8007a34:	4698      	mov	r8, r3
 8007a36:	46a1      	mov	r9, r4
 8007a38:	eb18 080a 	adds.w	r8, r8, sl
 8007a3c:	eb49 090b 	adc.w	r9, r9, fp
 8007a40:	f04f 0100 	mov.w	r1, #0
 8007a44:	f04f 0200 	mov.w	r2, #0
 8007a48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a54:	4688      	mov	r8, r1
 8007a56:	4691      	mov	r9, r2
 8007a58:	eb1a 0508 	adds.w	r5, sl, r8
 8007a5c:	eb4b 0609 	adc.w	r6, fp, r9
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	4619      	mov	r1, r3
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	f04f 0400 	mov.w	r4, #0
 8007a72:	0094      	lsls	r4, r2, #2
 8007a74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a78:	008b      	lsls	r3, r1, #2
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	4623      	mov	r3, r4
 8007a7e:	4628      	mov	r0, r5
 8007a80:	4631      	mov	r1, r6
 8007a82:	f7f9 f951 	bl	8000d28 <__aeabi_uldivmod>
 8007a86:	4603      	mov	r3, r0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4bb8      	ldr	r3, [pc, #736]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	469b      	mov	fp, r3
 8007a9c:	f04f 0c00 	mov.w	ip, #0
 8007aa0:	46d9      	mov	r9, fp
 8007aa2:	46e2      	mov	sl, ip
 8007aa4:	eb19 0309 	adds.w	r3, r9, r9
 8007aa8:	eb4a 040a 	adc.w	r4, sl, sl
 8007aac:	4699      	mov	r9, r3
 8007aae:	46a2      	mov	sl, r4
 8007ab0:	eb19 090b 	adds.w	r9, r9, fp
 8007ab4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ab8:	f04f 0100 	mov.w	r1, #0
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ac4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007acc:	4689      	mov	r9, r1
 8007ace:	4692      	mov	sl, r2
 8007ad0:	eb1b 0509 	adds.w	r5, fp, r9
 8007ad4:	eb4c 060a 	adc.w	r6, ip, sl
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	4619      	mov	r1, r3
 8007ade:	f04f 0200 	mov.w	r2, #0
 8007ae2:	f04f 0300 	mov.w	r3, #0
 8007ae6:	f04f 0400 	mov.w	r4, #0
 8007aea:	0094      	lsls	r4, r2, #2
 8007aec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007af0:	008b      	lsls	r3, r1, #2
 8007af2:	461a      	mov	r2, r3
 8007af4:	4623      	mov	r3, r4
 8007af6:	4628      	mov	r0, r5
 8007af8:	4631      	mov	r1, r6
 8007afa:	f7f9 f915 	bl	8000d28 <__aeabi_uldivmod>
 8007afe:	4603      	mov	r3, r0
 8007b00:	460c      	mov	r4, r1
 8007b02:	461a      	mov	r2, r3
 8007b04:	4b9a      	ldr	r3, [pc, #616]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007b06:	fba3 1302 	umull	r1, r3, r3, r2
 8007b0a:	095b      	lsrs	r3, r3, #5
 8007b0c:	2164      	movs	r1, #100	; 0x64
 8007b0e:	fb01 f303 	mul.w	r3, r1, r3
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	3332      	adds	r3, #50	; 0x32
 8007b18:	4a95      	ldr	r2, [pc, #596]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1e:	095b      	lsrs	r3, r3, #5
 8007b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b24:	4498      	add	r8, r3
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	469b      	mov	fp, r3
 8007b2a:	f04f 0c00 	mov.w	ip, #0
 8007b2e:	46d9      	mov	r9, fp
 8007b30:	46e2      	mov	sl, ip
 8007b32:	eb19 0309 	adds.w	r3, r9, r9
 8007b36:	eb4a 040a 	adc.w	r4, sl, sl
 8007b3a:	4699      	mov	r9, r3
 8007b3c:	46a2      	mov	sl, r4
 8007b3e:	eb19 090b 	adds.w	r9, r9, fp
 8007b42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b46:	f04f 0100 	mov.w	r1, #0
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b5a:	4689      	mov	r9, r1
 8007b5c:	4692      	mov	sl, r2
 8007b5e:	eb1b 0509 	adds.w	r5, fp, r9
 8007b62:	eb4c 060a 	adc.w	r6, ip, sl
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	f04f 0400 	mov.w	r4, #0
 8007b78:	0094      	lsls	r4, r2, #2
 8007b7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b7e:	008b      	lsls	r3, r1, #2
 8007b80:	461a      	mov	r2, r3
 8007b82:	4623      	mov	r3, r4
 8007b84:	4628      	mov	r0, r5
 8007b86:	4631      	mov	r1, r6
 8007b88:	f7f9 f8ce 	bl	8000d28 <__aeabi_uldivmod>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	461a      	mov	r2, r3
 8007b92:	4b77      	ldr	r3, [pc, #476]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007b94:	fba3 1302 	umull	r1, r3, r3, r2
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	2164      	movs	r1, #100	; 0x64
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	3332      	adds	r3, #50	; 0x32
 8007ba6:	4a72      	ldr	r2, [pc, #456]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	f003 020f 	and.w	r2, r3, #15
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4442      	add	r2, r8
 8007bb8:	609a      	str	r2, [r3, #8]
 8007bba:	e0d0      	b.n	8007d5e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fe fd6c 	bl	8006698 <HAL_RCC_GetPCLK1Freq>
 8007bc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	469a      	mov	sl, r3
 8007bc6:	f04f 0b00 	mov.w	fp, #0
 8007bca:	46d0      	mov	r8, sl
 8007bcc:	46d9      	mov	r9, fp
 8007bce:	eb18 0308 	adds.w	r3, r8, r8
 8007bd2:	eb49 0409 	adc.w	r4, r9, r9
 8007bd6:	4698      	mov	r8, r3
 8007bd8:	46a1      	mov	r9, r4
 8007bda:	eb18 080a 	adds.w	r8, r8, sl
 8007bde:	eb49 090b 	adc.w	r9, r9, fp
 8007be2:	f04f 0100 	mov.w	r1, #0
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007bee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007bf2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007bf6:	4688      	mov	r8, r1
 8007bf8:	4691      	mov	r9, r2
 8007bfa:	eb1a 0508 	adds.w	r5, sl, r8
 8007bfe:	eb4b 0609 	adc.w	r6, fp, r9
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	4619      	mov	r1, r3
 8007c08:	f04f 0200 	mov.w	r2, #0
 8007c0c:	f04f 0300 	mov.w	r3, #0
 8007c10:	f04f 0400 	mov.w	r4, #0
 8007c14:	0094      	lsls	r4, r2, #2
 8007c16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c1a:	008b      	lsls	r3, r1, #2
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4623      	mov	r3, r4
 8007c20:	4628      	mov	r0, r5
 8007c22:	4631      	mov	r1, r6
 8007c24:	f7f9 f880 	bl	8000d28 <__aeabi_uldivmod>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	4b50      	ldr	r3, [pc, #320]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007c30:	fba3 2302 	umull	r2, r3, r3, r2
 8007c34:	095b      	lsrs	r3, r3, #5
 8007c36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	469b      	mov	fp, r3
 8007c3e:	f04f 0c00 	mov.w	ip, #0
 8007c42:	46d9      	mov	r9, fp
 8007c44:	46e2      	mov	sl, ip
 8007c46:	eb19 0309 	adds.w	r3, r9, r9
 8007c4a:	eb4a 040a 	adc.w	r4, sl, sl
 8007c4e:	4699      	mov	r9, r3
 8007c50:	46a2      	mov	sl, r4
 8007c52:	eb19 090b 	adds.w	r9, r9, fp
 8007c56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c5a:	f04f 0100 	mov.w	r1, #0
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c6e:	4689      	mov	r9, r1
 8007c70:	4692      	mov	sl, r2
 8007c72:	eb1b 0509 	adds.w	r5, fp, r9
 8007c76:	eb4c 060a 	adc.w	r6, ip, sl
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	f04f 0400 	mov.w	r4, #0
 8007c8c:	0094      	lsls	r4, r2, #2
 8007c8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c92:	008b      	lsls	r3, r1, #2
 8007c94:	461a      	mov	r2, r3
 8007c96:	4623      	mov	r3, r4
 8007c98:	4628      	mov	r0, r5
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	f7f9 f844 	bl	8000d28 <__aeabi_uldivmod>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4b32      	ldr	r3, [pc, #200]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	2164      	movs	r1, #100	; 0x64
 8007cb0:	fb01 f303 	mul.w	r3, r1, r3
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	3332      	adds	r3, #50	; 0x32
 8007cba:	4a2d      	ldr	r2, [pc, #180]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cc6:	4498      	add	r8, r3
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	469b      	mov	fp, r3
 8007ccc:	f04f 0c00 	mov.w	ip, #0
 8007cd0:	46d9      	mov	r9, fp
 8007cd2:	46e2      	mov	sl, ip
 8007cd4:	eb19 0309 	adds.w	r3, r9, r9
 8007cd8:	eb4a 040a 	adc.w	r4, sl, sl
 8007cdc:	4699      	mov	r9, r3
 8007cde:	46a2      	mov	sl, r4
 8007ce0:	eb19 090b 	adds.w	r9, r9, fp
 8007ce4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ce8:	f04f 0100 	mov.w	r1, #0
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cfc:	4689      	mov	r9, r1
 8007cfe:	4692      	mov	sl, r2
 8007d00:	eb1b 0509 	adds.w	r5, fp, r9
 8007d04:	eb4c 060a 	adc.w	r6, ip, sl
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	f04f 0200 	mov.w	r2, #0
 8007d12:	f04f 0300 	mov.w	r3, #0
 8007d16:	f04f 0400 	mov.w	r4, #0
 8007d1a:	0094      	lsls	r4, r2, #2
 8007d1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d20:	008b      	lsls	r3, r1, #2
 8007d22:	461a      	mov	r2, r3
 8007d24:	4623      	mov	r3, r4
 8007d26:	4628      	mov	r0, r5
 8007d28:	4631      	mov	r1, r6
 8007d2a:	f7f8 fffd 	bl	8000d28 <__aeabi_uldivmod>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	460c      	mov	r4, r1
 8007d32:	461a      	mov	r2, r3
 8007d34:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007d36:	fba3 1302 	umull	r1, r3, r3, r2
 8007d3a:	095b      	lsrs	r3, r3, #5
 8007d3c:	2164      	movs	r1, #100	; 0x64
 8007d3e:	fb01 f303 	mul.w	r3, r1, r3
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	3332      	adds	r3, #50	; 0x32
 8007d48:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4e:	095b      	lsrs	r3, r3, #5
 8007d50:	f003 020f 	and.w	r2, r3, #15
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4442      	add	r2, r8
 8007d5a:	609a      	str	r2, [r3, #8]
}
 8007d5c:	e7ff      	b.n	8007d5e <UART_SetConfig+0x6e2>
 8007d5e:	bf00      	nop
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d68:	40011000 	.word	0x40011000
 8007d6c:	40011400 	.word	0x40011400
 8007d70:	51eb851f 	.word	0x51eb851f

08007d74 <atof>:
 8007d74:	2100      	movs	r1, #0
 8007d76:	f001 badf 	b.w	8009338 <strtod>
	...

08007d7c <__errno>:
 8007d7c:	4b01      	ldr	r3, [pc, #4]	; (8007d84 <__errno+0x8>)
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	20000014 	.word	0x20000014

08007d88 <__libc_init_array>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	4e0d      	ldr	r6, [pc, #52]	; (8007dc0 <__libc_init_array+0x38>)
 8007d8c:	4c0d      	ldr	r4, [pc, #52]	; (8007dc4 <__libc_init_array+0x3c>)
 8007d8e:	1ba4      	subs	r4, r4, r6
 8007d90:	10a4      	asrs	r4, r4, #2
 8007d92:	2500      	movs	r5, #0
 8007d94:	42a5      	cmp	r5, r4
 8007d96:	d109      	bne.n	8007dac <__libc_init_array+0x24>
 8007d98:	4e0b      	ldr	r6, [pc, #44]	; (8007dc8 <__libc_init_array+0x40>)
 8007d9a:	4c0c      	ldr	r4, [pc, #48]	; (8007dcc <__libc_init_array+0x44>)
 8007d9c:	f004 fb9e 	bl	800c4dc <_init>
 8007da0:	1ba4      	subs	r4, r4, r6
 8007da2:	10a4      	asrs	r4, r4, #2
 8007da4:	2500      	movs	r5, #0
 8007da6:	42a5      	cmp	r5, r4
 8007da8:	d105      	bne.n	8007db6 <__libc_init_array+0x2e>
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
 8007dac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007db0:	4798      	blx	r3
 8007db2:	3501      	adds	r5, #1
 8007db4:	e7ee      	b.n	8007d94 <__libc_init_array+0xc>
 8007db6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dba:	4798      	blx	r3
 8007dbc:	3501      	adds	r5, #1
 8007dbe:	e7f2      	b.n	8007da6 <__libc_init_array+0x1e>
 8007dc0:	0800c988 	.word	0x0800c988
 8007dc4:	0800c988 	.word	0x0800c988
 8007dc8:	0800c988 	.word	0x0800c988
 8007dcc:	0800c98c 	.word	0x0800c98c

08007dd0 <memset>:
 8007dd0:	4402      	add	r2, r0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d100      	bne.n	8007dda <memset+0xa>
 8007dd8:	4770      	bx	lr
 8007dda:	f803 1b01 	strb.w	r1, [r3], #1
 8007dde:	e7f9      	b.n	8007dd4 <memset+0x4>

08007de0 <__cvt>:
 8007de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007de4:	ec55 4b10 	vmov	r4, r5, d0
 8007de8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007dea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	460e      	mov	r6, r1
 8007df2:	4691      	mov	r9, r2
 8007df4:	4619      	mov	r1, r3
 8007df6:	bfb8      	it	lt
 8007df8:	4622      	movlt	r2, r4
 8007dfa:	462b      	mov	r3, r5
 8007dfc:	f027 0720 	bic.w	r7, r7, #32
 8007e00:	bfbb      	ittet	lt
 8007e02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e06:	461d      	movlt	r5, r3
 8007e08:	2300      	movge	r3, #0
 8007e0a:	232d      	movlt	r3, #45	; 0x2d
 8007e0c:	bfb8      	it	lt
 8007e0e:	4614      	movlt	r4, r2
 8007e10:	2f46      	cmp	r7, #70	; 0x46
 8007e12:	700b      	strb	r3, [r1, #0]
 8007e14:	d004      	beq.n	8007e20 <__cvt+0x40>
 8007e16:	2f45      	cmp	r7, #69	; 0x45
 8007e18:	d100      	bne.n	8007e1c <__cvt+0x3c>
 8007e1a:	3601      	adds	r6, #1
 8007e1c:	2102      	movs	r1, #2
 8007e1e:	e000      	b.n	8007e22 <__cvt+0x42>
 8007e20:	2103      	movs	r1, #3
 8007e22:	ab03      	add	r3, sp, #12
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	ab02      	add	r3, sp, #8
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	4632      	mov	r2, r6
 8007e2c:	4653      	mov	r3, sl
 8007e2e:	ec45 4b10 	vmov	d0, r4, r5
 8007e32:	f001 fb21 	bl	8009478 <_dtoa_r>
 8007e36:	2f47      	cmp	r7, #71	; 0x47
 8007e38:	4680      	mov	r8, r0
 8007e3a:	d102      	bne.n	8007e42 <__cvt+0x62>
 8007e3c:	f019 0f01 	tst.w	r9, #1
 8007e40:	d026      	beq.n	8007e90 <__cvt+0xb0>
 8007e42:	2f46      	cmp	r7, #70	; 0x46
 8007e44:	eb08 0906 	add.w	r9, r8, r6
 8007e48:	d111      	bne.n	8007e6e <__cvt+0x8e>
 8007e4a:	f898 3000 	ldrb.w	r3, [r8]
 8007e4e:	2b30      	cmp	r3, #48	; 0x30
 8007e50:	d10a      	bne.n	8007e68 <__cvt+0x88>
 8007e52:	2200      	movs	r2, #0
 8007e54:	2300      	movs	r3, #0
 8007e56:	4620      	mov	r0, r4
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7f8 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e5e:	b918      	cbnz	r0, 8007e68 <__cvt+0x88>
 8007e60:	f1c6 0601 	rsb	r6, r6, #1
 8007e64:	f8ca 6000 	str.w	r6, [sl]
 8007e68:	f8da 3000 	ldr.w	r3, [sl]
 8007e6c:	4499      	add	r9, r3
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2300      	movs	r3, #0
 8007e72:	4620      	mov	r0, r4
 8007e74:	4629      	mov	r1, r5
 8007e76:	f7f8 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e7a:	b938      	cbnz	r0, 8007e8c <__cvt+0xac>
 8007e7c:	2230      	movs	r2, #48	; 0x30
 8007e7e:	9b03      	ldr	r3, [sp, #12]
 8007e80:	454b      	cmp	r3, r9
 8007e82:	d205      	bcs.n	8007e90 <__cvt+0xb0>
 8007e84:	1c59      	adds	r1, r3, #1
 8007e86:	9103      	str	r1, [sp, #12]
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	e7f8      	b.n	8007e7e <__cvt+0x9e>
 8007e8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e90:	9b03      	ldr	r3, [sp, #12]
 8007e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e94:	eba3 0308 	sub.w	r3, r3, r8
 8007e98:	4640      	mov	r0, r8
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	b004      	add	sp, #16
 8007e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007ea2 <__exponent>:
 8007ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	bfba      	itte	lt
 8007eaa:	4249      	neglt	r1, r1
 8007eac:	232d      	movlt	r3, #45	; 0x2d
 8007eae:	232b      	movge	r3, #43	; 0x2b
 8007eb0:	2909      	cmp	r1, #9
 8007eb2:	f804 2b02 	strb.w	r2, [r4], #2
 8007eb6:	7043      	strb	r3, [r0, #1]
 8007eb8:	dd20      	ble.n	8007efc <__exponent+0x5a>
 8007eba:	f10d 0307 	add.w	r3, sp, #7
 8007ebe:	461f      	mov	r7, r3
 8007ec0:	260a      	movs	r6, #10
 8007ec2:	fb91 f5f6 	sdiv	r5, r1, r6
 8007ec6:	fb06 1115 	mls	r1, r6, r5, r1
 8007eca:	3130      	adds	r1, #48	; 0x30
 8007ecc:	2d09      	cmp	r5, #9
 8007ece:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ed2:	f103 32ff 	add.w	r2, r3, #4294967295
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	dc09      	bgt.n	8007eee <__exponent+0x4c>
 8007eda:	3130      	adds	r1, #48	; 0x30
 8007edc:	3b02      	subs	r3, #2
 8007ede:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ee2:	42bb      	cmp	r3, r7
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	d304      	bcc.n	8007ef2 <__exponent+0x50>
 8007ee8:	1a10      	subs	r0, r2, r0
 8007eea:	b003      	add	sp, #12
 8007eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eee:	4613      	mov	r3, r2
 8007ef0:	e7e7      	b.n	8007ec2 <__exponent+0x20>
 8007ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ef6:	f804 2b01 	strb.w	r2, [r4], #1
 8007efa:	e7f2      	b.n	8007ee2 <__exponent+0x40>
 8007efc:	2330      	movs	r3, #48	; 0x30
 8007efe:	4419      	add	r1, r3
 8007f00:	7083      	strb	r3, [r0, #2]
 8007f02:	1d02      	adds	r2, r0, #4
 8007f04:	70c1      	strb	r1, [r0, #3]
 8007f06:	e7ef      	b.n	8007ee8 <__exponent+0x46>

08007f08 <_printf_float>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	b08d      	sub	sp, #52	; 0x34
 8007f0e:	460c      	mov	r4, r1
 8007f10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007f14:	4616      	mov	r6, r2
 8007f16:	461f      	mov	r7, r3
 8007f18:	4605      	mov	r5, r0
 8007f1a:	f002 fb8d 	bl	800a638 <_localeconv_r>
 8007f1e:	6803      	ldr	r3, [r0, #0]
 8007f20:	9304      	str	r3, [sp, #16]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7f8 f9a4 	bl	8000270 <strlen>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f30:	9005      	str	r0, [sp, #20]
 8007f32:	3307      	adds	r3, #7
 8007f34:	f023 0307 	bic.w	r3, r3, #7
 8007f38:	f103 0208 	add.w	r2, r3, #8
 8007f3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f40:	f8d4 b000 	ldr.w	fp, [r4]
 8007f44:	f8c8 2000 	str.w	r2, [r8]
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f58:	9307      	str	r3, [sp, #28]
 8007f5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f62:	4ba7      	ldr	r3, [pc, #668]	; (8008200 <_printf_float+0x2f8>)
 8007f64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f68:	f7f8 fde0 	bl	8000b2c <__aeabi_dcmpun>
 8007f6c:	bb70      	cbnz	r0, 8007fcc <_printf_float+0xc4>
 8007f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f72:	4ba3      	ldr	r3, [pc, #652]	; (8008200 <_printf_float+0x2f8>)
 8007f74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f78:	f7f8 fdba 	bl	8000af0 <__aeabi_dcmple>
 8007f7c:	bb30      	cbnz	r0, 8007fcc <_printf_float+0xc4>
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2300      	movs	r3, #0
 8007f82:	4640      	mov	r0, r8
 8007f84:	4649      	mov	r1, r9
 8007f86:	f7f8 fda9 	bl	8000adc <__aeabi_dcmplt>
 8007f8a:	b110      	cbz	r0, 8007f92 <_printf_float+0x8a>
 8007f8c:	232d      	movs	r3, #45	; 0x2d
 8007f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f92:	4a9c      	ldr	r2, [pc, #624]	; (8008204 <_printf_float+0x2fc>)
 8007f94:	4b9c      	ldr	r3, [pc, #624]	; (8008208 <_printf_float+0x300>)
 8007f96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007f9a:	bf8c      	ite	hi
 8007f9c:	4690      	movhi	r8, r2
 8007f9e:	4698      	movls	r8, r3
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	f02b 0204 	bic.w	r2, fp, #4
 8007fa6:	6123      	str	r3, [r4, #16]
 8007fa8:	6022      	str	r2, [r4, #0]
 8007faa:	f04f 0900 	mov.w	r9, #0
 8007fae:	9700      	str	r7, [sp, #0]
 8007fb0:	4633      	mov	r3, r6
 8007fb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f000 f9e6 	bl	8008388 <_printf_common>
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	f040 808d 	bne.w	80080dc <_printf_float+0x1d4>
 8007fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc6:	b00d      	add	sp, #52	; 0x34
 8007fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fcc:	4642      	mov	r2, r8
 8007fce:	464b      	mov	r3, r9
 8007fd0:	4640      	mov	r0, r8
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	f7f8 fdaa 	bl	8000b2c <__aeabi_dcmpun>
 8007fd8:	b110      	cbz	r0, 8007fe0 <_printf_float+0xd8>
 8007fda:	4a8c      	ldr	r2, [pc, #560]	; (800820c <_printf_float+0x304>)
 8007fdc:	4b8c      	ldr	r3, [pc, #560]	; (8008210 <_printf_float+0x308>)
 8007fde:	e7da      	b.n	8007f96 <_printf_float+0x8e>
 8007fe0:	6861      	ldr	r1, [r4, #4]
 8007fe2:	1c4b      	adds	r3, r1, #1
 8007fe4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007fe8:	a80a      	add	r0, sp, #40	; 0x28
 8007fea:	d13e      	bne.n	800806a <_printf_float+0x162>
 8007fec:	2306      	movs	r3, #6
 8007fee:	6063      	str	r3, [r4, #4]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007ff6:	ab09      	add	r3, sp, #36	; 0x24
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	ec49 8b10 	vmov	d0, r8, r9
 8007ffe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008002:	6022      	str	r2, [r4, #0]
 8008004:	f8cd a004 	str.w	sl, [sp, #4]
 8008008:	6861      	ldr	r1, [r4, #4]
 800800a:	4628      	mov	r0, r5
 800800c:	f7ff fee8 	bl	8007de0 <__cvt>
 8008010:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008014:	2b47      	cmp	r3, #71	; 0x47
 8008016:	4680      	mov	r8, r0
 8008018:	d109      	bne.n	800802e <_printf_float+0x126>
 800801a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801c:	1cd8      	adds	r0, r3, #3
 800801e:	db02      	blt.n	8008026 <_printf_float+0x11e>
 8008020:	6862      	ldr	r2, [r4, #4]
 8008022:	4293      	cmp	r3, r2
 8008024:	dd47      	ble.n	80080b6 <_printf_float+0x1ae>
 8008026:	f1aa 0a02 	sub.w	sl, sl, #2
 800802a:	fa5f fa8a 	uxtb.w	sl, sl
 800802e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008032:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008034:	d824      	bhi.n	8008080 <_printf_float+0x178>
 8008036:	3901      	subs	r1, #1
 8008038:	4652      	mov	r2, sl
 800803a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800803e:	9109      	str	r1, [sp, #36]	; 0x24
 8008040:	f7ff ff2f 	bl	8007ea2 <__exponent>
 8008044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008046:	1813      	adds	r3, r2, r0
 8008048:	2a01      	cmp	r2, #1
 800804a:	4681      	mov	r9, r0
 800804c:	6123      	str	r3, [r4, #16]
 800804e:	dc02      	bgt.n	8008056 <_printf_float+0x14e>
 8008050:	6822      	ldr	r2, [r4, #0]
 8008052:	07d1      	lsls	r1, r2, #31
 8008054:	d501      	bpl.n	800805a <_printf_float+0x152>
 8008056:	3301      	adds	r3, #1
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0a5      	beq.n	8007fae <_printf_float+0xa6>
 8008062:	232d      	movs	r3, #45	; 0x2d
 8008064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008068:	e7a1      	b.n	8007fae <_printf_float+0xa6>
 800806a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800806e:	f000 8177 	beq.w	8008360 <_printf_float+0x458>
 8008072:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008076:	d1bb      	bne.n	8007ff0 <_printf_float+0xe8>
 8008078:	2900      	cmp	r1, #0
 800807a:	d1b9      	bne.n	8007ff0 <_printf_float+0xe8>
 800807c:	2301      	movs	r3, #1
 800807e:	e7b6      	b.n	8007fee <_printf_float+0xe6>
 8008080:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008084:	d119      	bne.n	80080ba <_printf_float+0x1b2>
 8008086:	2900      	cmp	r1, #0
 8008088:	6863      	ldr	r3, [r4, #4]
 800808a:	dd0c      	ble.n	80080a6 <_printf_float+0x19e>
 800808c:	6121      	str	r1, [r4, #16]
 800808e:	b913      	cbnz	r3, 8008096 <_printf_float+0x18e>
 8008090:	6822      	ldr	r2, [r4, #0]
 8008092:	07d2      	lsls	r2, r2, #31
 8008094:	d502      	bpl.n	800809c <_printf_float+0x194>
 8008096:	3301      	adds	r3, #1
 8008098:	440b      	add	r3, r1
 800809a:	6123      	str	r3, [r4, #16]
 800809c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809e:	65a3      	str	r3, [r4, #88]	; 0x58
 80080a0:	f04f 0900 	mov.w	r9, #0
 80080a4:	e7d9      	b.n	800805a <_printf_float+0x152>
 80080a6:	b913      	cbnz	r3, 80080ae <_printf_float+0x1a6>
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	07d0      	lsls	r0, r2, #31
 80080ac:	d501      	bpl.n	80080b2 <_printf_float+0x1aa>
 80080ae:	3302      	adds	r3, #2
 80080b0:	e7f3      	b.n	800809a <_printf_float+0x192>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e7f1      	b.n	800809a <_printf_float+0x192>
 80080b6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80080ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80080be:	4293      	cmp	r3, r2
 80080c0:	db05      	blt.n	80080ce <_printf_float+0x1c6>
 80080c2:	6822      	ldr	r2, [r4, #0]
 80080c4:	6123      	str	r3, [r4, #16]
 80080c6:	07d1      	lsls	r1, r2, #31
 80080c8:	d5e8      	bpl.n	800809c <_printf_float+0x194>
 80080ca:	3301      	adds	r3, #1
 80080cc:	e7e5      	b.n	800809a <_printf_float+0x192>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	bfd4      	ite	le
 80080d2:	f1c3 0302 	rsble	r3, r3, #2
 80080d6:	2301      	movgt	r3, #1
 80080d8:	4413      	add	r3, r2
 80080da:	e7de      	b.n	800809a <_printf_float+0x192>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	055a      	lsls	r2, r3, #21
 80080e0:	d407      	bmi.n	80080f2 <_printf_float+0x1ea>
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	4642      	mov	r2, r8
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b8      	blx	r7
 80080ec:	3001      	adds	r0, #1
 80080ee:	d12b      	bne.n	8008148 <_printf_float+0x240>
 80080f0:	e767      	b.n	8007fc2 <_printf_float+0xba>
 80080f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80080f6:	f240 80dc 	bls.w	80082b2 <_printf_float+0x3aa>
 80080fa:	2200      	movs	r2, #0
 80080fc:	2300      	movs	r3, #0
 80080fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008102:	f7f8 fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008106:	2800      	cmp	r0, #0
 8008108:	d033      	beq.n	8008172 <_printf_float+0x26a>
 800810a:	2301      	movs	r3, #1
 800810c:	4a41      	ldr	r2, [pc, #260]	; (8008214 <_printf_float+0x30c>)
 800810e:	4631      	mov	r1, r6
 8008110:	4628      	mov	r0, r5
 8008112:	47b8      	blx	r7
 8008114:	3001      	adds	r0, #1
 8008116:	f43f af54 	beq.w	8007fc2 <_printf_float+0xba>
 800811a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800811e:	429a      	cmp	r2, r3
 8008120:	db02      	blt.n	8008128 <_printf_float+0x220>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	07d8      	lsls	r0, r3, #31
 8008126:	d50f      	bpl.n	8008148 <_printf_float+0x240>
 8008128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	f43f af45 	beq.w	8007fc2 <_printf_float+0xba>
 8008138:	f04f 0800 	mov.w	r8, #0
 800813c:	f104 091a 	add.w	r9, r4, #26
 8008140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008142:	3b01      	subs	r3, #1
 8008144:	4543      	cmp	r3, r8
 8008146:	dc09      	bgt.n	800815c <_printf_float+0x254>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	079b      	lsls	r3, r3, #30
 800814c:	f100 8103 	bmi.w	8008356 <_printf_float+0x44e>
 8008150:	68e0      	ldr	r0, [r4, #12]
 8008152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008154:	4298      	cmp	r0, r3
 8008156:	bfb8      	it	lt
 8008158:	4618      	movlt	r0, r3
 800815a:	e734      	b.n	8007fc6 <_printf_float+0xbe>
 800815c:	2301      	movs	r3, #1
 800815e:	464a      	mov	r2, r9
 8008160:	4631      	mov	r1, r6
 8008162:	4628      	mov	r0, r5
 8008164:	47b8      	blx	r7
 8008166:	3001      	adds	r0, #1
 8008168:	f43f af2b 	beq.w	8007fc2 <_printf_float+0xba>
 800816c:	f108 0801 	add.w	r8, r8, #1
 8008170:	e7e6      	b.n	8008140 <_printf_float+0x238>
 8008172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008174:	2b00      	cmp	r3, #0
 8008176:	dc2b      	bgt.n	80081d0 <_printf_float+0x2c8>
 8008178:	2301      	movs	r3, #1
 800817a:	4a26      	ldr	r2, [pc, #152]	; (8008214 <_printf_float+0x30c>)
 800817c:	4631      	mov	r1, r6
 800817e:	4628      	mov	r0, r5
 8008180:	47b8      	blx	r7
 8008182:	3001      	adds	r0, #1
 8008184:	f43f af1d 	beq.w	8007fc2 <_printf_float+0xba>
 8008188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818a:	b923      	cbnz	r3, 8008196 <_printf_float+0x28e>
 800818c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818e:	b913      	cbnz	r3, 8008196 <_printf_float+0x28e>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	07d9      	lsls	r1, r3, #31
 8008194:	d5d8      	bpl.n	8008148 <_printf_float+0x240>
 8008196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800819a:	4631      	mov	r1, r6
 800819c:	4628      	mov	r0, r5
 800819e:	47b8      	blx	r7
 80081a0:	3001      	adds	r0, #1
 80081a2:	f43f af0e 	beq.w	8007fc2 <_printf_float+0xba>
 80081a6:	f04f 0900 	mov.w	r9, #0
 80081aa:	f104 0a1a 	add.w	sl, r4, #26
 80081ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b0:	425b      	negs	r3, r3
 80081b2:	454b      	cmp	r3, r9
 80081b4:	dc01      	bgt.n	80081ba <_printf_float+0x2b2>
 80081b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b8:	e794      	b.n	80080e4 <_printf_float+0x1dc>
 80081ba:	2301      	movs	r3, #1
 80081bc:	4652      	mov	r2, sl
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b8      	blx	r7
 80081c4:	3001      	adds	r0, #1
 80081c6:	f43f aefc 	beq.w	8007fc2 <_printf_float+0xba>
 80081ca:	f109 0901 	add.w	r9, r9, #1
 80081ce:	e7ee      	b.n	80081ae <_printf_float+0x2a6>
 80081d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081d4:	429a      	cmp	r2, r3
 80081d6:	bfa8      	it	ge
 80081d8:	461a      	movge	r2, r3
 80081da:	2a00      	cmp	r2, #0
 80081dc:	4691      	mov	r9, r2
 80081de:	dd07      	ble.n	80081f0 <_printf_float+0x2e8>
 80081e0:	4613      	mov	r3, r2
 80081e2:	4631      	mov	r1, r6
 80081e4:	4642      	mov	r2, r8
 80081e6:	4628      	mov	r0, r5
 80081e8:	47b8      	blx	r7
 80081ea:	3001      	adds	r0, #1
 80081ec:	f43f aee9 	beq.w	8007fc2 <_printf_float+0xba>
 80081f0:	f104 031a 	add.w	r3, r4, #26
 80081f4:	f04f 0b00 	mov.w	fp, #0
 80081f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081fc:	9306      	str	r3, [sp, #24]
 80081fe:	e015      	b.n	800822c <_printf_float+0x324>
 8008200:	7fefffff 	.word	0x7fefffff
 8008204:	0800c68c 	.word	0x0800c68c
 8008208:	0800c688 	.word	0x0800c688
 800820c:	0800c694 	.word	0x0800c694
 8008210:	0800c690 	.word	0x0800c690
 8008214:	0800c698 	.word	0x0800c698
 8008218:	2301      	movs	r3, #1
 800821a:	9a06      	ldr	r2, [sp, #24]
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	f43f aecd 	beq.w	8007fc2 <_printf_float+0xba>
 8008228:	f10b 0b01 	add.w	fp, fp, #1
 800822c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008230:	ebaa 0309 	sub.w	r3, sl, r9
 8008234:	455b      	cmp	r3, fp
 8008236:	dcef      	bgt.n	8008218 <_printf_float+0x310>
 8008238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800823c:	429a      	cmp	r2, r3
 800823e:	44d0      	add	r8, sl
 8008240:	db15      	blt.n	800826e <_printf_float+0x366>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	07da      	lsls	r2, r3, #31
 8008246:	d412      	bmi.n	800826e <_printf_float+0x366>
 8008248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800824c:	eba3 020a 	sub.w	r2, r3, sl
 8008250:	eba3 0a01 	sub.w	sl, r3, r1
 8008254:	4592      	cmp	sl, r2
 8008256:	bfa8      	it	ge
 8008258:	4692      	movge	sl, r2
 800825a:	f1ba 0f00 	cmp.w	sl, #0
 800825e:	dc0e      	bgt.n	800827e <_printf_float+0x376>
 8008260:	f04f 0800 	mov.w	r8, #0
 8008264:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008268:	f104 091a 	add.w	r9, r4, #26
 800826c:	e019      	b.n	80082a2 <_printf_float+0x39a>
 800826e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008272:	4631      	mov	r1, r6
 8008274:	4628      	mov	r0, r5
 8008276:	47b8      	blx	r7
 8008278:	3001      	adds	r0, #1
 800827a:	d1e5      	bne.n	8008248 <_printf_float+0x340>
 800827c:	e6a1      	b.n	8007fc2 <_printf_float+0xba>
 800827e:	4653      	mov	r3, sl
 8008280:	4642      	mov	r2, r8
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	d1e9      	bne.n	8008260 <_printf_float+0x358>
 800828c:	e699      	b.n	8007fc2 <_printf_float+0xba>
 800828e:	2301      	movs	r3, #1
 8008290:	464a      	mov	r2, r9
 8008292:	4631      	mov	r1, r6
 8008294:	4628      	mov	r0, r5
 8008296:	47b8      	blx	r7
 8008298:	3001      	adds	r0, #1
 800829a:	f43f ae92 	beq.w	8007fc2 <_printf_float+0xba>
 800829e:	f108 0801 	add.w	r8, r8, #1
 80082a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	eba3 030a 	sub.w	r3, r3, sl
 80082ac:	4543      	cmp	r3, r8
 80082ae:	dcee      	bgt.n	800828e <_printf_float+0x386>
 80082b0:	e74a      	b.n	8008148 <_printf_float+0x240>
 80082b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b4:	2a01      	cmp	r2, #1
 80082b6:	dc01      	bgt.n	80082bc <_printf_float+0x3b4>
 80082b8:	07db      	lsls	r3, r3, #31
 80082ba:	d53a      	bpl.n	8008332 <_printf_float+0x42a>
 80082bc:	2301      	movs	r3, #1
 80082be:	4642      	mov	r2, r8
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b8      	blx	r7
 80082c6:	3001      	adds	r0, #1
 80082c8:	f43f ae7b 	beq.w	8007fc2 <_printf_float+0xba>
 80082cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082d0:	4631      	mov	r1, r6
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b8      	blx	r7
 80082d6:	3001      	adds	r0, #1
 80082d8:	f108 0801 	add.w	r8, r8, #1
 80082dc:	f43f ae71 	beq.w	8007fc2 <_printf_float+0xba>
 80082e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e2:	2200      	movs	r2, #0
 80082e4:	f103 3aff 	add.w	sl, r3, #4294967295
 80082e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082ec:	2300      	movs	r3, #0
 80082ee:	f7f8 fbeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80082f2:	b9c8      	cbnz	r0, 8008328 <_printf_float+0x420>
 80082f4:	4653      	mov	r3, sl
 80082f6:	4642      	mov	r2, r8
 80082f8:	4631      	mov	r1, r6
 80082fa:	4628      	mov	r0, r5
 80082fc:	47b8      	blx	r7
 80082fe:	3001      	adds	r0, #1
 8008300:	d10e      	bne.n	8008320 <_printf_float+0x418>
 8008302:	e65e      	b.n	8007fc2 <_printf_float+0xba>
 8008304:	2301      	movs	r3, #1
 8008306:	4652      	mov	r2, sl
 8008308:	4631      	mov	r1, r6
 800830a:	4628      	mov	r0, r5
 800830c:	47b8      	blx	r7
 800830e:	3001      	adds	r0, #1
 8008310:	f43f ae57 	beq.w	8007fc2 <_printf_float+0xba>
 8008314:	f108 0801 	add.w	r8, r8, #1
 8008318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800831a:	3b01      	subs	r3, #1
 800831c:	4543      	cmp	r3, r8
 800831e:	dcf1      	bgt.n	8008304 <_printf_float+0x3fc>
 8008320:	464b      	mov	r3, r9
 8008322:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008326:	e6de      	b.n	80080e6 <_printf_float+0x1de>
 8008328:	f04f 0800 	mov.w	r8, #0
 800832c:	f104 0a1a 	add.w	sl, r4, #26
 8008330:	e7f2      	b.n	8008318 <_printf_float+0x410>
 8008332:	2301      	movs	r3, #1
 8008334:	e7df      	b.n	80082f6 <_printf_float+0x3ee>
 8008336:	2301      	movs	r3, #1
 8008338:	464a      	mov	r2, r9
 800833a:	4631      	mov	r1, r6
 800833c:	4628      	mov	r0, r5
 800833e:	47b8      	blx	r7
 8008340:	3001      	adds	r0, #1
 8008342:	f43f ae3e 	beq.w	8007fc2 <_printf_float+0xba>
 8008346:	f108 0801 	add.w	r8, r8, #1
 800834a:	68e3      	ldr	r3, [r4, #12]
 800834c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800834e:	1a9b      	subs	r3, r3, r2
 8008350:	4543      	cmp	r3, r8
 8008352:	dcf0      	bgt.n	8008336 <_printf_float+0x42e>
 8008354:	e6fc      	b.n	8008150 <_printf_float+0x248>
 8008356:	f04f 0800 	mov.w	r8, #0
 800835a:	f104 0919 	add.w	r9, r4, #25
 800835e:	e7f4      	b.n	800834a <_printf_float+0x442>
 8008360:	2900      	cmp	r1, #0
 8008362:	f43f ae8b 	beq.w	800807c <_printf_float+0x174>
 8008366:	2300      	movs	r3, #0
 8008368:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800836c:	ab09      	add	r3, sp, #36	; 0x24
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	ec49 8b10 	vmov	d0, r8, r9
 8008374:	6022      	str	r2, [r4, #0]
 8008376:	f8cd a004 	str.w	sl, [sp, #4]
 800837a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800837e:	4628      	mov	r0, r5
 8008380:	f7ff fd2e 	bl	8007de0 <__cvt>
 8008384:	4680      	mov	r8, r0
 8008386:	e648      	b.n	800801a <_printf_float+0x112>

08008388 <_printf_common>:
 8008388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800838c:	4691      	mov	r9, r2
 800838e:	461f      	mov	r7, r3
 8008390:	688a      	ldr	r2, [r1, #8]
 8008392:	690b      	ldr	r3, [r1, #16]
 8008394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008398:	4293      	cmp	r3, r2
 800839a:	bfb8      	it	lt
 800839c:	4613      	movlt	r3, r2
 800839e:	f8c9 3000 	str.w	r3, [r9]
 80083a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083a6:	4606      	mov	r6, r0
 80083a8:	460c      	mov	r4, r1
 80083aa:	b112      	cbz	r2, 80083b2 <_printf_common+0x2a>
 80083ac:	3301      	adds	r3, #1
 80083ae:	f8c9 3000 	str.w	r3, [r9]
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	0699      	lsls	r1, r3, #26
 80083b6:	bf42      	ittt	mi
 80083b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80083bc:	3302      	addmi	r3, #2
 80083be:	f8c9 3000 	strmi.w	r3, [r9]
 80083c2:	6825      	ldr	r5, [r4, #0]
 80083c4:	f015 0506 	ands.w	r5, r5, #6
 80083c8:	d107      	bne.n	80083da <_printf_common+0x52>
 80083ca:	f104 0a19 	add.w	sl, r4, #25
 80083ce:	68e3      	ldr	r3, [r4, #12]
 80083d0:	f8d9 2000 	ldr.w	r2, [r9]
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	42ab      	cmp	r3, r5
 80083d8:	dc28      	bgt.n	800842c <_printf_common+0xa4>
 80083da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	3300      	adds	r3, #0
 80083e2:	bf18      	it	ne
 80083e4:	2301      	movne	r3, #1
 80083e6:	0692      	lsls	r2, r2, #26
 80083e8:	d42d      	bmi.n	8008446 <_printf_common+0xbe>
 80083ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083ee:	4639      	mov	r1, r7
 80083f0:	4630      	mov	r0, r6
 80083f2:	47c0      	blx	r8
 80083f4:	3001      	adds	r0, #1
 80083f6:	d020      	beq.n	800843a <_printf_common+0xb2>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	68e5      	ldr	r5, [r4, #12]
 80083fc:	f8d9 2000 	ldr.w	r2, [r9]
 8008400:	f003 0306 	and.w	r3, r3, #6
 8008404:	2b04      	cmp	r3, #4
 8008406:	bf08      	it	eq
 8008408:	1aad      	subeq	r5, r5, r2
 800840a:	68a3      	ldr	r3, [r4, #8]
 800840c:	6922      	ldr	r2, [r4, #16]
 800840e:	bf0c      	ite	eq
 8008410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008414:	2500      	movne	r5, #0
 8008416:	4293      	cmp	r3, r2
 8008418:	bfc4      	itt	gt
 800841a:	1a9b      	subgt	r3, r3, r2
 800841c:	18ed      	addgt	r5, r5, r3
 800841e:	f04f 0900 	mov.w	r9, #0
 8008422:	341a      	adds	r4, #26
 8008424:	454d      	cmp	r5, r9
 8008426:	d11a      	bne.n	800845e <_printf_common+0xd6>
 8008428:	2000      	movs	r0, #0
 800842a:	e008      	b.n	800843e <_printf_common+0xb6>
 800842c:	2301      	movs	r3, #1
 800842e:	4652      	mov	r2, sl
 8008430:	4639      	mov	r1, r7
 8008432:	4630      	mov	r0, r6
 8008434:	47c0      	blx	r8
 8008436:	3001      	adds	r0, #1
 8008438:	d103      	bne.n	8008442 <_printf_common+0xba>
 800843a:	f04f 30ff 	mov.w	r0, #4294967295
 800843e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008442:	3501      	adds	r5, #1
 8008444:	e7c3      	b.n	80083ce <_printf_common+0x46>
 8008446:	18e1      	adds	r1, r4, r3
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	2030      	movs	r0, #48	; 0x30
 800844c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008450:	4422      	add	r2, r4
 8008452:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008456:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800845a:	3302      	adds	r3, #2
 800845c:	e7c5      	b.n	80083ea <_printf_common+0x62>
 800845e:	2301      	movs	r3, #1
 8008460:	4622      	mov	r2, r4
 8008462:	4639      	mov	r1, r7
 8008464:	4630      	mov	r0, r6
 8008466:	47c0      	blx	r8
 8008468:	3001      	adds	r0, #1
 800846a:	d0e6      	beq.n	800843a <_printf_common+0xb2>
 800846c:	f109 0901 	add.w	r9, r9, #1
 8008470:	e7d8      	b.n	8008424 <_printf_common+0x9c>
	...

08008474 <_printf_i>:
 8008474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008478:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800847c:	460c      	mov	r4, r1
 800847e:	7e09      	ldrb	r1, [r1, #24]
 8008480:	b085      	sub	sp, #20
 8008482:	296e      	cmp	r1, #110	; 0x6e
 8008484:	4617      	mov	r7, r2
 8008486:	4606      	mov	r6, r0
 8008488:	4698      	mov	r8, r3
 800848a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800848c:	f000 80b3 	beq.w	80085f6 <_printf_i+0x182>
 8008490:	d822      	bhi.n	80084d8 <_printf_i+0x64>
 8008492:	2963      	cmp	r1, #99	; 0x63
 8008494:	d036      	beq.n	8008504 <_printf_i+0x90>
 8008496:	d80a      	bhi.n	80084ae <_printf_i+0x3a>
 8008498:	2900      	cmp	r1, #0
 800849a:	f000 80b9 	beq.w	8008610 <_printf_i+0x19c>
 800849e:	2958      	cmp	r1, #88	; 0x58
 80084a0:	f000 8083 	beq.w	80085aa <_printf_i+0x136>
 80084a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80084ac:	e032      	b.n	8008514 <_printf_i+0xa0>
 80084ae:	2964      	cmp	r1, #100	; 0x64
 80084b0:	d001      	beq.n	80084b6 <_printf_i+0x42>
 80084b2:	2969      	cmp	r1, #105	; 0x69
 80084b4:	d1f6      	bne.n	80084a4 <_printf_i+0x30>
 80084b6:	6820      	ldr	r0, [r4, #0]
 80084b8:	6813      	ldr	r3, [r2, #0]
 80084ba:	0605      	lsls	r5, r0, #24
 80084bc:	f103 0104 	add.w	r1, r3, #4
 80084c0:	d52a      	bpl.n	8008518 <_printf_i+0xa4>
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6011      	str	r1, [r2, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da03      	bge.n	80084d2 <_printf_i+0x5e>
 80084ca:	222d      	movs	r2, #45	; 0x2d
 80084cc:	425b      	negs	r3, r3
 80084ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80084d2:	486f      	ldr	r0, [pc, #444]	; (8008690 <_printf_i+0x21c>)
 80084d4:	220a      	movs	r2, #10
 80084d6:	e039      	b.n	800854c <_printf_i+0xd8>
 80084d8:	2973      	cmp	r1, #115	; 0x73
 80084da:	f000 809d 	beq.w	8008618 <_printf_i+0x1a4>
 80084de:	d808      	bhi.n	80084f2 <_printf_i+0x7e>
 80084e0:	296f      	cmp	r1, #111	; 0x6f
 80084e2:	d020      	beq.n	8008526 <_printf_i+0xb2>
 80084e4:	2970      	cmp	r1, #112	; 0x70
 80084e6:	d1dd      	bne.n	80084a4 <_printf_i+0x30>
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	f043 0320 	orr.w	r3, r3, #32
 80084ee:	6023      	str	r3, [r4, #0]
 80084f0:	e003      	b.n	80084fa <_printf_i+0x86>
 80084f2:	2975      	cmp	r1, #117	; 0x75
 80084f4:	d017      	beq.n	8008526 <_printf_i+0xb2>
 80084f6:	2978      	cmp	r1, #120	; 0x78
 80084f8:	d1d4      	bne.n	80084a4 <_printf_i+0x30>
 80084fa:	2378      	movs	r3, #120	; 0x78
 80084fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008500:	4864      	ldr	r0, [pc, #400]	; (8008694 <_printf_i+0x220>)
 8008502:	e055      	b.n	80085b0 <_printf_i+0x13c>
 8008504:	6813      	ldr	r3, [r2, #0]
 8008506:	1d19      	adds	r1, r3, #4
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6011      	str	r1, [r2, #0]
 800850c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008514:	2301      	movs	r3, #1
 8008516:	e08c      	b.n	8008632 <_printf_i+0x1be>
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6011      	str	r1, [r2, #0]
 800851c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008520:	bf18      	it	ne
 8008522:	b21b      	sxthne	r3, r3
 8008524:	e7cf      	b.n	80084c6 <_printf_i+0x52>
 8008526:	6813      	ldr	r3, [r2, #0]
 8008528:	6825      	ldr	r5, [r4, #0]
 800852a:	1d18      	adds	r0, r3, #4
 800852c:	6010      	str	r0, [r2, #0]
 800852e:	0628      	lsls	r0, r5, #24
 8008530:	d501      	bpl.n	8008536 <_printf_i+0xc2>
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	e002      	b.n	800853c <_printf_i+0xc8>
 8008536:	0668      	lsls	r0, r5, #25
 8008538:	d5fb      	bpl.n	8008532 <_printf_i+0xbe>
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	4854      	ldr	r0, [pc, #336]	; (8008690 <_printf_i+0x21c>)
 800853e:	296f      	cmp	r1, #111	; 0x6f
 8008540:	bf14      	ite	ne
 8008542:	220a      	movne	r2, #10
 8008544:	2208      	moveq	r2, #8
 8008546:	2100      	movs	r1, #0
 8008548:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800854c:	6865      	ldr	r5, [r4, #4]
 800854e:	60a5      	str	r5, [r4, #8]
 8008550:	2d00      	cmp	r5, #0
 8008552:	f2c0 8095 	blt.w	8008680 <_printf_i+0x20c>
 8008556:	6821      	ldr	r1, [r4, #0]
 8008558:	f021 0104 	bic.w	r1, r1, #4
 800855c:	6021      	str	r1, [r4, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d13d      	bne.n	80085de <_printf_i+0x16a>
 8008562:	2d00      	cmp	r5, #0
 8008564:	f040 808e 	bne.w	8008684 <_printf_i+0x210>
 8008568:	4665      	mov	r5, ip
 800856a:	2a08      	cmp	r2, #8
 800856c:	d10b      	bne.n	8008586 <_printf_i+0x112>
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	07db      	lsls	r3, r3, #31
 8008572:	d508      	bpl.n	8008586 <_printf_i+0x112>
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	6862      	ldr	r2, [r4, #4]
 8008578:	429a      	cmp	r2, r3
 800857a:	bfde      	ittt	le
 800857c:	2330      	movle	r3, #48	; 0x30
 800857e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008582:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008586:	ebac 0305 	sub.w	r3, ip, r5
 800858a:	6123      	str	r3, [r4, #16]
 800858c:	f8cd 8000 	str.w	r8, [sp]
 8008590:	463b      	mov	r3, r7
 8008592:	aa03      	add	r2, sp, #12
 8008594:	4621      	mov	r1, r4
 8008596:	4630      	mov	r0, r6
 8008598:	f7ff fef6 	bl	8008388 <_printf_common>
 800859c:	3001      	adds	r0, #1
 800859e:	d14d      	bne.n	800863c <_printf_i+0x1c8>
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	b005      	add	sp, #20
 80085a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085aa:	4839      	ldr	r0, [pc, #228]	; (8008690 <_printf_i+0x21c>)
 80085ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80085b0:	6813      	ldr	r3, [r2, #0]
 80085b2:	6821      	ldr	r1, [r4, #0]
 80085b4:	1d1d      	adds	r5, r3, #4
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6015      	str	r5, [r2, #0]
 80085ba:	060a      	lsls	r2, r1, #24
 80085bc:	d50b      	bpl.n	80085d6 <_printf_i+0x162>
 80085be:	07ca      	lsls	r2, r1, #31
 80085c0:	bf44      	itt	mi
 80085c2:	f041 0120 	orrmi.w	r1, r1, #32
 80085c6:	6021      	strmi	r1, [r4, #0]
 80085c8:	b91b      	cbnz	r3, 80085d2 <_printf_i+0x15e>
 80085ca:	6822      	ldr	r2, [r4, #0]
 80085cc:	f022 0220 	bic.w	r2, r2, #32
 80085d0:	6022      	str	r2, [r4, #0]
 80085d2:	2210      	movs	r2, #16
 80085d4:	e7b7      	b.n	8008546 <_printf_i+0xd2>
 80085d6:	064d      	lsls	r5, r1, #25
 80085d8:	bf48      	it	mi
 80085da:	b29b      	uxthmi	r3, r3
 80085dc:	e7ef      	b.n	80085be <_printf_i+0x14a>
 80085de:	4665      	mov	r5, ip
 80085e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80085e4:	fb02 3311 	mls	r3, r2, r1, r3
 80085e8:	5cc3      	ldrb	r3, [r0, r3]
 80085ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80085ee:	460b      	mov	r3, r1
 80085f0:	2900      	cmp	r1, #0
 80085f2:	d1f5      	bne.n	80085e0 <_printf_i+0x16c>
 80085f4:	e7b9      	b.n	800856a <_printf_i+0xf6>
 80085f6:	6813      	ldr	r3, [r2, #0]
 80085f8:	6825      	ldr	r5, [r4, #0]
 80085fa:	6961      	ldr	r1, [r4, #20]
 80085fc:	1d18      	adds	r0, r3, #4
 80085fe:	6010      	str	r0, [r2, #0]
 8008600:	0628      	lsls	r0, r5, #24
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	d501      	bpl.n	800860a <_printf_i+0x196>
 8008606:	6019      	str	r1, [r3, #0]
 8008608:	e002      	b.n	8008610 <_printf_i+0x19c>
 800860a:	066a      	lsls	r2, r5, #25
 800860c:	d5fb      	bpl.n	8008606 <_printf_i+0x192>
 800860e:	8019      	strh	r1, [r3, #0]
 8008610:	2300      	movs	r3, #0
 8008612:	6123      	str	r3, [r4, #16]
 8008614:	4665      	mov	r5, ip
 8008616:	e7b9      	b.n	800858c <_printf_i+0x118>
 8008618:	6813      	ldr	r3, [r2, #0]
 800861a:	1d19      	adds	r1, r3, #4
 800861c:	6011      	str	r1, [r2, #0]
 800861e:	681d      	ldr	r5, [r3, #0]
 8008620:	6862      	ldr	r2, [r4, #4]
 8008622:	2100      	movs	r1, #0
 8008624:	4628      	mov	r0, r5
 8008626:	f7f7 fdd3 	bl	80001d0 <memchr>
 800862a:	b108      	cbz	r0, 8008630 <_printf_i+0x1bc>
 800862c:	1b40      	subs	r0, r0, r5
 800862e:	6060      	str	r0, [r4, #4]
 8008630:	6863      	ldr	r3, [r4, #4]
 8008632:	6123      	str	r3, [r4, #16]
 8008634:	2300      	movs	r3, #0
 8008636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800863a:	e7a7      	b.n	800858c <_printf_i+0x118>
 800863c:	6923      	ldr	r3, [r4, #16]
 800863e:	462a      	mov	r2, r5
 8008640:	4639      	mov	r1, r7
 8008642:	4630      	mov	r0, r6
 8008644:	47c0      	blx	r8
 8008646:	3001      	adds	r0, #1
 8008648:	d0aa      	beq.n	80085a0 <_printf_i+0x12c>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	079b      	lsls	r3, r3, #30
 800864e:	d413      	bmi.n	8008678 <_printf_i+0x204>
 8008650:	68e0      	ldr	r0, [r4, #12]
 8008652:	9b03      	ldr	r3, [sp, #12]
 8008654:	4298      	cmp	r0, r3
 8008656:	bfb8      	it	lt
 8008658:	4618      	movlt	r0, r3
 800865a:	e7a3      	b.n	80085a4 <_printf_i+0x130>
 800865c:	2301      	movs	r3, #1
 800865e:	464a      	mov	r2, r9
 8008660:	4639      	mov	r1, r7
 8008662:	4630      	mov	r0, r6
 8008664:	47c0      	blx	r8
 8008666:	3001      	adds	r0, #1
 8008668:	d09a      	beq.n	80085a0 <_printf_i+0x12c>
 800866a:	3501      	adds	r5, #1
 800866c:	68e3      	ldr	r3, [r4, #12]
 800866e:	9a03      	ldr	r2, [sp, #12]
 8008670:	1a9b      	subs	r3, r3, r2
 8008672:	42ab      	cmp	r3, r5
 8008674:	dcf2      	bgt.n	800865c <_printf_i+0x1e8>
 8008676:	e7eb      	b.n	8008650 <_printf_i+0x1dc>
 8008678:	2500      	movs	r5, #0
 800867a:	f104 0919 	add.w	r9, r4, #25
 800867e:	e7f5      	b.n	800866c <_printf_i+0x1f8>
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1ac      	bne.n	80085de <_printf_i+0x16a>
 8008684:	7803      	ldrb	r3, [r0, #0]
 8008686:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800868a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800868e:	e76c      	b.n	800856a <_printf_i+0xf6>
 8008690:	0800c69a 	.word	0x0800c69a
 8008694:	0800c6ab 	.word	0x0800c6ab

08008698 <siprintf>:
 8008698:	b40e      	push	{r1, r2, r3}
 800869a:	b500      	push	{lr}
 800869c:	b09c      	sub	sp, #112	; 0x70
 800869e:	ab1d      	add	r3, sp, #116	; 0x74
 80086a0:	9002      	str	r0, [sp, #8]
 80086a2:	9006      	str	r0, [sp, #24]
 80086a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086a8:	4809      	ldr	r0, [pc, #36]	; (80086d0 <siprintf+0x38>)
 80086aa:	9107      	str	r1, [sp, #28]
 80086ac:	9104      	str	r1, [sp, #16]
 80086ae:	4909      	ldr	r1, [pc, #36]	; (80086d4 <siprintf+0x3c>)
 80086b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b4:	9105      	str	r1, [sp, #20]
 80086b6:	6800      	ldr	r0, [r0, #0]
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	a902      	add	r1, sp, #8
 80086bc:	f002 fcfe 	bl	800b0bc <_svfiprintf_r>
 80086c0:	9b02      	ldr	r3, [sp, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	b01c      	add	sp, #112	; 0x70
 80086c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086cc:	b003      	add	sp, #12
 80086ce:	4770      	bx	lr
 80086d0:	20000014 	.word	0x20000014
 80086d4:	ffff0208 	.word	0xffff0208

080086d8 <strchr>:
 80086d8:	b2c9      	uxtb	r1, r1
 80086da:	4603      	mov	r3, r0
 80086dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086e0:	b11a      	cbz	r2, 80086ea <strchr+0x12>
 80086e2:	428a      	cmp	r2, r1
 80086e4:	d1f9      	bne.n	80086da <strchr+0x2>
 80086e6:	4618      	mov	r0, r3
 80086e8:	4770      	bx	lr
 80086ea:	2900      	cmp	r1, #0
 80086ec:	bf18      	it	ne
 80086ee:	2300      	movne	r3, #0
 80086f0:	e7f9      	b.n	80086e6 <strchr+0xe>

080086f2 <strncmp>:
 80086f2:	b510      	push	{r4, lr}
 80086f4:	b16a      	cbz	r2, 8008712 <strncmp+0x20>
 80086f6:	3901      	subs	r1, #1
 80086f8:	1884      	adds	r4, r0, r2
 80086fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80086fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008702:	4293      	cmp	r3, r2
 8008704:	d103      	bne.n	800870e <strncmp+0x1c>
 8008706:	42a0      	cmp	r0, r4
 8008708:	d001      	beq.n	800870e <strncmp+0x1c>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1f5      	bne.n	80086fa <strncmp+0x8>
 800870e:	1a98      	subs	r0, r3, r2
 8008710:	bd10      	pop	{r4, pc}
 8008712:	4610      	mov	r0, r2
 8008714:	e7fc      	b.n	8008710 <strncmp+0x1e>

08008716 <sulp>:
 8008716:	b570      	push	{r4, r5, r6, lr}
 8008718:	4604      	mov	r4, r0
 800871a:	460d      	mov	r5, r1
 800871c:	ec45 4b10 	vmov	d0, r4, r5
 8008720:	4616      	mov	r6, r2
 8008722:	f002 fa87 	bl	800ac34 <__ulp>
 8008726:	ec51 0b10 	vmov	r0, r1, d0
 800872a:	b17e      	cbz	r6, 800874c <sulp+0x36>
 800872c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008730:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008734:	2b00      	cmp	r3, #0
 8008736:	dd09      	ble.n	800874c <sulp+0x36>
 8008738:	051b      	lsls	r3, r3, #20
 800873a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800873e:	2400      	movs	r4, #0
 8008740:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008744:	4622      	mov	r2, r4
 8008746:	462b      	mov	r3, r5
 8008748:	f7f7 ff56 	bl	80005f8 <__aeabi_dmul>
 800874c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008750 <_strtod_l>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	461f      	mov	r7, r3
 8008756:	b0a1      	sub	sp, #132	; 0x84
 8008758:	2300      	movs	r3, #0
 800875a:	4681      	mov	r9, r0
 800875c:	4638      	mov	r0, r7
 800875e:	460e      	mov	r6, r1
 8008760:	9217      	str	r2, [sp, #92]	; 0x5c
 8008762:	931c      	str	r3, [sp, #112]	; 0x70
 8008764:	f001 ff66 	bl	800a634 <__localeconv_l>
 8008768:	4680      	mov	r8, r0
 800876a:	6800      	ldr	r0, [r0, #0]
 800876c:	f7f7 fd80 	bl	8000270 <strlen>
 8008770:	f04f 0a00 	mov.w	sl, #0
 8008774:	4604      	mov	r4, r0
 8008776:	f04f 0b00 	mov.w	fp, #0
 800877a:	961b      	str	r6, [sp, #108]	; 0x6c
 800877c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800877e:	781a      	ldrb	r2, [r3, #0]
 8008780:	2a0d      	cmp	r2, #13
 8008782:	d832      	bhi.n	80087ea <_strtod_l+0x9a>
 8008784:	2a09      	cmp	r2, #9
 8008786:	d236      	bcs.n	80087f6 <_strtod_l+0xa6>
 8008788:	2a00      	cmp	r2, #0
 800878a:	d03e      	beq.n	800880a <_strtod_l+0xba>
 800878c:	2300      	movs	r3, #0
 800878e:	930d      	str	r3, [sp, #52]	; 0x34
 8008790:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008792:	782b      	ldrb	r3, [r5, #0]
 8008794:	2b30      	cmp	r3, #48	; 0x30
 8008796:	f040 80ac 	bne.w	80088f2 <_strtod_l+0x1a2>
 800879a:	786b      	ldrb	r3, [r5, #1]
 800879c:	2b58      	cmp	r3, #88	; 0x58
 800879e:	d001      	beq.n	80087a4 <_strtod_l+0x54>
 80087a0:	2b78      	cmp	r3, #120	; 0x78
 80087a2:	d167      	bne.n	8008874 <_strtod_l+0x124>
 80087a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	ab1c      	add	r3, sp, #112	; 0x70
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	9702      	str	r7, [sp, #8]
 80087ae:	ab1d      	add	r3, sp, #116	; 0x74
 80087b0:	4a88      	ldr	r2, [pc, #544]	; (80089d4 <_strtod_l+0x284>)
 80087b2:	a91b      	add	r1, sp, #108	; 0x6c
 80087b4:	4648      	mov	r0, r9
 80087b6:	f001 fc66 	bl	800a086 <__gethex>
 80087ba:	f010 0407 	ands.w	r4, r0, #7
 80087be:	4606      	mov	r6, r0
 80087c0:	d005      	beq.n	80087ce <_strtod_l+0x7e>
 80087c2:	2c06      	cmp	r4, #6
 80087c4:	d12b      	bne.n	800881e <_strtod_l+0xce>
 80087c6:	3501      	adds	r5, #1
 80087c8:	2300      	movs	r3, #0
 80087ca:	951b      	str	r5, [sp, #108]	; 0x6c
 80087cc:	930d      	str	r3, [sp, #52]	; 0x34
 80087ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f040 859a 	bne.w	800930a <_strtod_l+0xbba>
 80087d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d8:	b1e3      	cbz	r3, 8008814 <_strtod_l+0xc4>
 80087da:	4652      	mov	r2, sl
 80087dc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087e0:	ec43 2b10 	vmov	d0, r2, r3
 80087e4:	b021      	add	sp, #132	; 0x84
 80087e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ea:	2a2b      	cmp	r2, #43	; 0x2b
 80087ec:	d015      	beq.n	800881a <_strtod_l+0xca>
 80087ee:	2a2d      	cmp	r2, #45	; 0x2d
 80087f0:	d004      	beq.n	80087fc <_strtod_l+0xac>
 80087f2:	2a20      	cmp	r2, #32
 80087f4:	d1ca      	bne.n	800878c <_strtod_l+0x3c>
 80087f6:	3301      	adds	r3, #1
 80087f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80087fa:	e7bf      	b.n	800877c <_strtod_l+0x2c>
 80087fc:	2201      	movs	r2, #1
 80087fe:	920d      	str	r2, [sp, #52]	; 0x34
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	921b      	str	r2, [sp, #108]	; 0x6c
 8008804:	785b      	ldrb	r3, [r3, #1]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1c2      	bne.n	8008790 <_strtod_l+0x40>
 800880a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800880c:	961b      	str	r6, [sp, #108]	; 0x6c
 800880e:	2b00      	cmp	r3, #0
 8008810:	f040 8579 	bne.w	8009306 <_strtod_l+0xbb6>
 8008814:	4652      	mov	r2, sl
 8008816:	465b      	mov	r3, fp
 8008818:	e7e2      	b.n	80087e0 <_strtod_l+0x90>
 800881a:	2200      	movs	r2, #0
 800881c:	e7ef      	b.n	80087fe <_strtod_l+0xae>
 800881e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008820:	b13a      	cbz	r2, 8008832 <_strtod_l+0xe2>
 8008822:	2135      	movs	r1, #53	; 0x35
 8008824:	a81e      	add	r0, sp, #120	; 0x78
 8008826:	f002 fafd 	bl	800ae24 <__copybits>
 800882a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800882c:	4648      	mov	r0, r9
 800882e:	f001 ff6a 	bl	800a706 <_Bfree>
 8008832:	3c01      	subs	r4, #1
 8008834:	2c04      	cmp	r4, #4
 8008836:	d806      	bhi.n	8008846 <_strtod_l+0xf6>
 8008838:	e8df f004 	tbb	[pc, r4]
 800883c:	1714030a 	.word	0x1714030a
 8008840:	0a          	.byte	0x0a
 8008841:	00          	.byte	0x00
 8008842:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008846:	0730      	lsls	r0, r6, #28
 8008848:	d5c1      	bpl.n	80087ce <_strtod_l+0x7e>
 800884a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800884e:	e7be      	b.n	80087ce <_strtod_l+0x7e>
 8008850:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008854:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008856:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800885a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800885e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008862:	e7f0      	b.n	8008846 <_strtod_l+0xf6>
 8008864:	f8df b170 	ldr.w	fp, [pc, #368]	; 80089d8 <_strtod_l+0x288>
 8008868:	e7ed      	b.n	8008846 <_strtod_l+0xf6>
 800886a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800886e:	f04f 3aff 	mov.w	sl, #4294967295
 8008872:	e7e8      	b.n	8008846 <_strtod_l+0xf6>
 8008874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	921b      	str	r2, [sp, #108]	; 0x6c
 800887a:	785b      	ldrb	r3, [r3, #1]
 800887c:	2b30      	cmp	r3, #48	; 0x30
 800887e:	d0f9      	beq.n	8008874 <_strtod_l+0x124>
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0a4      	beq.n	80087ce <_strtod_l+0x7e>
 8008884:	2301      	movs	r3, #1
 8008886:	2500      	movs	r5, #0
 8008888:	9306      	str	r3, [sp, #24]
 800888a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800888c:	9308      	str	r3, [sp, #32]
 800888e:	9507      	str	r5, [sp, #28]
 8008890:	9505      	str	r5, [sp, #20]
 8008892:	220a      	movs	r2, #10
 8008894:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008896:	7807      	ldrb	r7, [r0, #0]
 8008898:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800889c:	b2d9      	uxtb	r1, r3
 800889e:	2909      	cmp	r1, #9
 80088a0:	d929      	bls.n	80088f6 <_strtod_l+0x1a6>
 80088a2:	4622      	mov	r2, r4
 80088a4:	f8d8 1000 	ldr.w	r1, [r8]
 80088a8:	f7ff ff23 	bl	80086f2 <strncmp>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d031      	beq.n	8008914 <_strtod_l+0x1c4>
 80088b0:	2000      	movs	r0, #0
 80088b2:	9c05      	ldr	r4, [sp, #20]
 80088b4:	9004      	str	r0, [sp, #16]
 80088b6:	463b      	mov	r3, r7
 80088b8:	4602      	mov	r2, r0
 80088ba:	2b65      	cmp	r3, #101	; 0x65
 80088bc:	d001      	beq.n	80088c2 <_strtod_l+0x172>
 80088be:	2b45      	cmp	r3, #69	; 0x45
 80088c0:	d114      	bne.n	80088ec <_strtod_l+0x19c>
 80088c2:	b924      	cbnz	r4, 80088ce <_strtod_l+0x17e>
 80088c4:	b910      	cbnz	r0, 80088cc <_strtod_l+0x17c>
 80088c6:	9b06      	ldr	r3, [sp, #24]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d09e      	beq.n	800880a <_strtod_l+0xba>
 80088cc:	2400      	movs	r4, #0
 80088ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80088d0:	1c73      	adds	r3, r6, #1
 80088d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80088d4:	7873      	ldrb	r3, [r6, #1]
 80088d6:	2b2b      	cmp	r3, #43	; 0x2b
 80088d8:	d078      	beq.n	80089cc <_strtod_l+0x27c>
 80088da:	2b2d      	cmp	r3, #45	; 0x2d
 80088dc:	d070      	beq.n	80089c0 <_strtod_l+0x270>
 80088de:	f04f 0c00 	mov.w	ip, #0
 80088e2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80088e6:	2f09      	cmp	r7, #9
 80088e8:	d97c      	bls.n	80089e4 <_strtod_l+0x294>
 80088ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80088ec:	f04f 0e00 	mov.w	lr, #0
 80088f0:	e09a      	b.n	8008a28 <_strtod_l+0x2d8>
 80088f2:	2300      	movs	r3, #0
 80088f4:	e7c7      	b.n	8008886 <_strtod_l+0x136>
 80088f6:	9905      	ldr	r1, [sp, #20]
 80088f8:	2908      	cmp	r1, #8
 80088fa:	bfdd      	ittte	le
 80088fc:	9907      	ldrle	r1, [sp, #28]
 80088fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8008902:	9307      	strle	r3, [sp, #28]
 8008904:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008908:	9b05      	ldr	r3, [sp, #20]
 800890a:	3001      	adds	r0, #1
 800890c:	3301      	adds	r3, #1
 800890e:	9305      	str	r3, [sp, #20]
 8008910:	901b      	str	r0, [sp, #108]	; 0x6c
 8008912:	e7bf      	b.n	8008894 <_strtod_l+0x144>
 8008914:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008916:	191a      	adds	r2, r3, r4
 8008918:	921b      	str	r2, [sp, #108]	; 0x6c
 800891a:	9a05      	ldr	r2, [sp, #20]
 800891c:	5d1b      	ldrb	r3, [r3, r4]
 800891e:	2a00      	cmp	r2, #0
 8008920:	d037      	beq.n	8008992 <_strtod_l+0x242>
 8008922:	9c05      	ldr	r4, [sp, #20]
 8008924:	4602      	mov	r2, r0
 8008926:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800892a:	2909      	cmp	r1, #9
 800892c:	d913      	bls.n	8008956 <_strtod_l+0x206>
 800892e:	2101      	movs	r1, #1
 8008930:	9104      	str	r1, [sp, #16]
 8008932:	e7c2      	b.n	80088ba <_strtod_l+0x16a>
 8008934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	921b      	str	r2, [sp, #108]	; 0x6c
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	3001      	adds	r0, #1
 800893e:	2b30      	cmp	r3, #48	; 0x30
 8008940:	d0f8      	beq.n	8008934 <_strtod_l+0x1e4>
 8008942:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008946:	2a08      	cmp	r2, #8
 8008948:	f200 84e4 	bhi.w	8009314 <_strtod_l+0xbc4>
 800894c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800894e:	9208      	str	r2, [sp, #32]
 8008950:	4602      	mov	r2, r0
 8008952:	2000      	movs	r0, #0
 8008954:	4604      	mov	r4, r0
 8008956:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800895a:	f100 0101 	add.w	r1, r0, #1
 800895e:	d012      	beq.n	8008986 <_strtod_l+0x236>
 8008960:	440a      	add	r2, r1
 8008962:	eb00 0c04 	add.w	ip, r0, r4
 8008966:	4621      	mov	r1, r4
 8008968:	270a      	movs	r7, #10
 800896a:	458c      	cmp	ip, r1
 800896c:	d113      	bne.n	8008996 <_strtod_l+0x246>
 800896e:	1821      	adds	r1, r4, r0
 8008970:	2908      	cmp	r1, #8
 8008972:	f104 0401 	add.w	r4, r4, #1
 8008976:	4404      	add	r4, r0
 8008978:	dc19      	bgt.n	80089ae <_strtod_l+0x25e>
 800897a:	9b07      	ldr	r3, [sp, #28]
 800897c:	210a      	movs	r1, #10
 800897e:	fb01 e303 	mla	r3, r1, r3, lr
 8008982:	9307      	str	r3, [sp, #28]
 8008984:	2100      	movs	r1, #0
 8008986:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008988:	1c58      	adds	r0, r3, #1
 800898a:	901b      	str	r0, [sp, #108]	; 0x6c
 800898c:	785b      	ldrb	r3, [r3, #1]
 800898e:	4608      	mov	r0, r1
 8008990:	e7c9      	b.n	8008926 <_strtod_l+0x1d6>
 8008992:	9805      	ldr	r0, [sp, #20]
 8008994:	e7d3      	b.n	800893e <_strtod_l+0x1ee>
 8008996:	2908      	cmp	r1, #8
 8008998:	f101 0101 	add.w	r1, r1, #1
 800899c:	dc03      	bgt.n	80089a6 <_strtod_l+0x256>
 800899e:	9b07      	ldr	r3, [sp, #28]
 80089a0:	437b      	muls	r3, r7
 80089a2:	9307      	str	r3, [sp, #28]
 80089a4:	e7e1      	b.n	800896a <_strtod_l+0x21a>
 80089a6:	2910      	cmp	r1, #16
 80089a8:	bfd8      	it	le
 80089aa:	437d      	mulle	r5, r7
 80089ac:	e7dd      	b.n	800896a <_strtod_l+0x21a>
 80089ae:	2c10      	cmp	r4, #16
 80089b0:	bfdc      	itt	le
 80089b2:	210a      	movle	r1, #10
 80089b4:	fb01 e505 	mlale	r5, r1, r5, lr
 80089b8:	e7e4      	b.n	8008984 <_strtod_l+0x234>
 80089ba:	2301      	movs	r3, #1
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	e781      	b.n	80088c4 <_strtod_l+0x174>
 80089c0:	f04f 0c01 	mov.w	ip, #1
 80089c4:	1cb3      	adds	r3, r6, #2
 80089c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80089c8:	78b3      	ldrb	r3, [r6, #2]
 80089ca:	e78a      	b.n	80088e2 <_strtod_l+0x192>
 80089cc:	f04f 0c00 	mov.w	ip, #0
 80089d0:	e7f8      	b.n	80089c4 <_strtod_l+0x274>
 80089d2:	bf00      	nop
 80089d4:	0800c6bc 	.word	0x0800c6bc
 80089d8:	7ff00000 	.word	0x7ff00000
 80089dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089de:	1c5f      	adds	r7, r3, #1
 80089e0:	971b      	str	r7, [sp, #108]	; 0x6c
 80089e2:	785b      	ldrb	r3, [r3, #1]
 80089e4:	2b30      	cmp	r3, #48	; 0x30
 80089e6:	d0f9      	beq.n	80089dc <_strtod_l+0x28c>
 80089e8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80089ec:	2f08      	cmp	r7, #8
 80089ee:	f63f af7d 	bhi.w	80088ec <_strtod_l+0x19c>
 80089f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80089f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089f8:	930a      	str	r3, [sp, #40]	; 0x28
 80089fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089fc:	1c5f      	adds	r7, r3, #1
 80089fe:	971b      	str	r7, [sp, #108]	; 0x6c
 8008a00:	785b      	ldrb	r3, [r3, #1]
 8008a02:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008a06:	f1b8 0f09 	cmp.w	r8, #9
 8008a0a:	d937      	bls.n	8008a7c <_strtod_l+0x32c>
 8008a0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a0e:	1a7f      	subs	r7, r7, r1
 8008a10:	2f08      	cmp	r7, #8
 8008a12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008a16:	dc37      	bgt.n	8008a88 <_strtod_l+0x338>
 8008a18:	45be      	cmp	lr, r7
 8008a1a:	bfa8      	it	ge
 8008a1c:	46be      	movge	lr, r7
 8008a1e:	f1bc 0f00 	cmp.w	ip, #0
 8008a22:	d001      	beq.n	8008a28 <_strtod_l+0x2d8>
 8008a24:	f1ce 0e00 	rsb	lr, lr, #0
 8008a28:	2c00      	cmp	r4, #0
 8008a2a:	d151      	bne.n	8008ad0 <_strtod_l+0x380>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	f47f aece 	bne.w	80087ce <_strtod_l+0x7e>
 8008a32:	9a06      	ldr	r2, [sp, #24]
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	f47f aeca 	bne.w	80087ce <_strtod_l+0x7e>
 8008a3a:	9a04      	ldr	r2, [sp, #16]
 8008a3c:	2a00      	cmp	r2, #0
 8008a3e:	f47f aee4 	bne.w	800880a <_strtod_l+0xba>
 8008a42:	2b4e      	cmp	r3, #78	; 0x4e
 8008a44:	d027      	beq.n	8008a96 <_strtod_l+0x346>
 8008a46:	dc21      	bgt.n	8008a8c <_strtod_l+0x33c>
 8008a48:	2b49      	cmp	r3, #73	; 0x49
 8008a4a:	f47f aede 	bne.w	800880a <_strtod_l+0xba>
 8008a4e:	49a0      	ldr	r1, [pc, #640]	; (8008cd0 <_strtod_l+0x580>)
 8008a50:	a81b      	add	r0, sp, #108	; 0x6c
 8008a52:	f001 fd4b 	bl	800a4ec <__match>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	f43f aed7 	beq.w	800880a <_strtod_l+0xba>
 8008a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a5e:	499d      	ldr	r1, [pc, #628]	; (8008cd4 <_strtod_l+0x584>)
 8008a60:	3b01      	subs	r3, #1
 8008a62:	a81b      	add	r0, sp, #108	; 0x6c
 8008a64:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a66:	f001 fd41 	bl	800a4ec <__match>
 8008a6a:	b910      	cbnz	r0, 8008a72 <_strtod_l+0x322>
 8008a6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a6e:	3301      	adds	r3, #1
 8008a70:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a72:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008ce8 <_strtod_l+0x598>
 8008a76:	f04f 0a00 	mov.w	sl, #0
 8008a7a:	e6a8      	b.n	80087ce <_strtod_l+0x7e>
 8008a7c:	210a      	movs	r1, #10
 8008a7e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008a82:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008a86:	e7b8      	b.n	80089fa <_strtod_l+0x2aa>
 8008a88:	46be      	mov	lr, r7
 8008a8a:	e7c8      	b.n	8008a1e <_strtod_l+0x2ce>
 8008a8c:	2b69      	cmp	r3, #105	; 0x69
 8008a8e:	d0de      	beq.n	8008a4e <_strtod_l+0x2fe>
 8008a90:	2b6e      	cmp	r3, #110	; 0x6e
 8008a92:	f47f aeba 	bne.w	800880a <_strtod_l+0xba>
 8008a96:	4990      	ldr	r1, [pc, #576]	; (8008cd8 <_strtod_l+0x588>)
 8008a98:	a81b      	add	r0, sp, #108	; 0x6c
 8008a9a:	f001 fd27 	bl	800a4ec <__match>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	f43f aeb3 	beq.w	800880a <_strtod_l+0xba>
 8008aa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b28      	cmp	r3, #40	; 0x28
 8008aaa:	d10e      	bne.n	8008aca <_strtod_l+0x37a>
 8008aac:	aa1e      	add	r2, sp, #120	; 0x78
 8008aae:	498b      	ldr	r1, [pc, #556]	; (8008cdc <_strtod_l+0x58c>)
 8008ab0:	a81b      	add	r0, sp, #108	; 0x6c
 8008ab2:	f001 fd2f 	bl	800a514 <__hexnan>
 8008ab6:	2805      	cmp	r0, #5
 8008ab8:	d107      	bne.n	8008aca <_strtod_l+0x37a>
 8008aba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008abc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008ac0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008ac4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008ac8:	e681      	b.n	80087ce <_strtod_l+0x7e>
 8008aca:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008cf0 <_strtod_l+0x5a0>
 8008ace:	e7d2      	b.n	8008a76 <_strtod_l+0x326>
 8008ad0:	ebae 0302 	sub.w	r3, lr, r2
 8008ad4:	9306      	str	r3, [sp, #24]
 8008ad6:	9b05      	ldr	r3, [sp, #20]
 8008ad8:	9807      	ldr	r0, [sp, #28]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	bf08      	it	eq
 8008ade:	4623      	moveq	r3, r4
 8008ae0:	2c10      	cmp	r4, #16
 8008ae2:	9305      	str	r3, [sp, #20]
 8008ae4:	46a0      	mov	r8, r4
 8008ae6:	bfa8      	it	ge
 8008ae8:	f04f 0810 	movge.w	r8, #16
 8008aec:	f7f7 fd0a 	bl	8000504 <__aeabi_ui2d>
 8008af0:	2c09      	cmp	r4, #9
 8008af2:	4682      	mov	sl, r0
 8008af4:	468b      	mov	fp, r1
 8008af6:	dc13      	bgt.n	8008b20 <_strtod_l+0x3d0>
 8008af8:	9b06      	ldr	r3, [sp, #24]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f43f ae67 	beq.w	80087ce <_strtod_l+0x7e>
 8008b00:	9b06      	ldr	r3, [sp, #24]
 8008b02:	dd7a      	ble.n	8008bfa <_strtod_l+0x4aa>
 8008b04:	2b16      	cmp	r3, #22
 8008b06:	dc61      	bgt.n	8008bcc <_strtod_l+0x47c>
 8008b08:	4a75      	ldr	r2, [pc, #468]	; (8008ce0 <_strtod_l+0x590>)
 8008b0a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008b0e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008b12:	4652      	mov	r2, sl
 8008b14:	465b      	mov	r3, fp
 8008b16:	f7f7 fd6f 	bl	80005f8 <__aeabi_dmul>
 8008b1a:	4682      	mov	sl, r0
 8008b1c:	468b      	mov	fp, r1
 8008b1e:	e656      	b.n	80087ce <_strtod_l+0x7e>
 8008b20:	4b6f      	ldr	r3, [pc, #444]	; (8008ce0 <_strtod_l+0x590>)
 8008b22:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008b26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008b2a:	f7f7 fd65 	bl	80005f8 <__aeabi_dmul>
 8008b2e:	4606      	mov	r6, r0
 8008b30:	4628      	mov	r0, r5
 8008b32:	460f      	mov	r7, r1
 8008b34:	f7f7 fce6 	bl	8000504 <__aeabi_ui2d>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 fba4 	bl	800028c <__adddf3>
 8008b44:	2c0f      	cmp	r4, #15
 8008b46:	4682      	mov	sl, r0
 8008b48:	468b      	mov	fp, r1
 8008b4a:	ddd5      	ble.n	8008af8 <_strtod_l+0x3a8>
 8008b4c:	9b06      	ldr	r3, [sp, #24]
 8008b4e:	eba4 0808 	sub.w	r8, r4, r8
 8008b52:	4498      	add	r8, r3
 8008b54:	f1b8 0f00 	cmp.w	r8, #0
 8008b58:	f340 8096 	ble.w	8008c88 <_strtod_l+0x538>
 8008b5c:	f018 030f 	ands.w	r3, r8, #15
 8008b60:	d00a      	beq.n	8008b78 <_strtod_l+0x428>
 8008b62:	495f      	ldr	r1, [pc, #380]	; (8008ce0 <_strtod_l+0x590>)
 8008b64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b68:	4652      	mov	r2, sl
 8008b6a:	465b      	mov	r3, fp
 8008b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b70:	f7f7 fd42 	bl	80005f8 <__aeabi_dmul>
 8008b74:	4682      	mov	sl, r0
 8008b76:	468b      	mov	fp, r1
 8008b78:	f038 080f 	bics.w	r8, r8, #15
 8008b7c:	d073      	beq.n	8008c66 <_strtod_l+0x516>
 8008b7e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008b82:	dd47      	ble.n	8008c14 <_strtod_l+0x4c4>
 8008b84:	2400      	movs	r4, #0
 8008b86:	46a0      	mov	r8, r4
 8008b88:	9407      	str	r4, [sp, #28]
 8008b8a:	9405      	str	r4, [sp, #20]
 8008b8c:	2322      	movs	r3, #34	; 0x22
 8008b8e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008ce8 <_strtod_l+0x598>
 8008b92:	f8c9 3000 	str.w	r3, [r9]
 8008b96:	f04f 0a00 	mov.w	sl, #0
 8008b9a:	9b07      	ldr	r3, [sp, #28]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f43f ae16 	beq.w	80087ce <_strtod_l+0x7e>
 8008ba2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ba4:	4648      	mov	r0, r9
 8008ba6:	f001 fdae 	bl	800a706 <_Bfree>
 8008baa:	9905      	ldr	r1, [sp, #20]
 8008bac:	4648      	mov	r0, r9
 8008bae:	f001 fdaa 	bl	800a706 <_Bfree>
 8008bb2:	4641      	mov	r1, r8
 8008bb4:	4648      	mov	r0, r9
 8008bb6:	f001 fda6 	bl	800a706 <_Bfree>
 8008bba:	9907      	ldr	r1, [sp, #28]
 8008bbc:	4648      	mov	r0, r9
 8008bbe:	f001 fda2 	bl	800a706 <_Bfree>
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	4648      	mov	r0, r9
 8008bc6:	f001 fd9e 	bl	800a706 <_Bfree>
 8008bca:	e600      	b.n	80087ce <_strtod_l+0x7e>
 8008bcc:	9a06      	ldr	r2, [sp, #24]
 8008bce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	dbba      	blt.n	8008b4c <_strtod_l+0x3fc>
 8008bd6:	4d42      	ldr	r5, [pc, #264]	; (8008ce0 <_strtod_l+0x590>)
 8008bd8:	f1c4 040f 	rsb	r4, r4, #15
 8008bdc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008be0:	4652      	mov	r2, sl
 8008be2:	465b      	mov	r3, fp
 8008be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008be8:	f7f7 fd06 	bl	80005f8 <__aeabi_dmul>
 8008bec:	9b06      	ldr	r3, [sp, #24]
 8008bee:	1b1c      	subs	r4, r3, r4
 8008bf0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008bf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bf8:	e78d      	b.n	8008b16 <_strtod_l+0x3c6>
 8008bfa:	f113 0f16 	cmn.w	r3, #22
 8008bfe:	dba5      	blt.n	8008b4c <_strtod_l+0x3fc>
 8008c00:	4a37      	ldr	r2, [pc, #220]	; (8008ce0 <_strtod_l+0x590>)
 8008c02:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008c06:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008c0a:	4650      	mov	r0, sl
 8008c0c:	4659      	mov	r1, fp
 8008c0e:	f7f7 fe1d 	bl	800084c <__aeabi_ddiv>
 8008c12:	e782      	b.n	8008b1a <_strtod_l+0x3ca>
 8008c14:	2300      	movs	r3, #0
 8008c16:	4e33      	ldr	r6, [pc, #204]	; (8008ce4 <_strtod_l+0x594>)
 8008c18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008c1c:	4650      	mov	r0, sl
 8008c1e:	4659      	mov	r1, fp
 8008c20:	461d      	mov	r5, r3
 8008c22:	f1b8 0f01 	cmp.w	r8, #1
 8008c26:	dc21      	bgt.n	8008c6c <_strtod_l+0x51c>
 8008c28:	b10b      	cbz	r3, 8008c2e <_strtod_l+0x4de>
 8008c2a:	4682      	mov	sl, r0
 8008c2c:	468b      	mov	fp, r1
 8008c2e:	4b2d      	ldr	r3, [pc, #180]	; (8008ce4 <_strtod_l+0x594>)
 8008c30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008c34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008c38:	4652      	mov	r2, sl
 8008c3a:	465b      	mov	r3, fp
 8008c3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008c40:	f7f7 fcda 	bl	80005f8 <__aeabi_dmul>
 8008c44:	4b28      	ldr	r3, [pc, #160]	; (8008ce8 <_strtod_l+0x598>)
 8008c46:	460a      	mov	r2, r1
 8008c48:	400b      	ands	r3, r1
 8008c4a:	4928      	ldr	r1, [pc, #160]	; (8008cec <_strtod_l+0x59c>)
 8008c4c:	428b      	cmp	r3, r1
 8008c4e:	4682      	mov	sl, r0
 8008c50:	d898      	bhi.n	8008b84 <_strtod_l+0x434>
 8008c52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008c56:	428b      	cmp	r3, r1
 8008c58:	bf86      	itte	hi
 8008c5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008cf4 <_strtod_l+0x5a4>
 8008c5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008c62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008c66:	2300      	movs	r3, #0
 8008c68:	9304      	str	r3, [sp, #16]
 8008c6a:	e077      	b.n	8008d5c <_strtod_l+0x60c>
 8008c6c:	f018 0f01 	tst.w	r8, #1
 8008c70:	d006      	beq.n	8008c80 <_strtod_l+0x530>
 8008c72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	f7f7 fcbd 	bl	80005f8 <__aeabi_dmul>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	3501      	adds	r5, #1
 8008c82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c86:	e7cc      	b.n	8008c22 <_strtod_l+0x4d2>
 8008c88:	d0ed      	beq.n	8008c66 <_strtod_l+0x516>
 8008c8a:	f1c8 0800 	rsb	r8, r8, #0
 8008c8e:	f018 020f 	ands.w	r2, r8, #15
 8008c92:	d00a      	beq.n	8008caa <_strtod_l+0x55a>
 8008c94:	4b12      	ldr	r3, [pc, #72]	; (8008ce0 <_strtod_l+0x590>)
 8008c96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c9a:	4650      	mov	r0, sl
 8008c9c:	4659      	mov	r1, fp
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fdd3 	bl	800084c <__aeabi_ddiv>
 8008ca6:	4682      	mov	sl, r0
 8008ca8:	468b      	mov	fp, r1
 8008caa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008cae:	d0da      	beq.n	8008c66 <_strtod_l+0x516>
 8008cb0:	f1b8 0f1f 	cmp.w	r8, #31
 8008cb4:	dd20      	ble.n	8008cf8 <_strtod_l+0x5a8>
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	46a0      	mov	r8, r4
 8008cba:	9407      	str	r4, [sp, #28]
 8008cbc:	9405      	str	r4, [sp, #20]
 8008cbe:	2322      	movs	r3, #34	; 0x22
 8008cc0:	f04f 0a00 	mov.w	sl, #0
 8008cc4:	f04f 0b00 	mov.w	fp, #0
 8008cc8:	f8c9 3000 	str.w	r3, [r9]
 8008ccc:	e765      	b.n	8008b9a <_strtod_l+0x44a>
 8008cce:	bf00      	nop
 8008cd0:	0800c68d 	.word	0x0800c68d
 8008cd4:	0800c713 	.word	0x0800c713
 8008cd8:	0800c695 	.word	0x0800c695
 8008cdc:	0800c6d0 	.word	0x0800c6d0
 8008ce0:	0800c750 	.word	0x0800c750
 8008ce4:	0800c728 	.word	0x0800c728
 8008ce8:	7ff00000 	.word	0x7ff00000
 8008cec:	7ca00000 	.word	0x7ca00000
 8008cf0:	fff80000 	.word	0xfff80000
 8008cf4:	7fefffff 	.word	0x7fefffff
 8008cf8:	f018 0310 	ands.w	r3, r8, #16
 8008cfc:	bf18      	it	ne
 8008cfe:	236a      	movne	r3, #106	; 0x6a
 8008d00:	4da0      	ldr	r5, [pc, #640]	; (8008f84 <_strtod_l+0x834>)
 8008d02:	9304      	str	r3, [sp, #16]
 8008d04:	4650      	mov	r0, sl
 8008d06:	4659      	mov	r1, fp
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f1b8 0f00 	cmp.w	r8, #0
 8008d0e:	f300 810a 	bgt.w	8008f26 <_strtod_l+0x7d6>
 8008d12:	b10b      	cbz	r3, 8008d18 <_strtod_l+0x5c8>
 8008d14:	4682      	mov	sl, r0
 8008d16:	468b      	mov	fp, r1
 8008d18:	9b04      	ldr	r3, [sp, #16]
 8008d1a:	b1bb      	cbz	r3, 8008d4c <_strtod_l+0x5fc>
 8008d1c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008d20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	4659      	mov	r1, fp
 8008d28:	dd10      	ble.n	8008d4c <_strtod_l+0x5fc>
 8008d2a:	2b1f      	cmp	r3, #31
 8008d2c:	f340 8107 	ble.w	8008f3e <_strtod_l+0x7ee>
 8008d30:	2b34      	cmp	r3, #52	; 0x34
 8008d32:	bfde      	ittt	le
 8008d34:	3b20      	suble	r3, #32
 8008d36:	f04f 32ff 	movle.w	r2, #4294967295
 8008d3a:	fa02 f303 	lslle.w	r3, r2, r3
 8008d3e:	f04f 0a00 	mov.w	sl, #0
 8008d42:	bfcc      	ite	gt
 8008d44:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008d48:	ea03 0b01 	andle.w	fp, r3, r1
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2300      	movs	r3, #0
 8008d50:	4650      	mov	r0, sl
 8008d52:	4659      	mov	r1, fp
 8008d54:	f7f7 feb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d1ac      	bne.n	8008cb6 <_strtod_l+0x566>
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	9a05      	ldr	r2, [sp, #20]
 8008d62:	9908      	ldr	r1, [sp, #32]
 8008d64:	4623      	mov	r3, r4
 8008d66:	4648      	mov	r0, r9
 8008d68:	f001 fd1f 	bl	800a7aa <__s2b>
 8008d6c:	9007      	str	r0, [sp, #28]
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	f43f af08 	beq.w	8008b84 <_strtod_l+0x434>
 8008d74:	9a06      	ldr	r2, [sp, #24]
 8008d76:	9b06      	ldr	r3, [sp, #24]
 8008d78:	2a00      	cmp	r2, #0
 8008d7a:	f1c3 0300 	rsb	r3, r3, #0
 8008d7e:	bfa8      	it	ge
 8008d80:	2300      	movge	r3, #0
 8008d82:	930e      	str	r3, [sp, #56]	; 0x38
 8008d84:	2400      	movs	r4, #0
 8008d86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008d8a:	9316      	str	r3, [sp, #88]	; 0x58
 8008d8c:	46a0      	mov	r8, r4
 8008d8e:	9b07      	ldr	r3, [sp, #28]
 8008d90:	4648      	mov	r0, r9
 8008d92:	6859      	ldr	r1, [r3, #4]
 8008d94:	f001 fc83 	bl	800a69e <_Balloc>
 8008d98:	9005      	str	r0, [sp, #20]
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	f43f aef6 	beq.w	8008b8c <_strtod_l+0x43c>
 8008da0:	9b07      	ldr	r3, [sp, #28]
 8008da2:	691a      	ldr	r2, [r3, #16]
 8008da4:	3202      	adds	r2, #2
 8008da6:	f103 010c 	add.w	r1, r3, #12
 8008daa:	0092      	lsls	r2, r2, #2
 8008dac:	300c      	adds	r0, #12
 8008dae:	f001 fc6b 	bl	800a688 <memcpy>
 8008db2:	aa1e      	add	r2, sp, #120	; 0x78
 8008db4:	a91d      	add	r1, sp, #116	; 0x74
 8008db6:	ec4b ab10 	vmov	d0, sl, fp
 8008dba:	4648      	mov	r0, r9
 8008dbc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008dc0:	f001 ffae 	bl	800ad20 <__d2b>
 8008dc4:	901c      	str	r0, [sp, #112]	; 0x70
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f43f aee0 	beq.w	8008b8c <_strtod_l+0x43c>
 8008dcc:	2101      	movs	r1, #1
 8008dce:	4648      	mov	r0, r9
 8008dd0:	f001 fd77 	bl	800a8c2 <__i2b>
 8008dd4:	4680      	mov	r8, r0
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f43f aed8 	beq.w	8008b8c <_strtod_l+0x43c>
 8008ddc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008dde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008de0:	2e00      	cmp	r6, #0
 8008de2:	bfab      	itete	ge
 8008de4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008de6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008de8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008dea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008dec:	bfac      	ite	ge
 8008dee:	18f7      	addge	r7, r6, r3
 8008df0:	1b9d      	sublt	r5, r3, r6
 8008df2:	9b04      	ldr	r3, [sp, #16]
 8008df4:	1af6      	subs	r6, r6, r3
 8008df6:	4416      	add	r6, r2
 8008df8:	4b63      	ldr	r3, [pc, #396]	; (8008f88 <_strtod_l+0x838>)
 8008dfa:	3e01      	subs	r6, #1
 8008dfc:	429e      	cmp	r6, r3
 8008dfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e02:	f280 80af 	bge.w	8008f64 <_strtod_l+0x814>
 8008e06:	1b9b      	subs	r3, r3, r6
 8008e08:	2b1f      	cmp	r3, #31
 8008e0a:	eba2 0203 	sub.w	r2, r2, r3
 8008e0e:	f04f 0101 	mov.w	r1, #1
 8008e12:	f300 809b 	bgt.w	8008f4c <_strtod_l+0x7fc>
 8008e16:	fa01 f303 	lsl.w	r3, r1, r3
 8008e1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e20:	18be      	adds	r6, r7, r2
 8008e22:	9b04      	ldr	r3, [sp, #16]
 8008e24:	42b7      	cmp	r7, r6
 8008e26:	4415      	add	r5, r2
 8008e28:	441d      	add	r5, r3
 8008e2a:	463b      	mov	r3, r7
 8008e2c:	bfa8      	it	ge
 8008e2e:	4633      	movge	r3, r6
 8008e30:	42ab      	cmp	r3, r5
 8008e32:	bfa8      	it	ge
 8008e34:	462b      	movge	r3, r5
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfc2      	ittt	gt
 8008e3a:	1af6      	subgt	r6, r6, r3
 8008e3c:	1aed      	subgt	r5, r5, r3
 8008e3e:	1aff      	subgt	r7, r7, r3
 8008e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e42:	b1bb      	cbz	r3, 8008e74 <_strtod_l+0x724>
 8008e44:	4641      	mov	r1, r8
 8008e46:	461a      	mov	r2, r3
 8008e48:	4648      	mov	r0, r9
 8008e4a:	f001 fdd9 	bl	800aa00 <__pow5mult>
 8008e4e:	4680      	mov	r8, r0
 8008e50:	2800      	cmp	r0, #0
 8008e52:	f43f ae9b 	beq.w	8008b8c <_strtod_l+0x43c>
 8008e56:	4601      	mov	r1, r0
 8008e58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008e5a:	4648      	mov	r0, r9
 8008e5c:	f001 fd3a 	bl	800a8d4 <__multiply>
 8008e60:	900c      	str	r0, [sp, #48]	; 0x30
 8008e62:	2800      	cmp	r0, #0
 8008e64:	f43f ae92 	beq.w	8008b8c <_strtod_l+0x43c>
 8008e68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008e6a:	4648      	mov	r0, r9
 8008e6c:	f001 fc4b 	bl	800a706 <_Bfree>
 8008e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e72:	931c      	str	r3, [sp, #112]	; 0x70
 8008e74:	2e00      	cmp	r6, #0
 8008e76:	dc7a      	bgt.n	8008f6e <_strtod_l+0x81e>
 8008e78:	9b06      	ldr	r3, [sp, #24]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	dd08      	ble.n	8008e90 <_strtod_l+0x740>
 8008e7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e80:	9905      	ldr	r1, [sp, #20]
 8008e82:	4648      	mov	r0, r9
 8008e84:	f001 fdbc 	bl	800aa00 <__pow5mult>
 8008e88:	9005      	str	r0, [sp, #20]
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	f43f ae7e 	beq.w	8008b8c <_strtod_l+0x43c>
 8008e90:	2d00      	cmp	r5, #0
 8008e92:	dd08      	ble.n	8008ea6 <_strtod_l+0x756>
 8008e94:	462a      	mov	r2, r5
 8008e96:	9905      	ldr	r1, [sp, #20]
 8008e98:	4648      	mov	r0, r9
 8008e9a:	f001 fdff 	bl	800aa9c <__lshift>
 8008e9e:	9005      	str	r0, [sp, #20]
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	f43f ae73 	beq.w	8008b8c <_strtod_l+0x43c>
 8008ea6:	2f00      	cmp	r7, #0
 8008ea8:	dd08      	ble.n	8008ebc <_strtod_l+0x76c>
 8008eaa:	4641      	mov	r1, r8
 8008eac:	463a      	mov	r2, r7
 8008eae:	4648      	mov	r0, r9
 8008eb0:	f001 fdf4 	bl	800aa9c <__lshift>
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f43f ae68 	beq.w	8008b8c <_strtod_l+0x43c>
 8008ebc:	9a05      	ldr	r2, [sp, #20]
 8008ebe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ec0:	4648      	mov	r0, r9
 8008ec2:	f001 fe59 	bl	800ab78 <__mdiff>
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	f43f ae5f 	beq.w	8008b8c <_strtod_l+0x43c>
 8008ece:	68c3      	ldr	r3, [r0, #12]
 8008ed0:	930c      	str	r3, [sp, #48]	; 0x30
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60c3      	str	r3, [r0, #12]
 8008ed6:	4641      	mov	r1, r8
 8008ed8:	f001 fe34 	bl	800ab44 <__mcmp>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	da55      	bge.n	8008f8c <_strtod_l+0x83c>
 8008ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ee2:	b9e3      	cbnz	r3, 8008f1e <_strtod_l+0x7ce>
 8008ee4:	f1ba 0f00 	cmp.w	sl, #0
 8008ee8:	d119      	bne.n	8008f1e <_strtod_l+0x7ce>
 8008eea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008eee:	b9b3      	cbnz	r3, 8008f1e <_strtod_l+0x7ce>
 8008ef0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ef4:	0d1b      	lsrs	r3, r3, #20
 8008ef6:	051b      	lsls	r3, r3, #20
 8008ef8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008efc:	d90f      	bls.n	8008f1e <_strtod_l+0x7ce>
 8008efe:	6963      	ldr	r3, [r4, #20]
 8008f00:	b913      	cbnz	r3, 8008f08 <_strtod_l+0x7b8>
 8008f02:	6923      	ldr	r3, [r4, #16]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	dd0a      	ble.n	8008f1e <_strtod_l+0x7ce>
 8008f08:	4621      	mov	r1, r4
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	4648      	mov	r0, r9
 8008f0e:	f001 fdc5 	bl	800aa9c <__lshift>
 8008f12:	4641      	mov	r1, r8
 8008f14:	4604      	mov	r4, r0
 8008f16:	f001 fe15 	bl	800ab44 <__mcmp>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	dc67      	bgt.n	8008fee <_strtod_l+0x89e>
 8008f1e:	9b04      	ldr	r3, [sp, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d171      	bne.n	8009008 <_strtod_l+0x8b8>
 8008f24:	e63d      	b.n	8008ba2 <_strtod_l+0x452>
 8008f26:	f018 0f01 	tst.w	r8, #1
 8008f2a:	d004      	beq.n	8008f36 <_strtod_l+0x7e6>
 8008f2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f30:	f7f7 fb62 	bl	80005f8 <__aeabi_dmul>
 8008f34:	2301      	movs	r3, #1
 8008f36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f3a:	3508      	adds	r5, #8
 8008f3c:	e6e5      	b.n	8008d0a <_strtod_l+0x5ba>
 8008f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f42:	fa02 f303 	lsl.w	r3, r2, r3
 8008f46:	ea03 0a0a 	and.w	sl, r3, sl
 8008f4a:	e6ff      	b.n	8008d4c <_strtod_l+0x5fc>
 8008f4c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008f50:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008f54:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008f58:	36e2      	adds	r6, #226	; 0xe2
 8008f5a:	fa01 f306 	lsl.w	r3, r1, r6
 8008f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f60:	910f      	str	r1, [sp, #60]	; 0x3c
 8008f62:	e75d      	b.n	8008e20 <_strtod_l+0x6d0>
 8008f64:	2300      	movs	r3, #0
 8008f66:	930a      	str	r3, [sp, #40]	; 0x28
 8008f68:	2301      	movs	r3, #1
 8008f6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f6c:	e758      	b.n	8008e20 <_strtod_l+0x6d0>
 8008f6e:	4632      	mov	r2, r6
 8008f70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008f72:	4648      	mov	r0, r9
 8008f74:	f001 fd92 	bl	800aa9c <__lshift>
 8008f78:	901c      	str	r0, [sp, #112]	; 0x70
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f47f af7c 	bne.w	8008e78 <_strtod_l+0x728>
 8008f80:	e604      	b.n	8008b8c <_strtod_l+0x43c>
 8008f82:	bf00      	nop
 8008f84:	0800c6e8 	.word	0x0800c6e8
 8008f88:	fffffc02 	.word	0xfffffc02
 8008f8c:	465d      	mov	r5, fp
 8008f8e:	f040 8086 	bne.w	800909e <_strtod_l+0x94e>
 8008f92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f98:	b32a      	cbz	r2, 8008fe6 <_strtod_l+0x896>
 8008f9a:	4aaf      	ldr	r2, [pc, #700]	; (8009258 <_strtod_l+0xb08>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d153      	bne.n	8009048 <_strtod_l+0x8f8>
 8008fa0:	9b04      	ldr	r3, [sp, #16]
 8008fa2:	4650      	mov	r0, sl
 8008fa4:	b1d3      	cbz	r3, 8008fdc <_strtod_l+0x88c>
 8008fa6:	4aad      	ldr	r2, [pc, #692]	; (800925c <_strtod_l+0xb0c>)
 8008fa8:	402a      	ands	r2, r5
 8008faa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008fae:	f04f 31ff 	mov.w	r1, #4294967295
 8008fb2:	d816      	bhi.n	8008fe2 <_strtod_l+0x892>
 8008fb4:	0d12      	lsrs	r2, r2, #20
 8008fb6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008fba:	fa01 f303 	lsl.w	r3, r1, r3
 8008fbe:	4298      	cmp	r0, r3
 8008fc0:	d142      	bne.n	8009048 <_strtod_l+0x8f8>
 8008fc2:	4ba7      	ldr	r3, [pc, #668]	; (8009260 <_strtod_l+0xb10>)
 8008fc4:	429d      	cmp	r5, r3
 8008fc6:	d102      	bne.n	8008fce <_strtod_l+0x87e>
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f43f addf 	beq.w	8008b8c <_strtod_l+0x43c>
 8008fce:	4ba3      	ldr	r3, [pc, #652]	; (800925c <_strtod_l+0xb0c>)
 8008fd0:	402b      	ands	r3, r5
 8008fd2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008fd6:	f04f 0a00 	mov.w	sl, #0
 8008fda:	e7a0      	b.n	8008f1e <_strtod_l+0x7ce>
 8008fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe0:	e7ed      	b.n	8008fbe <_strtod_l+0x86e>
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	e7eb      	b.n	8008fbe <_strtod_l+0x86e>
 8008fe6:	bb7b      	cbnz	r3, 8009048 <_strtod_l+0x8f8>
 8008fe8:	f1ba 0f00 	cmp.w	sl, #0
 8008fec:	d12c      	bne.n	8009048 <_strtod_l+0x8f8>
 8008fee:	9904      	ldr	r1, [sp, #16]
 8008ff0:	4a9a      	ldr	r2, [pc, #616]	; (800925c <_strtod_l+0xb0c>)
 8008ff2:	465b      	mov	r3, fp
 8008ff4:	b1f1      	cbz	r1, 8009034 <_strtod_l+0x8e4>
 8008ff6:	ea02 010b 	and.w	r1, r2, fp
 8008ffa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008ffe:	dc19      	bgt.n	8009034 <_strtod_l+0x8e4>
 8009000:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009004:	f77f ae5b 	ble.w	8008cbe <_strtod_l+0x56e>
 8009008:	4a96      	ldr	r2, [pc, #600]	; (8009264 <_strtod_l+0xb14>)
 800900a:	2300      	movs	r3, #0
 800900c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009010:	4650      	mov	r0, sl
 8009012:	4659      	mov	r1, fp
 8009014:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	4682      	mov	sl, r0
 800901e:	468b      	mov	fp, r1
 8009020:	2900      	cmp	r1, #0
 8009022:	f47f adbe 	bne.w	8008ba2 <_strtod_l+0x452>
 8009026:	2800      	cmp	r0, #0
 8009028:	f47f adbb 	bne.w	8008ba2 <_strtod_l+0x452>
 800902c:	2322      	movs	r3, #34	; 0x22
 800902e:	f8c9 3000 	str.w	r3, [r9]
 8009032:	e5b6      	b.n	8008ba2 <_strtod_l+0x452>
 8009034:	4013      	ands	r3, r2
 8009036:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800903a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800903e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009042:	f04f 3aff 	mov.w	sl, #4294967295
 8009046:	e76a      	b.n	8008f1e <_strtod_l+0x7ce>
 8009048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800904a:	b193      	cbz	r3, 8009072 <_strtod_l+0x922>
 800904c:	422b      	tst	r3, r5
 800904e:	f43f af66 	beq.w	8008f1e <_strtod_l+0x7ce>
 8009052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009054:	9a04      	ldr	r2, [sp, #16]
 8009056:	4650      	mov	r0, sl
 8009058:	4659      	mov	r1, fp
 800905a:	b173      	cbz	r3, 800907a <_strtod_l+0x92a>
 800905c:	f7ff fb5b 	bl	8008716 <sulp>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009068:	f7f7 f910 	bl	800028c <__adddf3>
 800906c:	4682      	mov	sl, r0
 800906e:	468b      	mov	fp, r1
 8009070:	e755      	b.n	8008f1e <_strtod_l+0x7ce>
 8009072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009074:	ea13 0f0a 	tst.w	r3, sl
 8009078:	e7e9      	b.n	800904e <_strtod_l+0x8fe>
 800907a:	f7ff fb4c 	bl	8008716 <sulp>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009086:	f7f7 f8ff 	bl	8000288 <__aeabi_dsub>
 800908a:	2200      	movs	r2, #0
 800908c:	2300      	movs	r3, #0
 800908e:	4682      	mov	sl, r0
 8009090:	468b      	mov	fp, r1
 8009092:	f7f7 fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 8009096:	2800      	cmp	r0, #0
 8009098:	f47f ae11 	bne.w	8008cbe <_strtod_l+0x56e>
 800909c:	e73f      	b.n	8008f1e <_strtod_l+0x7ce>
 800909e:	4641      	mov	r1, r8
 80090a0:	4620      	mov	r0, r4
 80090a2:	f001 fe8c 	bl	800adbe <__ratio>
 80090a6:	ec57 6b10 	vmov	r6, r7, d0
 80090aa:	2200      	movs	r2, #0
 80090ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090b0:	ee10 0a10 	vmov	r0, s0
 80090b4:	4639      	mov	r1, r7
 80090b6:	f7f7 fd1b 	bl	8000af0 <__aeabi_dcmple>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d077      	beq.n	80091ae <_strtod_l+0xa5e>
 80090be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d04a      	beq.n	800915a <_strtod_l+0xa0a>
 80090c4:	4b68      	ldr	r3, [pc, #416]	; (8009268 <_strtod_l+0xb18>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80090cc:	4f66      	ldr	r7, [pc, #408]	; (8009268 <_strtod_l+0xb18>)
 80090ce:	2600      	movs	r6, #0
 80090d0:	4b62      	ldr	r3, [pc, #392]	; (800925c <_strtod_l+0xb0c>)
 80090d2:	402b      	ands	r3, r5
 80090d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80090d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090d8:	4b64      	ldr	r3, [pc, #400]	; (800926c <_strtod_l+0xb1c>)
 80090da:	429a      	cmp	r2, r3
 80090dc:	f040 80ce 	bne.w	800927c <_strtod_l+0xb2c>
 80090e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80090e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090e8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80090ec:	ec4b ab10 	vmov	d0, sl, fp
 80090f0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80090f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80090f8:	f001 fd9c 	bl	800ac34 <__ulp>
 80090fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009100:	ec53 2b10 	vmov	r2, r3, d0
 8009104:	f7f7 fa78 	bl	80005f8 <__aeabi_dmul>
 8009108:	4652      	mov	r2, sl
 800910a:	465b      	mov	r3, fp
 800910c:	f7f7 f8be 	bl	800028c <__adddf3>
 8009110:	460b      	mov	r3, r1
 8009112:	4952      	ldr	r1, [pc, #328]	; (800925c <_strtod_l+0xb0c>)
 8009114:	4a56      	ldr	r2, [pc, #344]	; (8009270 <_strtod_l+0xb20>)
 8009116:	4019      	ands	r1, r3
 8009118:	4291      	cmp	r1, r2
 800911a:	4682      	mov	sl, r0
 800911c:	d95b      	bls.n	80091d6 <_strtod_l+0xa86>
 800911e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009120:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009124:	4293      	cmp	r3, r2
 8009126:	d103      	bne.n	8009130 <_strtod_l+0x9e0>
 8009128:	9b08      	ldr	r3, [sp, #32]
 800912a:	3301      	adds	r3, #1
 800912c:	f43f ad2e 	beq.w	8008b8c <_strtod_l+0x43c>
 8009130:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009260 <_strtod_l+0xb10>
 8009134:	f04f 3aff 	mov.w	sl, #4294967295
 8009138:	991c      	ldr	r1, [sp, #112]	; 0x70
 800913a:	4648      	mov	r0, r9
 800913c:	f001 fae3 	bl	800a706 <_Bfree>
 8009140:	9905      	ldr	r1, [sp, #20]
 8009142:	4648      	mov	r0, r9
 8009144:	f001 fadf 	bl	800a706 <_Bfree>
 8009148:	4641      	mov	r1, r8
 800914a:	4648      	mov	r0, r9
 800914c:	f001 fadb 	bl	800a706 <_Bfree>
 8009150:	4621      	mov	r1, r4
 8009152:	4648      	mov	r0, r9
 8009154:	f001 fad7 	bl	800a706 <_Bfree>
 8009158:	e619      	b.n	8008d8e <_strtod_l+0x63e>
 800915a:	f1ba 0f00 	cmp.w	sl, #0
 800915e:	d11a      	bne.n	8009196 <_strtod_l+0xa46>
 8009160:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009164:	b9eb      	cbnz	r3, 80091a2 <_strtod_l+0xa52>
 8009166:	2200      	movs	r2, #0
 8009168:	4b3f      	ldr	r3, [pc, #252]	; (8009268 <_strtod_l+0xb18>)
 800916a:	4630      	mov	r0, r6
 800916c:	4639      	mov	r1, r7
 800916e:	f7f7 fcb5 	bl	8000adc <__aeabi_dcmplt>
 8009172:	b9c8      	cbnz	r0, 80091a8 <_strtod_l+0xa58>
 8009174:	4630      	mov	r0, r6
 8009176:	4639      	mov	r1, r7
 8009178:	2200      	movs	r2, #0
 800917a:	4b3e      	ldr	r3, [pc, #248]	; (8009274 <_strtod_l+0xb24>)
 800917c:	f7f7 fa3c 	bl	80005f8 <__aeabi_dmul>
 8009180:	4606      	mov	r6, r0
 8009182:	460f      	mov	r7, r1
 8009184:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009188:	9618      	str	r6, [sp, #96]	; 0x60
 800918a:	9319      	str	r3, [sp, #100]	; 0x64
 800918c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009190:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009194:	e79c      	b.n	80090d0 <_strtod_l+0x980>
 8009196:	f1ba 0f01 	cmp.w	sl, #1
 800919a:	d102      	bne.n	80091a2 <_strtod_l+0xa52>
 800919c:	2d00      	cmp	r5, #0
 800919e:	f43f ad8e 	beq.w	8008cbe <_strtod_l+0x56e>
 80091a2:	2200      	movs	r2, #0
 80091a4:	4b34      	ldr	r3, [pc, #208]	; (8009278 <_strtod_l+0xb28>)
 80091a6:	e78f      	b.n	80090c8 <_strtod_l+0x978>
 80091a8:	2600      	movs	r6, #0
 80091aa:	4f32      	ldr	r7, [pc, #200]	; (8009274 <_strtod_l+0xb24>)
 80091ac:	e7ea      	b.n	8009184 <_strtod_l+0xa34>
 80091ae:	4b31      	ldr	r3, [pc, #196]	; (8009274 <_strtod_l+0xb24>)
 80091b0:	4630      	mov	r0, r6
 80091b2:	4639      	mov	r1, r7
 80091b4:	2200      	movs	r2, #0
 80091b6:	f7f7 fa1f 	bl	80005f8 <__aeabi_dmul>
 80091ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091bc:	4606      	mov	r6, r0
 80091be:	460f      	mov	r7, r1
 80091c0:	b933      	cbnz	r3, 80091d0 <_strtod_l+0xa80>
 80091c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091c6:	9010      	str	r0, [sp, #64]	; 0x40
 80091c8:	9311      	str	r3, [sp, #68]	; 0x44
 80091ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091ce:	e7df      	b.n	8009190 <_strtod_l+0xa40>
 80091d0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80091d4:	e7f9      	b.n	80091ca <_strtod_l+0xa7a>
 80091d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80091da:	9b04      	ldr	r3, [sp, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1ab      	bne.n	8009138 <_strtod_l+0x9e8>
 80091e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091e4:	0d1b      	lsrs	r3, r3, #20
 80091e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091e8:	051b      	lsls	r3, r3, #20
 80091ea:	429a      	cmp	r2, r3
 80091ec:	465d      	mov	r5, fp
 80091ee:	d1a3      	bne.n	8009138 <_strtod_l+0x9e8>
 80091f0:	4639      	mov	r1, r7
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7f7 fcb0 	bl	8000b58 <__aeabi_d2iz>
 80091f8:	f7f7 f994 	bl	8000524 <__aeabi_i2d>
 80091fc:	460b      	mov	r3, r1
 80091fe:	4602      	mov	r2, r0
 8009200:	4639      	mov	r1, r7
 8009202:	4630      	mov	r0, r6
 8009204:	f7f7 f840 	bl	8000288 <__aeabi_dsub>
 8009208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800920a:	4606      	mov	r6, r0
 800920c:	460f      	mov	r7, r1
 800920e:	b933      	cbnz	r3, 800921e <_strtod_l+0xace>
 8009210:	f1ba 0f00 	cmp.w	sl, #0
 8009214:	d103      	bne.n	800921e <_strtod_l+0xace>
 8009216:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800921a:	2d00      	cmp	r5, #0
 800921c:	d06d      	beq.n	80092fa <_strtod_l+0xbaa>
 800921e:	a30a      	add	r3, pc, #40	; (adr r3, 8009248 <_strtod_l+0xaf8>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	4630      	mov	r0, r6
 8009226:	4639      	mov	r1, r7
 8009228:	f7f7 fc58 	bl	8000adc <__aeabi_dcmplt>
 800922c:	2800      	cmp	r0, #0
 800922e:	f47f acb8 	bne.w	8008ba2 <_strtod_l+0x452>
 8009232:	a307      	add	r3, pc, #28	; (adr r3, 8009250 <_strtod_l+0xb00>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	4630      	mov	r0, r6
 800923a:	4639      	mov	r1, r7
 800923c:	f7f7 fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 8009240:	2800      	cmp	r0, #0
 8009242:	f43f af79 	beq.w	8009138 <_strtod_l+0x9e8>
 8009246:	e4ac      	b.n	8008ba2 <_strtod_l+0x452>
 8009248:	94a03595 	.word	0x94a03595
 800924c:	3fdfffff 	.word	0x3fdfffff
 8009250:	35afe535 	.word	0x35afe535
 8009254:	3fe00000 	.word	0x3fe00000
 8009258:	000fffff 	.word	0x000fffff
 800925c:	7ff00000 	.word	0x7ff00000
 8009260:	7fefffff 	.word	0x7fefffff
 8009264:	39500000 	.word	0x39500000
 8009268:	3ff00000 	.word	0x3ff00000
 800926c:	7fe00000 	.word	0x7fe00000
 8009270:	7c9fffff 	.word	0x7c9fffff
 8009274:	3fe00000 	.word	0x3fe00000
 8009278:	bff00000 	.word	0xbff00000
 800927c:	9b04      	ldr	r3, [sp, #16]
 800927e:	b333      	cbz	r3, 80092ce <_strtod_l+0xb7e>
 8009280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009282:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009286:	d822      	bhi.n	80092ce <_strtod_l+0xb7e>
 8009288:	a327      	add	r3, pc, #156	; (adr r3, 8009328 <_strtod_l+0xbd8>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	4630      	mov	r0, r6
 8009290:	4639      	mov	r1, r7
 8009292:	f7f7 fc2d 	bl	8000af0 <__aeabi_dcmple>
 8009296:	b1a0      	cbz	r0, 80092c2 <_strtod_l+0xb72>
 8009298:	4639      	mov	r1, r7
 800929a:	4630      	mov	r0, r6
 800929c:	f7f7 fc84 	bl	8000ba8 <__aeabi_d2uiz>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	bf08      	it	eq
 80092a4:	2001      	moveq	r0, #1
 80092a6:	f7f7 f92d 	bl	8000504 <__aeabi_ui2d>
 80092aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092ac:	4606      	mov	r6, r0
 80092ae:	460f      	mov	r7, r1
 80092b0:	bb03      	cbnz	r3, 80092f4 <_strtod_l+0xba4>
 80092b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092b6:	9012      	str	r0, [sp, #72]	; 0x48
 80092b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80092ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80092be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80092c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80092ca:	1a9b      	subs	r3, r3, r2
 80092cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80092ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80092d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80092d6:	f001 fcad 	bl	800ac34 <__ulp>
 80092da:	4650      	mov	r0, sl
 80092dc:	ec53 2b10 	vmov	r2, r3, d0
 80092e0:	4659      	mov	r1, fp
 80092e2:	f7f7 f989 	bl	80005f8 <__aeabi_dmul>
 80092e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092ea:	f7f6 ffcf 	bl	800028c <__adddf3>
 80092ee:	4682      	mov	sl, r0
 80092f0:	468b      	mov	fp, r1
 80092f2:	e772      	b.n	80091da <_strtod_l+0xa8a>
 80092f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80092f8:	e7df      	b.n	80092ba <_strtod_l+0xb6a>
 80092fa:	a30d      	add	r3, pc, #52	; (adr r3, 8009330 <_strtod_l+0xbe0>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	f7f7 fbec 	bl	8000adc <__aeabi_dcmplt>
 8009304:	e79c      	b.n	8009240 <_strtod_l+0xaf0>
 8009306:	2300      	movs	r3, #0
 8009308:	930d      	str	r3, [sp, #52]	; 0x34
 800930a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800930c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	f7ff ba61 	b.w	80087d6 <_strtod_l+0x86>
 8009314:	2b65      	cmp	r3, #101	; 0x65
 8009316:	f04f 0200 	mov.w	r2, #0
 800931a:	f43f ab4e 	beq.w	80089ba <_strtod_l+0x26a>
 800931e:	2101      	movs	r1, #1
 8009320:	4614      	mov	r4, r2
 8009322:	9104      	str	r1, [sp, #16]
 8009324:	f7ff bacb 	b.w	80088be <_strtod_l+0x16e>
 8009328:	ffc00000 	.word	0xffc00000
 800932c:	41dfffff 	.word	0x41dfffff
 8009330:	94a03595 	.word	0x94a03595
 8009334:	3fcfffff 	.word	0x3fcfffff

08009338 <strtod>:
 8009338:	4b07      	ldr	r3, [pc, #28]	; (8009358 <strtod+0x20>)
 800933a:	4a08      	ldr	r2, [pc, #32]	; (800935c <strtod+0x24>)
 800933c:	b410      	push	{r4}
 800933e:	681c      	ldr	r4, [r3, #0]
 8009340:	6a23      	ldr	r3, [r4, #32]
 8009342:	2b00      	cmp	r3, #0
 8009344:	bf08      	it	eq
 8009346:	4613      	moveq	r3, r2
 8009348:	460a      	mov	r2, r1
 800934a:	4601      	mov	r1, r0
 800934c:	4620      	mov	r0, r4
 800934e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009352:	f7ff b9fd 	b.w	8008750 <_strtod_l>
 8009356:	bf00      	nop
 8009358:	20000014 	.word	0x20000014
 800935c:	20000078 	.word	0x20000078

08009360 <quorem>:
 8009360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009364:	6903      	ldr	r3, [r0, #16]
 8009366:	690c      	ldr	r4, [r1, #16]
 8009368:	42a3      	cmp	r3, r4
 800936a:	4680      	mov	r8, r0
 800936c:	f2c0 8082 	blt.w	8009474 <quorem+0x114>
 8009370:	3c01      	subs	r4, #1
 8009372:	f101 0714 	add.w	r7, r1, #20
 8009376:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800937a:	f100 0614 	add.w	r6, r0, #20
 800937e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009382:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009386:	eb06 030c 	add.w	r3, r6, ip
 800938a:	3501      	adds	r5, #1
 800938c:	eb07 090c 	add.w	r9, r7, ip
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	fbb0 f5f5 	udiv	r5, r0, r5
 8009396:	b395      	cbz	r5, 80093fe <quorem+0x9e>
 8009398:	f04f 0a00 	mov.w	sl, #0
 800939c:	4638      	mov	r0, r7
 800939e:	46b6      	mov	lr, r6
 80093a0:	46d3      	mov	fp, sl
 80093a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80093a6:	b293      	uxth	r3, r2
 80093a8:	fb05 a303 	mla	r3, r5, r3, sl
 80093ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	ebab 0303 	sub.w	r3, fp, r3
 80093b6:	0c12      	lsrs	r2, r2, #16
 80093b8:	f8de b000 	ldr.w	fp, [lr]
 80093bc:	fb05 a202 	mla	r2, r5, r2, sl
 80093c0:	fa13 f38b 	uxtah	r3, r3, fp
 80093c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80093c8:	fa1f fb82 	uxth.w	fp, r2
 80093cc:	f8de 2000 	ldr.w	r2, [lr]
 80093d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80093d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093d8:	b29b      	uxth	r3, r3
 80093da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093de:	4581      	cmp	r9, r0
 80093e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80093e4:	f84e 3b04 	str.w	r3, [lr], #4
 80093e8:	d2db      	bcs.n	80093a2 <quorem+0x42>
 80093ea:	f856 300c 	ldr.w	r3, [r6, ip]
 80093ee:	b933      	cbnz	r3, 80093fe <quorem+0x9e>
 80093f0:	9b01      	ldr	r3, [sp, #4]
 80093f2:	3b04      	subs	r3, #4
 80093f4:	429e      	cmp	r6, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	d330      	bcc.n	800945c <quorem+0xfc>
 80093fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80093fe:	4640      	mov	r0, r8
 8009400:	f001 fba0 	bl	800ab44 <__mcmp>
 8009404:	2800      	cmp	r0, #0
 8009406:	db25      	blt.n	8009454 <quorem+0xf4>
 8009408:	3501      	adds	r5, #1
 800940a:	4630      	mov	r0, r6
 800940c:	f04f 0c00 	mov.w	ip, #0
 8009410:	f857 2b04 	ldr.w	r2, [r7], #4
 8009414:	f8d0 e000 	ldr.w	lr, [r0]
 8009418:	b293      	uxth	r3, r2
 800941a:	ebac 0303 	sub.w	r3, ip, r3
 800941e:	0c12      	lsrs	r2, r2, #16
 8009420:	fa13 f38e 	uxtah	r3, r3, lr
 8009424:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800942c:	b29b      	uxth	r3, r3
 800942e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009432:	45b9      	cmp	r9, r7
 8009434:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009438:	f840 3b04 	str.w	r3, [r0], #4
 800943c:	d2e8      	bcs.n	8009410 <quorem+0xb0>
 800943e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009442:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009446:	b92a      	cbnz	r2, 8009454 <quorem+0xf4>
 8009448:	3b04      	subs	r3, #4
 800944a:	429e      	cmp	r6, r3
 800944c:	461a      	mov	r2, r3
 800944e:	d30b      	bcc.n	8009468 <quorem+0x108>
 8009450:	f8c8 4010 	str.w	r4, [r8, #16]
 8009454:	4628      	mov	r0, r5
 8009456:	b003      	add	sp, #12
 8009458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945c:	6812      	ldr	r2, [r2, #0]
 800945e:	3b04      	subs	r3, #4
 8009460:	2a00      	cmp	r2, #0
 8009462:	d1ca      	bne.n	80093fa <quorem+0x9a>
 8009464:	3c01      	subs	r4, #1
 8009466:	e7c5      	b.n	80093f4 <quorem+0x94>
 8009468:	6812      	ldr	r2, [r2, #0]
 800946a:	3b04      	subs	r3, #4
 800946c:	2a00      	cmp	r2, #0
 800946e:	d1ef      	bne.n	8009450 <quorem+0xf0>
 8009470:	3c01      	subs	r4, #1
 8009472:	e7ea      	b.n	800944a <quorem+0xea>
 8009474:	2000      	movs	r0, #0
 8009476:	e7ee      	b.n	8009456 <quorem+0xf6>

08009478 <_dtoa_r>:
 8009478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	ec57 6b10 	vmov	r6, r7, d0
 8009480:	b097      	sub	sp, #92	; 0x5c
 8009482:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009484:	9106      	str	r1, [sp, #24]
 8009486:	4604      	mov	r4, r0
 8009488:	920b      	str	r2, [sp, #44]	; 0x2c
 800948a:	9312      	str	r3, [sp, #72]	; 0x48
 800948c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009490:	e9cd 6700 	strd	r6, r7, [sp]
 8009494:	b93d      	cbnz	r5, 80094a6 <_dtoa_r+0x2e>
 8009496:	2010      	movs	r0, #16
 8009498:	f001 f8dc 	bl	800a654 <malloc>
 800949c:	6260      	str	r0, [r4, #36]	; 0x24
 800949e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094a2:	6005      	str	r5, [r0, #0]
 80094a4:	60c5      	str	r5, [r0, #12]
 80094a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094a8:	6819      	ldr	r1, [r3, #0]
 80094aa:	b151      	cbz	r1, 80094c2 <_dtoa_r+0x4a>
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	604a      	str	r2, [r1, #4]
 80094b0:	2301      	movs	r3, #1
 80094b2:	4093      	lsls	r3, r2
 80094b4:	608b      	str	r3, [r1, #8]
 80094b6:	4620      	mov	r0, r4
 80094b8:	f001 f925 	bl	800a706 <_Bfree>
 80094bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094be:	2200      	movs	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	1e3b      	subs	r3, r7, #0
 80094c4:	bfbb      	ittet	lt
 80094c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80094ca:	9301      	strlt	r3, [sp, #4]
 80094cc:	2300      	movge	r3, #0
 80094ce:	2201      	movlt	r2, #1
 80094d0:	bfac      	ite	ge
 80094d2:	f8c8 3000 	strge.w	r3, [r8]
 80094d6:	f8c8 2000 	strlt.w	r2, [r8]
 80094da:	4baf      	ldr	r3, [pc, #700]	; (8009798 <_dtoa_r+0x320>)
 80094dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80094e0:	ea33 0308 	bics.w	r3, r3, r8
 80094e4:	d114      	bne.n	8009510 <_dtoa_r+0x98>
 80094e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	9b00      	ldr	r3, [sp, #0]
 80094f0:	b923      	cbnz	r3, 80094fc <_dtoa_r+0x84>
 80094f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f000 8542 	beq.w	8009f80 <_dtoa_r+0xb08>
 80094fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80097ac <_dtoa_r+0x334>
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 8544 	beq.w	8009f90 <_dtoa_r+0xb18>
 8009508:	f10b 0303 	add.w	r3, fp, #3
 800950c:	f000 bd3e 	b.w	8009f8c <_dtoa_r+0xb14>
 8009510:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009514:	2200      	movs	r2, #0
 8009516:	2300      	movs	r3, #0
 8009518:	4630      	mov	r0, r6
 800951a:	4639      	mov	r1, r7
 800951c:	f7f7 fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009520:	4681      	mov	r9, r0
 8009522:	b168      	cbz	r0, 8009540 <_dtoa_r+0xc8>
 8009524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009526:	2301      	movs	r3, #1
 8009528:	6013      	str	r3, [r2, #0]
 800952a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 8524 	beq.w	8009f7a <_dtoa_r+0xb02>
 8009532:	4b9a      	ldr	r3, [pc, #616]	; (800979c <_dtoa_r+0x324>)
 8009534:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009536:	f103 3bff 	add.w	fp, r3, #4294967295
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	f000 bd28 	b.w	8009f90 <_dtoa_r+0xb18>
 8009540:	aa14      	add	r2, sp, #80	; 0x50
 8009542:	a915      	add	r1, sp, #84	; 0x54
 8009544:	ec47 6b10 	vmov	d0, r6, r7
 8009548:	4620      	mov	r0, r4
 800954a:	f001 fbe9 	bl	800ad20 <__d2b>
 800954e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009552:	9004      	str	r0, [sp, #16]
 8009554:	2d00      	cmp	r5, #0
 8009556:	d07c      	beq.n	8009652 <_dtoa_r+0x1da>
 8009558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800955c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009560:	46b2      	mov	sl, r6
 8009562:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800956a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800956e:	2200      	movs	r2, #0
 8009570:	4b8b      	ldr	r3, [pc, #556]	; (80097a0 <_dtoa_r+0x328>)
 8009572:	4650      	mov	r0, sl
 8009574:	4659      	mov	r1, fp
 8009576:	f7f6 fe87 	bl	8000288 <__aeabi_dsub>
 800957a:	a381      	add	r3, pc, #516	; (adr r3, 8009780 <_dtoa_r+0x308>)
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	f7f7 f83a 	bl	80005f8 <__aeabi_dmul>
 8009584:	a380      	add	r3, pc, #512	; (adr r3, 8009788 <_dtoa_r+0x310>)
 8009586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958a:	f7f6 fe7f 	bl	800028c <__adddf3>
 800958e:	4606      	mov	r6, r0
 8009590:	4628      	mov	r0, r5
 8009592:	460f      	mov	r7, r1
 8009594:	f7f6 ffc6 	bl	8000524 <__aeabi_i2d>
 8009598:	a37d      	add	r3, pc, #500	; (adr r3, 8009790 <_dtoa_r+0x318>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	f7f7 f82b 	bl	80005f8 <__aeabi_dmul>
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	4630      	mov	r0, r6
 80095a8:	4639      	mov	r1, r7
 80095aa:	f7f6 fe6f 	bl	800028c <__adddf3>
 80095ae:	4606      	mov	r6, r0
 80095b0:	460f      	mov	r7, r1
 80095b2:	f7f7 fad1 	bl	8000b58 <__aeabi_d2iz>
 80095b6:	2200      	movs	r2, #0
 80095b8:	4682      	mov	sl, r0
 80095ba:	2300      	movs	r3, #0
 80095bc:	4630      	mov	r0, r6
 80095be:	4639      	mov	r1, r7
 80095c0:	f7f7 fa8c 	bl	8000adc <__aeabi_dcmplt>
 80095c4:	b148      	cbz	r0, 80095da <_dtoa_r+0x162>
 80095c6:	4650      	mov	r0, sl
 80095c8:	f7f6 ffac 	bl	8000524 <__aeabi_i2d>
 80095cc:	4632      	mov	r2, r6
 80095ce:	463b      	mov	r3, r7
 80095d0:	f7f7 fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80095d4:	b908      	cbnz	r0, 80095da <_dtoa_r+0x162>
 80095d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095da:	f1ba 0f16 	cmp.w	sl, #22
 80095de:	d859      	bhi.n	8009694 <_dtoa_r+0x21c>
 80095e0:	4970      	ldr	r1, [pc, #448]	; (80097a4 <_dtoa_r+0x32c>)
 80095e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80095e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ee:	f7f7 fa93 	bl	8000b18 <__aeabi_dcmpgt>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d050      	beq.n	8009698 <_dtoa_r+0x220>
 80095f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095fa:	2300      	movs	r3, #0
 80095fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80095fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009600:	1b5d      	subs	r5, r3, r5
 8009602:	f1b5 0801 	subs.w	r8, r5, #1
 8009606:	bf49      	itett	mi
 8009608:	f1c5 0301 	rsbmi	r3, r5, #1
 800960c:	2300      	movpl	r3, #0
 800960e:	9305      	strmi	r3, [sp, #20]
 8009610:	f04f 0800 	movmi.w	r8, #0
 8009614:	bf58      	it	pl
 8009616:	9305      	strpl	r3, [sp, #20]
 8009618:	f1ba 0f00 	cmp.w	sl, #0
 800961c:	db3e      	blt.n	800969c <_dtoa_r+0x224>
 800961e:	2300      	movs	r3, #0
 8009620:	44d0      	add	r8, sl
 8009622:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009626:	9307      	str	r3, [sp, #28]
 8009628:	9b06      	ldr	r3, [sp, #24]
 800962a:	2b09      	cmp	r3, #9
 800962c:	f200 8090 	bhi.w	8009750 <_dtoa_r+0x2d8>
 8009630:	2b05      	cmp	r3, #5
 8009632:	bfc4      	itt	gt
 8009634:	3b04      	subgt	r3, #4
 8009636:	9306      	strgt	r3, [sp, #24]
 8009638:	9b06      	ldr	r3, [sp, #24]
 800963a:	f1a3 0302 	sub.w	r3, r3, #2
 800963e:	bfcc      	ite	gt
 8009640:	2500      	movgt	r5, #0
 8009642:	2501      	movle	r5, #1
 8009644:	2b03      	cmp	r3, #3
 8009646:	f200 808f 	bhi.w	8009768 <_dtoa_r+0x2f0>
 800964a:	e8df f003 	tbb	[pc, r3]
 800964e:	7f7d      	.short	0x7f7d
 8009650:	7131      	.short	0x7131
 8009652:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009656:	441d      	add	r5, r3
 8009658:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800965c:	2820      	cmp	r0, #32
 800965e:	dd13      	ble.n	8009688 <_dtoa_r+0x210>
 8009660:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009664:	9b00      	ldr	r3, [sp, #0]
 8009666:	fa08 f800 	lsl.w	r8, r8, r0
 800966a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800966e:	fa23 f000 	lsr.w	r0, r3, r0
 8009672:	ea48 0000 	orr.w	r0, r8, r0
 8009676:	f7f6 ff45 	bl	8000504 <__aeabi_ui2d>
 800967a:	2301      	movs	r3, #1
 800967c:	4682      	mov	sl, r0
 800967e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009682:	3d01      	subs	r5, #1
 8009684:	9313      	str	r3, [sp, #76]	; 0x4c
 8009686:	e772      	b.n	800956e <_dtoa_r+0xf6>
 8009688:	9b00      	ldr	r3, [sp, #0]
 800968a:	f1c0 0020 	rsb	r0, r0, #32
 800968e:	fa03 f000 	lsl.w	r0, r3, r0
 8009692:	e7f0      	b.n	8009676 <_dtoa_r+0x1fe>
 8009694:	2301      	movs	r3, #1
 8009696:	e7b1      	b.n	80095fc <_dtoa_r+0x184>
 8009698:	900f      	str	r0, [sp, #60]	; 0x3c
 800969a:	e7b0      	b.n	80095fe <_dtoa_r+0x186>
 800969c:	9b05      	ldr	r3, [sp, #20]
 800969e:	eba3 030a 	sub.w	r3, r3, sl
 80096a2:	9305      	str	r3, [sp, #20]
 80096a4:	f1ca 0300 	rsb	r3, sl, #0
 80096a8:	9307      	str	r3, [sp, #28]
 80096aa:	2300      	movs	r3, #0
 80096ac:	930e      	str	r3, [sp, #56]	; 0x38
 80096ae:	e7bb      	b.n	8009628 <_dtoa_r+0x1b0>
 80096b0:	2301      	movs	r3, #1
 80096b2:	930a      	str	r3, [sp, #40]	; 0x28
 80096b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	dd59      	ble.n	800976e <_dtoa_r+0x2f6>
 80096ba:	9302      	str	r3, [sp, #8]
 80096bc:	4699      	mov	r9, r3
 80096be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80096c0:	2200      	movs	r2, #0
 80096c2:	6072      	str	r2, [r6, #4]
 80096c4:	2204      	movs	r2, #4
 80096c6:	f102 0014 	add.w	r0, r2, #20
 80096ca:	4298      	cmp	r0, r3
 80096cc:	6871      	ldr	r1, [r6, #4]
 80096ce:	d953      	bls.n	8009778 <_dtoa_r+0x300>
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 ffe4 	bl	800a69e <_Balloc>
 80096d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096d8:	6030      	str	r0, [r6, #0]
 80096da:	f1b9 0f0e 	cmp.w	r9, #14
 80096de:	f8d3 b000 	ldr.w	fp, [r3]
 80096e2:	f200 80e6 	bhi.w	80098b2 <_dtoa_r+0x43a>
 80096e6:	2d00      	cmp	r5, #0
 80096e8:	f000 80e3 	beq.w	80098b2 <_dtoa_r+0x43a>
 80096ec:	ed9d 7b00 	vldr	d7, [sp]
 80096f0:	f1ba 0f00 	cmp.w	sl, #0
 80096f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80096f8:	dd74      	ble.n	80097e4 <_dtoa_r+0x36c>
 80096fa:	4a2a      	ldr	r2, [pc, #168]	; (80097a4 <_dtoa_r+0x32c>)
 80096fc:	f00a 030f 	and.w	r3, sl, #15
 8009700:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009704:	ed93 7b00 	vldr	d7, [r3]
 8009708:	ea4f 162a 	mov.w	r6, sl, asr #4
 800970c:	06f0      	lsls	r0, r6, #27
 800970e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009712:	d565      	bpl.n	80097e0 <_dtoa_r+0x368>
 8009714:	4b24      	ldr	r3, [pc, #144]	; (80097a8 <_dtoa_r+0x330>)
 8009716:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800971a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800971e:	f7f7 f895 	bl	800084c <__aeabi_ddiv>
 8009722:	e9cd 0100 	strd	r0, r1, [sp]
 8009726:	f006 060f 	and.w	r6, r6, #15
 800972a:	2503      	movs	r5, #3
 800972c:	4f1e      	ldr	r7, [pc, #120]	; (80097a8 <_dtoa_r+0x330>)
 800972e:	e04c      	b.n	80097ca <_dtoa_r+0x352>
 8009730:	2301      	movs	r3, #1
 8009732:	930a      	str	r3, [sp, #40]	; 0x28
 8009734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009736:	4453      	add	r3, sl
 8009738:	f103 0901 	add.w	r9, r3, #1
 800973c:	9302      	str	r3, [sp, #8]
 800973e:	464b      	mov	r3, r9
 8009740:	2b01      	cmp	r3, #1
 8009742:	bfb8      	it	lt
 8009744:	2301      	movlt	r3, #1
 8009746:	e7ba      	b.n	80096be <_dtoa_r+0x246>
 8009748:	2300      	movs	r3, #0
 800974a:	e7b2      	b.n	80096b2 <_dtoa_r+0x23a>
 800974c:	2300      	movs	r3, #0
 800974e:	e7f0      	b.n	8009732 <_dtoa_r+0x2ba>
 8009750:	2501      	movs	r5, #1
 8009752:	2300      	movs	r3, #0
 8009754:	9306      	str	r3, [sp, #24]
 8009756:	950a      	str	r5, [sp, #40]	; 0x28
 8009758:	f04f 33ff 	mov.w	r3, #4294967295
 800975c:	9302      	str	r3, [sp, #8]
 800975e:	4699      	mov	r9, r3
 8009760:	2200      	movs	r2, #0
 8009762:	2312      	movs	r3, #18
 8009764:	920b      	str	r2, [sp, #44]	; 0x2c
 8009766:	e7aa      	b.n	80096be <_dtoa_r+0x246>
 8009768:	2301      	movs	r3, #1
 800976a:	930a      	str	r3, [sp, #40]	; 0x28
 800976c:	e7f4      	b.n	8009758 <_dtoa_r+0x2e0>
 800976e:	2301      	movs	r3, #1
 8009770:	9302      	str	r3, [sp, #8]
 8009772:	4699      	mov	r9, r3
 8009774:	461a      	mov	r2, r3
 8009776:	e7f5      	b.n	8009764 <_dtoa_r+0x2ec>
 8009778:	3101      	adds	r1, #1
 800977a:	6071      	str	r1, [r6, #4]
 800977c:	0052      	lsls	r2, r2, #1
 800977e:	e7a2      	b.n	80096c6 <_dtoa_r+0x24e>
 8009780:	636f4361 	.word	0x636f4361
 8009784:	3fd287a7 	.word	0x3fd287a7
 8009788:	8b60c8b3 	.word	0x8b60c8b3
 800978c:	3fc68a28 	.word	0x3fc68a28
 8009790:	509f79fb 	.word	0x509f79fb
 8009794:	3fd34413 	.word	0x3fd34413
 8009798:	7ff00000 	.word	0x7ff00000
 800979c:	0800c699 	.word	0x0800c699
 80097a0:	3ff80000 	.word	0x3ff80000
 80097a4:	0800c750 	.word	0x0800c750
 80097a8:	0800c728 	.word	0x0800c728
 80097ac:	0800c719 	.word	0x0800c719
 80097b0:	07f1      	lsls	r1, r6, #31
 80097b2:	d508      	bpl.n	80097c6 <_dtoa_r+0x34e>
 80097b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097bc:	f7f6 ff1c 	bl	80005f8 <__aeabi_dmul>
 80097c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80097c4:	3501      	adds	r5, #1
 80097c6:	1076      	asrs	r6, r6, #1
 80097c8:	3708      	adds	r7, #8
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	d1f0      	bne.n	80097b0 <_dtoa_r+0x338>
 80097ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80097d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097d6:	f7f7 f839 	bl	800084c <__aeabi_ddiv>
 80097da:	e9cd 0100 	strd	r0, r1, [sp]
 80097de:	e01a      	b.n	8009816 <_dtoa_r+0x39e>
 80097e0:	2502      	movs	r5, #2
 80097e2:	e7a3      	b.n	800972c <_dtoa_r+0x2b4>
 80097e4:	f000 80a0 	beq.w	8009928 <_dtoa_r+0x4b0>
 80097e8:	f1ca 0600 	rsb	r6, sl, #0
 80097ec:	4b9f      	ldr	r3, [pc, #636]	; (8009a6c <_dtoa_r+0x5f4>)
 80097ee:	4fa0      	ldr	r7, [pc, #640]	; (8009a70 <_dtoa_r+0x5f8>)
 80097f0:	f006 020f 	and.w	r2, r6, #15
 80097f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009800:	f7f6 fefa 	bl	80005f8 <__aeabi_dmul>
 8009804:	e9cd 0100 	strd	r0, r1, [sp]
 8009808:	1136      	asrs	r6, r6, #4
 800980a:	2300      	movs	r3, #0
 800980c:	2502      	movs	r5, #2
 800980e:	2e00      	cmp	r6, #0
 8009810:	d17f      	bne.n	8009912 <_dtoa_r+0x49a>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e1      	bne.n	80097da <_dtoa_r+0x362>
 8009816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 8087 	beq.w	800992c <_dtoa_r+0x4b4>
 800981e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009822:	2200      	movs	r2, #0
 8009824:	4b93      	ldr	r3, [pc, #588]	; (8009a74 <_dtoa_r+0x5fc>)
 8009826:	4630      	mov	r0, r6
 8009828:	4639      	mov	r1, r7
 800982a:	f7f7 f957 	bl	8000adc <__aeabi_dcmplt>
 800982e:	2800      	cmp	r0, #0
 8009830:	d07c      	beq.n	800992c <_dtoa_r+0x4b4>
 8009832:	f1b9 0f00 	cmp.w	r9, #0
 8009836:	d079      	beq.n	800992c <_dtoa_r+0x4b4>
 8009838:	9b02      	ldr	r3, [sp, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	dd35      	ble.n	80098aa <_dtoa_r+0x432>
 800983e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009842:	9308      	str	r3, [sp, #32]
 8009844:	4639      	mov	r1, r7
 8009846:	2200      	movs	r2, #0
 8009848:	4b8b      	ldr	r3, [pc, #556]	; (8009a78 <_dtoa_r+0x600>)
 800984a:	4630      	mov	r0, r6
 800984c:	f7f6 fed4 	bl	80005f8 <__aeabi_dmul>
 8009850:	e9cd 0100 	strd	r0, r1, [sp]
 8009854:	9f02      	ldr	r7, [sp, #8]
 8009856:	3501      	adds	r5, #1
 8009858:	4628      	mov	r0, r5
 800985a:	f7f6 fe63 	bl	8000524 <__aeabi_i2d>
 800985e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009862:	f7f6 fec9 	bl	80005f8 <__aeabi_dmul>
 8009866:	2200      	movs	r2, #0
 8009868:	4b84      	ldr	r3, [pc, #528]	; (8009a7c <_dtoa_r+0x604>)
 800986a:	f7f6 fd0f 	bl	800028c <__adddf3>
 800986e:	4605      	mov	r5, r0
 8009870:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009874:	2f00      	cmp	r7, #0
 8009876:	d15d      	bne.n	8009934 <_dtoa_r+0x4bc>
 8009878:	2200      	movs	r2, #0
 800987a:	4b81      	ldr	r3, [pc, #516]	; (8009a80 <_dtoa_r+0x608>)
 800987c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009880:	f7f6 fd02 	bl	8000288 <__aeabi_dsub>
 8009884:	462a      	mov	r2, r5
 8009886:	4633      	mov	r3, r6
 8009888:	e9cd 0100 	strd	r0, r1, [sp]
 800988c:	f7f7 f944 	bl	8000b18 <__aeabi_dcmpgt>
 8009890:	2800      	cmp	r0, #0
 8009892:	f040 8288 	bne.w	8009da6 <_dtoa_r+0x92e>
 8009896:	462a      	mov	r2, r5
 8009898:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800989c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098a0:	f7f7 f91c 	bl	8000adc <__aeabi_dcmplt>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	f040 827c 	bne.w	8009da2 <_dtoa_r+0x92a>
 80098aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098ae:	e9cd 2300 	strd	r2, r3, [sp]
 80098b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f2c0 8150 	blt.w	8009b5a <_dtoa_r+0x6e2>
 80098ba:	f1ba 0f0e 	cmp.w	sl, #14
 80098be:	f300 814c 	bgt.w	8009b5a <_dtoa_r+0x6e2>
 80098c2:	4b6a      	ldr	r3, [pc, #424]	; (8009a6c <_dtoa_r+0x5f4>)
 80098c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80098c8:	ed93 7b00 	vldr	d7, [r3]
 80098cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098d4:	f280 80d8 	bge.w	8009a88 <_dtoa_r+0x610>
 80098d8:	f1b9 0f00 	cmp.w	r9, #0
 80098dc:	f300 80d4 	bgt.w	8009a88 <_dtoa_r+0x610>
 80098e0:	f040 825e 	bne.w	8009da0 <_dtoa_r+0x928>
 80098e4:	2200      	movs	r2, #0
 80098e6:	4b66      	ldr	r3, [pc, #408]	; (8009a80 <_dtoa_r+0x608>)
 80098e8:	ec51 0b17 	vmov	r0, r1, d7
 80098ec:	f7f6 fe84 	bl	80005f8 <__aeabi_dmul>
 80098f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098f4:	f7f7 f906 	bl	8000b04 <__aeabi_dcmpge>
 80098f8:	464f      	mov	r7, r9
 80098fa:	464e      	mov	r6, r9
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f040 8234 	bne.w	8009d6a <_dtoa_r+0x8f2>
 8009902:	2331      	movs	r3, #49	; 0x31
 8009904:	f10b 0501 	add.w	r5, fp, #1
 8009908:	f88b 3000 	strb.w	r3, [fp]
 800990c:	f10a 0a01 	add.w	sl, sl, #1
 8009910:	e22f      	b.n	8009d72 <_dtoa_r+0x8fa>
 8009912:	07f2      	lsls	r2, r6, #31
 8009914:	d505      	bpl.n	8009922 <_dtoa_r+0x4aa>
 8009916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800991a:	f7f6 fe6d 	bl	80005f8 <__aeabi_dmul>
 800991e:	3501      	adds	r5, #1
 8009920:	2301      	movs	r3, #1
 8009922:	1076      	asrs	r6, r6, #1
 8009924:	3708      	adds	r7, #8
 8009926:	e772      	b.n	800980e <_dtoa_r+0x396>
 8009928:	2502      	movs	r5, #2
 800992a:	e774      	b.n	8009816 <_dtoa_r+0x39e>
 800992c:	f8cd a020 	str.w	sl, [sp, #32]
 8009930:	464f      	mov	r7, r9
 8009932:	e791      	b.n	8009858 <_dtoa_r+0x3e0>
 8009934:	4b4d      	ldr	r3, [pc, #308]	; (8009a6c <_dtoa_r+0x5f4>)
 8009936:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800993a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800993e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009940:	2b00      	cmp	r3, #0
 8009942:	d047      	beq.n	80099d4 <_dtoa_r+0x55c>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	2000      	movs	r0, #0
 800994a:	494e      	ldr	r1, [pc, #312]	; (8009a84 <_dtoa_r+0x60c>)
 800994c:	f7f6 ff7e 	bl	800084c <__aeabi_ddiv>
 8009950:	462a      	mov	r2, r5
 8009952:	4633      	mov	r3, r6
 8009954:	f7f6 fc98 	bl	8000288 <__aeabi_dsub>
 8009958:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800995c:	465d      	mov	r5, fp
 800995e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009962:	f7f7 f8f9 	bl	8000b58 <__aeabi_d2iz>
 8009966:	4606      	mov	r6, r0
 8009968:	f7f6 fddc 	bl	8000524 <__aeabi_i2d>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009974:	f7f6 fc88 	bl	8000288 <__aeabi_dsub>
 8009978:	3630      	adds	r6, #48	; 0x30
 800997a:	f805 6b01 	strb.w	r6, [r5], #1
 800997e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009982:	e9cd 0100 	strd	r0, r1, [sp]
 8009986:	f7f7 f8a9 	bl	8000adc <__aeabi_dcmplt>
 800998a:	2800      	cmp	r0, #0
 800998c:	d163      	bne.n	8009a56 <_dtoa_r+0x5de>
 800998e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009992:	2000      	movs	r0, #0
 8009994:	4937      	ldr	r1, [pc, #220]	; (8009a74 <_dtoa_r+0x5fc>)
 8009996:	f7f6 fc77 	bl	8000288 <__aeabi_dsub>
 800999a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800999e:	f7f7 f89d 	bl	8000adc <__aeabi_dcmplt>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	f040 80b7 	bne.w	8009b16 <_dtoa_r+0x69e>
 80099a8:	eba5 030b 	sub.w	r3, r5, fp
 80099ac:	429f      	cmp	r7, r3
 80099ae:	f77f af7c 	ble.w	80098aa <_dtoa_r+0x432>
 80099b2:	2200      	movs	r2, #0
 80099b4:	4b30      	ldr	r3, [pc, #192]	; (8009a78 <_dtoa_r+0x600>)
 80099b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099ba:	f7f6 fe1d 	bl	80005f8 <__aeabi_dmul>
 80099be:	2200      	movs	r2, #0
 80099c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80099c4:	4b2c      	ldr	r3, [pc, #176]	; (8009a78 <_dtoa_r+0x600>)
 80099c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099ca:	f7f6 fe15 	bl	80005f8 <__aeabi_dmul>
 80099ce:	e9cd 0100 	strd	r0, r1, [sp]
 80099d2:	e7c4      	b.n	800995e <_dtoa_r+0x4e6>
 80099d4:	462a      	mov	r2, r5
 80099d6:	4633      	mov	r3, r6
 80099d8:	f7f6 fe0e 	bl	80005f8 <__aeabi_dmul>
 80099dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80099e0:	eb0b 0507 	add.w	r5, fp, r7
 80099e4:	465e      	mov	r6, fp
 80099e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099ea:	f7f7 f8b5 	bl	8000b58 <__aeabi_d2iz>
 80099ee:	4607      	mov	r7, r0
 80099f0:	f7f6 fd98 	bl	8000524 <__aeabi_i2d>
 80099f4:	3730      	adds	r7, #48	; 0x30
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099fe:	f7f6 fc43 	bl	8000288 <__aeabi_dsub>
 8009a02:	f806 7b01 	strb.w	r7, [r6], #1
 8009a06:	42ae      	cmp	r6, r5
 8009a08:	e9cd 0100 	strd	r0, r1, [sp]
 8009a0c:	f04f 0200 	mov.w	r2, #0
 8009a10:	d126      	bne.n	8009a60 <_dtoa_r+0x5e8>
 8009a12:	4b1c      	ldr	r3, [pc, #112]	; (8009a84 <_dtoa_r+0x60c>)
 8009a14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a18:	f7f6 fc38 	bl	800028c <__adddf3>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a24:	f7f7 f878 	bl	8000b18 <__aeabi_dcmpgt>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d174      	bne.n	8009b16 <_dtoa_r+0x69e>
 8009a2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009a30:	2000      	movs	r0, #0
 8009a32:	4914      	ldr	r1, [pc, #80]	; (8009a84 <_dtoa_r+0x60c>)
 8009a34:	f7f6 fc28 	bl	8000288 <__aeabi_dsub>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a40:	f7f7 f84c 	bl	8000adc <__aeabi_dcmplt>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	f43f af30 	beq.w	80098aa <_dtoa_r+0x432>
 8009a4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a4e:	2b30      	cmp	r3, #48	; 0x30
 8009a50:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a54:	d002      	beq.n	8009a5c <_dtoa_r+0x5e4>
 8009a56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009a5a:	e04a      	b.n	8009af2 <_dtoa_r+0x67a>
 8009a5c:	4615      	mov	r5, r2
 8009a5e:	e7f4      	b.n	8009a4a <_dtoa_r+0x5d2>
 8009a60:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <_dtoa_r+0x600>)
 8009a62:	f7f6 fdc9 	bl	80005f8 <__aeabi_dmul>
 8009a66:	e9cd 0100 	strd	r0, r1, [sp]
 8009a6a:	e7bc      	b.n	80099e6 <_dtoa_r+0x56e>
 8009a6c:	0800c750 	.word	0x0800c750
 8009a70:	0800c728 	.word	0x0800c728
 8009a74:	3ff00000 	.word	0x3ff00000
 8009a78:	40240000 	.word	0x40240000
 8009a7c:	401c0000 	.word	0x401c0000
 8009a80:	40140000 	.word	0x40140000
 8009a84:	3fe00000 	.word	0x3fe00000
 8009a88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009a8c:	465d      	mov	r5, fp
 8009a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a92:	4630      	mov	r0, r6
 8009a94:	4639      	mov	r1, r7
 8009a96:	f7f6 fed9 	bl	800084c <__aeabi_ddiv>
 8009a9a:	f7f7 f85d 	bl	8000b58 <__aeabi_d2iz>
 8009a9e:	4680      	mov	r8, r0
 8009aa0:	f7f6 fd40 	bl	8000524 <__aeabi_i2d>
 8009aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009aa8:	f7f6 fda6 	bl	80005f8 <__aeabi_dmul>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	4639      	mov	r1, r7
 8009ab4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009ab8:	f7f6 fbe6 	bl	8000288 <__aeabi_dsub>
 8009abc:	f805 6b01 	strb.w	r6, [r5], #1
 8009ac0:	eba5 060b 	sub.w	r6, r5, fp
 8009ac4:	45b1      	cmp	r9, r6
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	d139      	bne.n	8009b40 <_dtoa_r+0x6c8>
 8009acc:	f7f6 fbde 	bl	800028c <__adddf3>
 8009ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	460f      	mov	r7, r1
 8009ad8:	f7f7 f81e 	bl	8000b18 <__aeabi_dcmpgt>
 8009adc:	b9c8      	cbnz	r0, 8009b12 <_dtoa_r+0x69a>
 8009ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	f7f6 ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aea:	b110      	cbz	r0, 8009af2 <_dtoa_r+0x67a>
 8009aec:	f018 0f01 	tst.w	r8, #1
 8009af0:	d10f      	bne.n	8009b12 <_dtoa_r+0x69a>
 8009af2:	9904      	ldr	r1, [sp, #16]
 8009af4:	4620      	mov	r0, r4
 8009af6:	f000 fe06 	bl	800a706 <_Bfree>
 8009afa:	2300      	movs	r3, #0
 8009afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009afe:	702b      	strb	r3, [r5, #0]
 8009b00:	f10a 0301 	add.w	r3, sl, #1
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f000 8241 	beq.w	8009f90 <_dtoa_r+0xb18>
 8009b0e:	601d      	str	r5, [r3, #0]
 8009b10:	e23e      	b.n	8009f90 <_dtoa_r+0xb18>
 8009b12:	f8cd a020 	str.w	sl, [sp, #32]
 8009b16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b1a:	2a39      	cmp	r2, #57	; 0x39
 8009b1c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009b20:	d108      	bne.n	8009b34 <_dtoa_r+0x6bc>
 8009b22:	459b      	cmp	fp, r3
 8009b24:	d10a      	bne.n	8009b3c <_dtoa_r+0x6c4>
 8009b26:	9b08      	ldr	r3, [sp, #32]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	9308      	str	r3, [sp, #32]
 8009b2c:	2330      	movs	r3, #48	; 0x30
 8009b2e:	f88b 3000 	strb.w	r3, [fp]
 8009b32:	465b      	mov	r3, fp
 8009b34:	781a      	ldrb	r2, [r3, #0]
 8009b36:	3201      	adds	r2, #1
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	e78c      	b.n	8009a56 <_dtoa_r+0x5de>
 8009b3c:	461d      	mov	r5, r3
 8009b3e:	e7ea      	b.n	8009b16 <_dtoa_r+0x69e>
 8009b40:	2200      	movs	r2, #0
 8009b42:	4b9b      	ldr	r3, [pc, #620]	; (8009db0 <_dtoa_r+0x938>)
 8009b44:	f7f6 fd58 	bl	80005f8 <__aeabi_dmul>
 8009b48:	2200      	movs	r2, #0
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	4606      	mov	r6, r0
 8009b4e:	460f      	mov	r7, r1
 8009b50:	f7f6 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d09a      	beq.n	8009a8e <_dtoa_r+0x616>
 8009b58:	e7cb      	b.n	8009af2 <_dtoa_r+0x67a>
 8009b5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b5c:	2a00      	cmp	r2, #0
 8009b5e:	f000 808b 	beq.w	8009c78 <_dtoa_r+0x800>
 8009b62:	9a06      	ldr	r2, [sp, #24]
 8009b64:	2a01      	cmp	r2, #1
 8009b66:	dc6e      	bgt.n	8009c46 <_dtoa_r+0x7ce>
 8009b68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b6a:	2a00      	cmp	r2, #0
 8009b6c:	d067      	beq.n	8009c3e <_dtoa_r+0x7c6>
 8009b6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b72:	9f07      	ldr	r7, [sp, #28]
 8009b74:	9d05      	ldr	r5, [sp, #20]
 8009b76:	9a05      	ldr	r2, [sp, #20]
 8009b78:	2101      	movs	r1, #1
 8009b7a:	441a      	add	r2, r3
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	9205      	str	r2, [sp, #20]
 8009b80:	4498      	add	r8, r3
 8009b82:	f000 fe9e 	bl	800a8c2 <__i2b>
 8009b86:	4606      	mov	r6, r0
 8009b88:	2d00      	cmp	r5, #0
 8009b8a:	dd0c      	ble.n	8009ba6 <_dtoa_r+0x72e>
 8009b8c:	f1b8 0f00 	cmp.w	r8, #0
 8009b90:	dd09      	ble.n	8009ba6 <_dtoa_r+0x72e>
 8009b92:	4545      	cmp	r5, r8
 8009b94:	9a05      	ldr	r2, [sp, #20]
 8009b96:	462b      	mov	r3, r5
 8009b98:	bfa8      	it	ge
 8009b9a:	4643      	movge	r3, r8
 8009b9c:	1ad2      	subs	r2, r2, r3
 8009b9e:	9205      	str	r2, [sp, #20]
 8009ba0:	1aed      	subs	r5, r5, r3
 8009ba2:	eba8 0803 	sub.w	r8, r8, r3
 8009ba6:	9b07      	ldr	r3, [sp, #28]
 8009ba8:	b1eb      	cbz	r3, 8009be6 <_dtoa_r+0x76e>
 8009baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d067      	beq.n	8009c80 <_dtoa_r+0x808>
 8009bb0:	b18f      	cbz	r7, 8009bd6 <_dtoa_r+0x75e>
 8009bb2:	4631      	mov	r1, r6
 8009bb4:	463a      	mov	r2, r7
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f000 ff22 	bl	800aa00 <__pow5mult>
 8009bbc:	9a04      	ldr	r2, [sp, #16]
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f000 fe86 	bl	800a8d4 <__multiply>
 8009bc8:	9904      	ldr	r1, [sp, #16]
 8009bca:	9008      	str	r0, [sp, #32]
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f000 fd9a 	bl	800a706 <_Bfree>
 8009bd2:	9b08      	ldr	r3, [sp, #32]
 8009bd4:	9304      	str	r3, [sp, #16]
 8009bd6:	9b07      	ldr	r3, [sp, #28]
 8009bd8:	1bda      	subs	r2, r3, r7
 8009bda:	d004      	beq.n	8009be6 <_dtoa_r+0x76e>
 8009bdc:	9904      	ldr	r1, [sp, #16]
 8009bde:	4620      	mov	r0, r4
 8009be0:	f000 ff0e 	bl	800aa00 <__pow5mult>
 8009be4:	9004      	str	r0, [sp, #16]
 8009be6:	2101      	movs	r1, #1
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 fe6a 	bl	800a8c2 <__i2b>
 8009bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bf0:	4607      	mov	r7, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 81d0 	beq.w	8009f98 <_dtoa_r+0xb20>
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	4601      	mov	r1, r0
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f000 feff 	bl	800aa00 <__pow5mult>
 8009c02:	9b06      	ldr	r3, [sp, #24]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	4607      	mov	r7, r0
 8009c08:	dc40      	bgt.n	8009c8c <_dtoa_r+0x814>
 8009c0a:	9b00      	ldr	r3, [sp, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d139      	bne.n	8009c84 <_dtoa_r+0x80c>
 8009c10:	9b01      	ldr	r3, [sp, #4]
 8009c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d136      	bne.n	8009c88 <_dtoa_r+0x810>
 8009c1a:	9b01      	ldr	r3, [sp, #4]
 8009c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c20:	0d1b      	lsrs	r3, r3, #20
 8009c22:	051b      	lsls	r3, r3, #20
 8009c24:	b12b      	cbz	r3, 8009c32 <_dtoa_r+0x7ba>
 8009c26:	9b05      	ldr	r3, [sp, #20]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	9305      	str	r3, [sp, #20]
 8009c2c:	f108 0801 	add.w	r8, r8, #1
 8009c30:	2301      	movs	r3, #1
 8009c32:	9307      	str	r3, [sp, #28]
 8009c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d12a      	bne.n	8009c90 <_dtoa_r+0x818>
 8009c3a:	2001      	movs	r0, #1
 8009c3c:	e030      	b.n	8009ca0 <_dtoa_r+0x828>
 8009c3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c44:	e795      	b.n	8009b72 <_dtoa_r+0x6fa>
 8009c46:	9b07      	ldr	r3, [sp, #28]
 8009c48:	f109 37ff 	add.w	r7, r9, #4294967295
 8009c4c:	42bb      	cmp	r3, r7
 8009c4e:	bfbf      	itttt	lt
 8009c50:	9b07      	ldrlt	r3, [sp, #28]
 8009c52:	9707      	strlt	r7, [sp, #28]
 8009c54:	1afa      	sublt	r2, r7, r3
 8009c56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009c58:	bfbb      	ittet	lt
 8009c5a:	189b      	addlt	r3, r3, r2
 8009c5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009c5e:	1bdf      	subge	r7, r3, r7
 8009c60:	2700      	movlt	r7, #0
 8009c62:	f1b9 0f00 	cmp.w	r9, #0
 8009c66:	bfb5      	itete	lt
 8009c68:	9b05      	ldrlt	r3, [sp, #20]
 8009c6a:	9d05      	ldrge	r5, [sp, #20]
 8009c6c:	eba3 0509 	sublt.w	r5, r3, r9
 8009c70:	464b      	movge	r3, r9
 8009c72:	bfb8      	it	lt
 8009c74:	2300      	movlt	r3, #0
 8009c76:	e77e      	b.n	8009b76 <_dtoa_r+0x6fe>
 8009c78:	9f07      	ldr	r7, [sp, #28]
 8009c7a:	9d05      	ldr	r5, [sp, #20]
 8009c7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009c7e:	e783      	b.n	8009b88 <_dtoa_r+0x710>
 8009c80:	9a07      	ldr	r2, [sp, #28]
 8009c82:	e7ab      	b.n	8009bdc <_dtoa_r+0x764>
 8009c84:	2300      	movs	r3, #0
 8009c86:	e7d4      	b.n	8009c32 <_dtoa_r+0x7ba>
 8009c88:	9b00      	ldr	r3, [sp, #0]
 8009c8a:	e7d2      	b.n	8009c32 <_dtoa_r+0x7ba>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9307      	str	r3, [sp, #28]
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009c96:	6918      	ldr	r0, [r3, #16]
 8009c98:	f000 fdc5 	bl	800a826 <__hi0bits>
 8009c9c:	f1c0 0020 	rsb	r0, r0, #32
 8009ca0:	4440      	add	r0, r8
 8009ca2:	f010 001f 	ands.w	r0, r0, #31
 8009ca6:	d047      	beq.n	8009d38 <_dtoa_r+0x8c0>
 8009ca8:	f1c0 0320 	rsb	r3, r0, #32
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	dd3b      	ble.n	8009d28 <_dtoa_r+0x8b0>
 8009cb0:	9b05      	ldr	r3, [sp, #20]
 8009cb2:	f1c0 001c 	rsb	r0, r0, #28
 8009cb6:	4403      	add	r3, r0
 8009cb8:	9305      	str	r3, [sp, #20]
 8009cba:	4405      	add	r5, r0
 8009cbc:	4480      	add	r8, r0
 8009cbe:	9b05      	ldr	r3, [sp, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dd05      	ble.n	8009cd0 <_dtoa_r+0x858>
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	9904      	ldr	r1, [sp, #16]
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f000 fee7 	bl	800aa9c <__lshift>
 8009cce:	9004      	str	r0, [sp, #16]
 8009cd0:	f1b8 0f00 	cmp.w	r8, #0
 8009cd4:	dd05      	ble.n	8009ce2 <_dtoa_r+0x86a>
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	4642      	mov	r2, r8
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 fede 	bl	800aa9c <__lshift>
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ce4:	b353      	cbz	r3, 8009d3c <_dtoa_r+0x8c4>
 8009ce6:	4639      	mov	r1, r7
 8009ce8:	9804      	ldr	r0, [sp, #16]
 8009cea:	f000 ff2b 	bl	800ab44 <__mcmp>
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	da24      	bge.n	8009d3c <_dtoa_r+0x8c4>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	220a      	movs	r2, #10
 8009cf6:	9904      	ldr	r1, [sp, #16]
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 fd1b 	bl	800a734 <__multadd>
 8009cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d00:	9004      	str	r0, [sp, #16]
 8009d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 814d 	beq.w	8009fa6 <_dtoa_r+0xb2e>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	4631      	mov	r1, r6
 8009d10:	220a      	movs	r2, #10
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 fd0e 	bl	800a734 <__multadd>
 8009d18:	9b02      	ldr	r3, [sp, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	4606      	mov	r6, r0
 8009d1e:	dc4f      	bgt.n	8009dc0 <_dtoa_r+0x948>
 8009d20:	9b06      	ldr	r3, [sp, #24]
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	dd4c      	ble.n	8009dc0 <_dtoa_r+0x948>
 8009d26:	e011      	b.n	8009d4c <_dtoa_r+0x8d4>
 8009d28:	d0c9      	beq.n	8009cbe <_dtoa_r+0x846>
 8009d2a:	9a05      	ldr	r2, [sp, #20]
 8009d2c:	331c      	adds	r3, #28
 8009d2e:	441a      	add	r2, r3
 8009d30:	9205      	str	r2, [sp, #20]
 8009d32:	441d      	add	r5, r3
 8009d34:	4498      	add	r8, r3
 8009d36:	e7c2      	b.n	8009cbe <_dtoa_r+0x846>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	e7f6      	b.n	8009d2a <_dtoa_r+0x8b2>
 8009d3c:	f1b9 0f00 	cmp.w	r9, #0
 8009d40:	dc38      	bgt.n	8009db4 <_dtoa_r+0x93c>
 8009d42:	9b06      	ldr	r3, [sp, #24]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	dd35      	ble.n	8009db4 <_dtoa_r+0x93c>
 8009d48:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d4c:	9b02      	ldr	r3, [sp, #8]
 8009d4e:	b963      	cbnz	r3, 8009d6a <_dtoa_r+0x8f2>
 8009d50:	4639      	mov	r1, r7
 8009d52:	2205      	movs	r2, #5
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 fced 	bl	800a734 <__multadd>
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	9804      	ldr	r0, [sp, #16]
 8009d60:	f000 fef0 	bl	800ab44 <__mcmp>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	f73f adcc 	bgt.w	8009902 <_dtoa_r+0x48a>
 8009d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d6c:	465d      	mov	r5, fp
 8009d6e:	ea6f 0a03 	mvn.w	sl, r3
 8009d72:	f04f 0900 	mov.w	r9, #0
 8009d76:	4639      	mov	r1, r7
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f000 fcc4 	bl	800a706 <_Bfree>
 8009d7e:	2e00      	cmp	r6, #0
 8009d80:	f43f aeb7 	beq.w	8009af2 <_dtoa_r+0x67a>
 8009d84:	f1b9 0f00 	cmp.w	r9, #0
 8009d88:	d005      	beq.n	8009d96 <_dtoa_r+0x91e>
 8009d8a:	45b1      	cmp	r9, r6
 8009d8c:	d003      	beq.n	8009d96 <_dtoa_r+0x91e>
 8009d8e:	4649      	mov	r1, r9
 8009d90:	4620      	mov	r0, r4
 8009d92:	f000 fcb8 	bl	800a706 <_Bfree>
 8009d96:	4631      	mov	r1, r6
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f000 fcb4 	bl	800a706 <_Bfree>
 8009d9e:	e6a8      	b.n	8009af2 <_dtoa_r+0x67a>
 8009da0:	2700      	movs	r7, #0
 8009da2:	463e      	mov	r6, r7
 8009da4:	e7e1      	b.n	8009d6a <_dtoa_r+0x8f2>
 8009da6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009daa:	463e      	mov	r6, r7
 8009dac:	e5a9      	b.n	8009902 <_dtoa_r+0x48a>
 8009dae:	bf00      	nop
 8009db0:	40240000 	.word	0x40240000
 8009db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 80fa 	beq.w	8009fb4 <_dtoa_r+0xb3c>
 8009dc0:	2d00      	cmp	r5, #0
 8009dc2:	dd05      	ble.n	8009dd0 <_dtoa_r+0x958>
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 fe67 	bl	800aa9c <__lshift>
 8009dce:	4606      	mov	r6, r0
 8009dd0:	9b07      	ldr	r3, [sp, #28]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d04c      	beq.n	8009e70 <_dtoa_r+0x9f8>
 8009dd6:	6871      	ldr	r1, [r6, #4]
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 fc60 	bl	800a69e <_Balloc>
 8009dde:	6932      	ldr	r2, [r6, #16]
 8009de0:	3202      	adds	r2, #2
 8009de2:	4605      	mov	r5, r0
 8009de4:	0092      	lsls	r2, r2, #2
 8009de6:	f106 010c 	add.w	r1, r6, #12
 8009dea:	300c      	adds	r0, #12
 8009dec:	f000 fc4c 	bl	800a688 <memcpy>
 8009df0:	2201      	movs	r2, #1
 8009df2:	4629      	mov	r1, r5
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 fe51 	bl	800aa9c <__lshift>
 8009dfa:	9b00      	ldr	r3, [sp, #0]
 8009dfc:	f8cd b014 	str.w	fp, [sp, #20]
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	46b1      	mov	r9, r6
 8009e06:	9307      	str	r3, [sp, #28]
 8009e08:	4606      	mov	r6, r0
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	9804      	ldr	r0, [sp, #16]
 8009e0e:	f7ff faa7 	bl	8009360 <quorem>
 8009e12:	4649      	mov	r1, r9
 8009e14:	4605      	mov	r5, r0
 8009e16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009e1a:	9804      	ldr	r0, [sp, #16]
 8009e1c:	f000 fe92 	bl	800ab44 <__mcmp>
 8009e20:	4632      	mov	r2, r6
 8009e22:	9000      	str	r0, [sp, #0]
 8009e24:	4639      	mov	r1, r7
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 fea6 	bl	800ab78 <__mdiff>
 8009e2c:	68c3      	ldr	r3, [r0, #12]
 8009e2e:	4602      	mov	r2, r0
 8009e30:	bb03      	cbnz	r3, 8009e74 <_dtoa_r+0x9fc>
 8009e32:	4601      	mov	r1, r0
 8009e34:	9008      	str	r0, [sp, #32]
 8009e36:	9804      	ldr	r0, [sp, #16]
 8009e38:	f000 fe84 	bl	800ab44 <__mcmp>
 8009e3c:	9a08      	ldr	r2, [sp, #32]
 8009e3e:	4603      	mov	r3, r0
 8009e40:	4611      	mov	r1, r2
 8009e42:	4620      	mov	r0, r4
 8009e44:	9308      	str	r3, [sp, #32]
 8009e46:	f000 fc5e 	bl	800a706 <_Bfree>
 8009e4a:	9b08      	ldr	r3, [sp, #32]
 8009e4c:	b9a3      	cbnz	r3, 8009e78 <_dtoa_r+0xa00>
 8009e4e:	9a06      	ldr	r2, [sp, #24]
 8009e50:	b992      	cbnz	r2, 8009e78 <_dtoa_r+0xa00>
 8009e52:	9a07      	ldr	r2, [sp, #28]
 8009e54:	b982      	cbnz	r2, 8009e78 <_dtoa_r+0xa00>
 8009e56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009e5a:	d029      	beq.n	8009eb0 <_dtoa_r+0xa38>
 8009e5c:	9b00      	ldr	r3, [sp, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	dd01      	ble.n	8009e66 <_dtoa_r+0x9ee>
 8009e62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009e66:	9b05      	ldr	r3, [sp, #20]
 8009e68:	1c5d      	adds	r5, r3, #1
 8009e6a:	f883 8000 	strb.w	r8, [r3]
 8009e6e:	e782      	b.n	8009d76 <_dtoa_r+0x8fe>
 8009e70:	4630      	mov	r0, r6
 8009e72:	e7c2      	b.n	8009dfa <_dtoa_r+0x982>
 8009e74:	2301      	movs	r3, #1
 8009e76:	e7e3      	b.n	8009e40 <_dtoa_r+0x9c8>
 8009e78:	9a00      	ldr	r2, [sp, #0]
 8009e7a:	2a00      	cmp	r2, #0
 8009e7c:	db04      	blt.n	8009e88 <_dtoa_r+0xa10>
 8009e7e:	d125      	bne.n	8009ecc <_dtoa_r+0xa54>
 8009e80:	9a06      	ldr	r2, [sp, #24]
 8009e82:	bb1a      	cbnz	r2, 8009ecc <_dtoa_r+0xa54>
 8009e84:	9a07      	ldr	r2, [sp, #28]
 8009e86:	bb0a      	cbnz	r2, 8009ecc <_dtoa_r+0xa54>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	ddec      	ble.n	8009e66 <_dtoa_r+0x9ee>
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	9904      	ldr	r1, [sp, #16]
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 fe03 	bl	800aa9c <__lshift>
 8009e96:	4639      	mov	r1, r7
 8009e98:	9004      	str	r0, [sp, #16]
 8009e9a:	f000 fe53 	bl	800ab44 <__mcmp>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	dc03      	bgt.n	8009eaa <_dtoa_r+0xa32>
 8009ea2:	d1e0      	bne.n	8009e66 <_dtoa_r+0x9ee>
 8009ea4:	f018 0f01 	tst.w	r8, #1
 8009ea8:	d0dd      	beq.n	8009e66 <_dtoa_r+0x9ee>
 8009eaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009eae:	d1d8      	bne.n	8009e62 <_dtoa_r+0x9ea>
 8009eb0:	9b05      	ldr	r3, [sp, #20]
 8009eb2:	9a05      	ldr	r2, [sp, #20]
 8009eb4:	1c5d      	adds	r5, r3, #1
 8009eb6:	2339      	movs	r3, #57	; 0x39
 8009eb8:	7013      	strb	r3, [r2, #0]
 8009eba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ebe:	2b39      	cmp	r3, #57	; 0x39
 8009ec0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009ec4:	d04f      	beq.n	8009f66 <_dtoa_r+0xaee>
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	7013      	strb	r3, [r2, #0]
 8009eca:	e754      	b.n	8009d76 <_dtoa_r+0x8fe>
 8009ecc:	9a05      	ldr	r2, [sp, #20]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f102 0501 	add.w	r5, r2, #1
 8009ed4:	dd06      	ble.n	8009ee4 <_dtoa_r+0xa6c>
 8009ed6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009eda:	d0e9      	beq.n	8009eb0 <_dtoa_r+0xa38>
 8009edc:	f108 0801 	add.w	r8, r8, #1
 8009ee0:	9b05      	ldr	r3, [sp, #20]
 8009ee2:	e7c2      	b.n	8009e6a <_dtoa_r+0x9f2>
 8009ee4:	9a02      	ldr	r2, [sp, #8]
 8009ee6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009eea:	eba5 030b 	sub.w	r3, r5, fp
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d021      	beq.n	8009f36 <_dtoa_r+0xabe>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	220a      	movs	r2, #10
 8009ef6:	9904      	ldr	r1, [sp, #16]
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 fc1b 	bl	800a734 <__multadd>
 8009efe:	45b1      	cmp	r9, r6
 8009f00:	9004      	str	r0, [sp, #16]
 8009f02:	f04f 0300 	mov.w	r3, #0
 8009f06:	f04f 020a 	mov.w	r2, #10
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	d105      	bne.n	8009f1c <_dtoa_r+0xaa4>
 8009f10:	f000 fc10 	bl	800a734 <__multadd>
 8009f14:	4681      	mov	r9, r0
 8009f16:	4606      	mov	r6, r0
 8009f18:	9505      	str	r5, [sp, #20]
 8009f1a:	e776      	b.n	8009e0a <_dtoa_r+0x992>
 8009f1c:	f000 fc0a 	bl	800a734 <__multadd>
 8009f20:	4631      	mov	r1, r6
 8009f22:	4681      	mov	r9, r0
 8009f24:	2300      	movs	r3, #0
 8009f26:	220a      	movs	r2, #10
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 fc03 	bl	800a734 <__multadd>
 8009f2e:	4606      	mov	r6, r0
 8009f30:	e7f2      	b.n	8009f18 <_dtoa_r+0xaa0>
 8009f32:	f04f 0900 	mov.w	r9, #0
 8009f36:	2201      	movs	r2, #1
 8009f38:	9904      	ldr	r1, [sp, #16]
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fdae 	bl	800aa9c <__lshift>
 8009f40:	4639      	mov	r1, r7
 8009f42:	9004      	str	r0, [sp, #16]
 8009f44:	f000 fdfe 	bl	800ab44 <__mcmp>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	dcb6      	bgt.n	8009eba <_dtoa_r+0xa42>
 8009f4c:	d102      	bne.n	8009f54 <_dtoa_r+0xadc>
 8009f4e:	f018 0f01 	tst.w	r8, #1
 8009f52:	d1b2      	bne.n	8009eba <_dtoa_r+0xa42>
 8009f54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f58:	2b30      	cmp	r3, #48	; 0x30
 8009f5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009f5e:	f47f af0a 	bne.w	8009d76 <_dtoa_r+0x8fe>
 8009f62:	4615      	mov	r5, r2
 8009f64:	e7f6      	b.n	8009f54 <_dtoa_r+0xadc>
 8009f66:	4593      	cmp	fp, r2
 8009f68:	d105      	bne.n	8009f76 <_dtoa_r+0xafe>
 8009f6a:	2331      	movs	r3, #49	; 0x31
 8009f6c:	f10a 0a01 	add.w	sl, sl, #1
 8009f70:	f88b 3000 	strb.w	r3, [fp]
 8009f74:	e6ff      	b.n	8009d76 <_dtoa_r+0x8fe>
 8009f76:	4615      	mov	r5, r2
 8009f78:	e79f      	b.n	8009eba <_dtoa_r+0xa42>
 8009f7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009fe0 <_dtoa_r+0xb68>
 8009f7e:	e007      	b.n	8009f90 <_dtoa_r+0xb18>
 8009f80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009fe4 <_dtoa_r+0xb6c>
 8009f86:	b11b      	cbz	r3, 8009f90 <_dtoa_r+0xb18>
 8009f88:	f10b 0308 	add.w	r3, fp, #8
 8009f8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	4658      	mov	r0, fp
 8009f92:	b017      	add	sp, #92	; 0x5c
 8009f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f98:	9b06      	ldr	r3, [sp, #24]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	f77f ae35 	ble.w	8009c0a <_dtoa_r+0x792>
 8009fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fa2:	9307      	str	r3, [sp, #28]
 8009fa4:	e649      	b.n	8009c3a <_dtoa_r+0x7c2>
 8009fa6:	9b02      	ldr	r3, [sp, #8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dc03      	bgt.n	8009fb4 <_dtoa_r+0xb3c>
 8009fac:	9b06      	ldr	r3, [sp, #24]
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	f73f aecc 	bgt.w	8009d4c <_dtoa_r+0x8d4>
 8009fb4:	465d      	mov	r5, fp
 8009fb6:	4639      	mov	r1, r7
 8009fb8:	9804      	ldr	r0, [sp, #16]
 8009fba:	f7ff f9d1 	bl	8009360 <quorem>
 8009fbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009fc2:	f805 8b01 	strb.w	r8, [r5], #1
 8009fc6:	9a02      	ldr	r2, [sp, #8]
 8009fc8:	eba5 030b 	sub.w	r3, r5, fp
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	ddb0      	ble.n	8009f32 <_dtoa_r+0xaba>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	220a      	movs	r2, #10
 8009fd4:	9904      	ldr	r1, [sp, #16]
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 fbac 	bl	800a734 <__multadd>
 8009fdc:	9004      	str	r0, [sp, #16]
 8009fde:	e7ea      	b.n	8009fb6 <_dtoa_r+0xb3e>
 8009fe0:	0800c698 	.word	0x0800c698
 8009fe4:	0800c710 	.word	0x0800c710

08009fe8 <rshift>:
 8009fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fea:	6906      	ldr	r6, [r0, #16]
 8009fec:	114b      	asrs	r3, r1, #5
 8009fee:	429e      	cmp	r6, r3
 8009ff0:	f100 0414 	add.w	r4, r0, #20
 8009ff4:	dd30      	ble.n	800a058 <rshift+0x70>
 8009ff6:	f011 011f 	ands.w	r1, r1, #31
 8009ffa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009ffe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a002:	d108      	bne.n	800a016 <rshift+0x2e>
 800a004:	4621      	mov	r1, r4
 800a006:	42b2      	cmp	r2, r6
 800a008:	460b      	mov	r3, r1
 800a00a:	d211      	bcs.n	800a030 <rshift+0x48>
 800a00c:	f852 3b04 	ldr.w	r3, [r2], #4
 800a010:	f841 3b04 	str.w	r3, [r1], #4
 800a014:	e7f7      	b.n	800a006 <rshift+0x1e>
 800a016:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a01a:	f1c1 0c20 	rsb	ip, r1, #32
 800a01e:	40cd      	lsrs	r5, r1
 800a020:	3204      	adds	r2, #4
 800a022:	4623      	mov	r3, r4
 800a024:	42b2      	cmp	r2, r6
 800a026:	4617      	mov	r7, r2
 800a028:	d30c      	bcc.n	800a044 <rshift+0x5c>
 800a02a:	601d      	str	r5, [r3, #0]
 800a02c:	b105      	cbz	r5, 800a030 <rshift+0x48>
 800a02e:	3304      	adds	r3, #4
 800a030:	1b1a      	subs	r2, r3, r4
 800a032:	42a3      	cmp	r3, r4
 800a034:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a038:	bf08      	it	eq
 800a03a:	2300      	moveq	r3, #0
 800a03c:	6102      	str	r2, [r0, #16]
 800a03e:	bf08      	it	eq
 800a040:	6143      	streq	r3, [r0, #20]
 800a042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a044:	683f      	ldr	r7, [r7, #0]
 800a046:	fa07 f70c 	lsl.w	r7, r7, ip
 800a04a:	433d      	orrs	r5, r7
 800a04c:	f843 5b04 	str.w	r5, [r3], #4
 800a050:	f852 5b04 	ldr.w	r5, [r2], #4
 800a054:	40cd      	lsrs	r5, r1
 800a056:	e7e5      	b.n	800a024 <rshift+0x3c>
 800a058:	4623      	mov	r3, r4
 800a05a:	e7e9      	b.n	800a030 <rshift+0x48>

0800a05c <__hexdig_fun>:
 800a05c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a060:	2b09      	cmp	r3, #9
 800a062:	d802      	bhi.n	800a06a <__hexdig_fun+0xe>
 800a064:	3820      	subs	r0, #32
 800a066:	b2c0      	uxtb	r0, r0
 800a068:	4770      	bx	lr
 800a06a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a06e:	2b05      	cmp	r3, #5
 800a070:	d801      	bhi.n	800a076 <__hexdig_fun+0x1a>
 800a072:	3847      	subs	r0, #71	; 0x47
 800a074:	e7f7      	b.n	800a066 <__hexdig_fun+0xa>
 800a076:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a07a:	2b05      	cmp	r3, #5
 800a07c:	d801      	bhi.n	800a082 <__hexdig_fun+0x26>
 800a07e:	3827      	subs	r0, #39	; 0x27
 800a080:	e7f1      	b.n	800a066 <__hexdig_fun+0xa>
 800a082:	2000      	movs	r0, #0
 800a084:	4770      	bx	lr

0800a086 <__gethex>:
 800a086:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08a:	b08b      	sub	sp, #44	; 0x2c
 800a08c:	468a      	mov	sl, r1
 800a08e:	9002      	str	r0, [sp, #8]
 800a090:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a092:	9306      	str	r3, [sp, #24]
 800a094:	4690      	mov	r8, r2
 800a096:	f000 facd 	bl	800a634 <__localeconv_l>
 800a09a:	6803      	ldr	r3, [r0, #0]
 800a09c:	9303      	str	r3, [sp, #12]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7f6 f8e6 	bl	8000270 <strlen>
 800a0a4:	9b03      	ldr	r3, [sp, #12]
 800a0a6:	9001      	str	r0, [sp, #4]
 800a0a8:	4403      	add	r3, r0
 800a0aa:	f04f 0b00 	mov.w	fp, #0
 800a0ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a0b2:	9307      	str	r3, [sp, #28]
 800a0b4:	f8da 3000 	ldr.w	r3, [sl]
 800a0b8:	3302      	adds	r3, #2
 800a0ba:	461f      	mov	r7, r3
 800a0bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a0c0:	2830      	cmp	r0, #48	; 0x30
 800a0c2:	d06c      	beq.n	800a19e <__gethex+0x118>
 800a0c4:	f7ff ffca 	bl	800a05c <__hexdig_fun>
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d16a      	bne.n	800a1a4 <__gethex+0x11e>
 800a0ce:	9a01      	ldr	r2, [sp, #4]
 800a0d0:	9903      	ldr	r1, [sp, #12]
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	f7fe fb0d 	bl	80086f2 <strncmp>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d166      	bne.n	800a1aa <__gethex+0x124>
 800a0dc:	9b01      	ldr	r3, [sp, #4]
 800a0de:	5cf8      	ldrb	r0, [r7, r3]
 800a0e0:	18fe      	adds	r6, r7, r3
 800a0e2:	f7ff ffbb 	bl	800a05c <__hexdig_fun>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d062      	beq.n	800a1b0 <__gethex+0x12a>
 800a0ea:	4633      	mov	r3, r6
 800a0ec:	7818      	ldrb	r0, [r3, #0]
 800a0ee:	2830      	cmp	r0, #48	; 0x30
 800a0f0:	461f      	mov	r7, r3
 800a0f2:	f103 0301 	add.w	r3, r3, #1
 800a0f6:	d0f9      	beq.n	800a0ec <__gethex+0x66>
 800a0f8:	f7ff ffb0 	bl	800a05c <__hexdig_fun>
 800a0fc:	fab0 f580 	clz	r5, r0
 800a100:	096d      	lsrs	r5, r5, #5
 800a102:	4634      	mov	r4, r6
 800a104:	f04f 0b01 	mov.w	fp, #1
 800a108:	463a      	mov	r2, r7
 800a10a:	4616      	mov	r6, r2
 800a10c:	3201      	adds	r2, #1
 800a10e:	7830      	ldrb	r0, [r6, #0]
 800a110:	f7ff ffa4 	bl	800a05c <__hexdig_fun>
 800a114:	2800      	cmp	r0, #0
 800a116:	d1f8      	bne.n	800a10a <__gethex+0x84>
 800a118:	9a01      	ldr	r2, [sp, #4]
 800a11a:	9903      	ldr	r1, [sp, #12]
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7fe fae8 	bl	80086f2 <strncmp>
 800a122:	b950      	cbnz	r0, 800a13a <__gethex+0xb4>
 800a124:	b954      	cbnz	r4, 800a13c <__gethex+0xb6>
 800a126:	9b01      	ldr	r3, [sp, #4]
 800a128:	18f4      	adds	r4, r6, r3
 800a12a:	4622      	mov	r2, r4
 800a12c:	4616      	mov	r6, r2
 800a12e:	3201      	adds	r2, #1
 800a130:	7830      	ldrb	r0, [r6, #0]
 800a132:	f7ff ff93 	bl	800a05c <__hexdig_fun>
 800a136:	2800      	cmp	r0, #0
 800a138:	d1f8      	bne.n	800a12c <__gethex+0xa6>
 800a13a:	b10c      	cbz	r4, 800a140 <__gethex+0xba>
 800a13c:	1ba4      	subs	r4, r4, r6
 800a13e:	00a4      	lsls	r4, r4, #2
 800a140:	7833      	ldrb	r3, [r6, #0]
 800a142:	2b50      	cmp	r3, #80	; 0x50
 800a144:	d001      	beq.n	800a14a <__gethex+0xc4>
 800a146:	2b70      	cmp	r3, #112	; 0x70
 800a148:	d140      	bne.n	800a1cc <__gethex+0x146>
 800a14a:	7873      	ldrb	r3, [r6, #1]
 800a14c:	2b2b      	cmp	r3, #43	; 0x2b
 800a14e:	d031      	beq.n	800a1b4 <__gethex+0x12e>
 800a150:	2b2d      	cmp	r3, #45	; 0x2d
 800a152:	d033      	beq.n	800a1bc <__gethex+0x136>
 800a154:	1c71      	adds	r1, r6, #1
 800a156:	f04f 0900 	mov.w	r9, #0
 800a15a:	7808      	ldrb	r0, [r1, #0]
 800a15c:	f7ff ff7e 	bl	800a05c <__hexdig_fun>
 800a160:	1e43      	subs	r3, r0, #1
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b18      	cmp	r3, #24
 800a166:	d831      	bhi.n	800a1cc <__gethex+0x146>
 800a168:	f1a0 0210 	sub.w	r2, r0, #16
 800a16c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a170:	f7ff ff74 	bl	800a05c <__hexdig_fun>
 800a174:	1e43      	subs	r3, r0, #1
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b18      	cmp	r3, #24
 800a17a:	d922      	bls.n	800a1c2 <__gethex+0x13c>
 800a17c:	f1b9 0f00 	cmp.w	r9, #0
 800a180:	d000      	beq.n	800a184 <__gethex+0xfe>
 800a182:	4252      	negs	r2, r2
 800a184:	4414      	add	r4, r2
 800a186:	f8ca 1000 	str.w	r1, [sl]
 800a18a:	b30d      	cbz	r5, 800a1d0 <__gethex+0x14a>
 800a18c:	f1bb 0f00 	cmp.w	fp, #0
 800a190:	bf0c      	ite	eq
 800a192:	2706      	moveq	r7, #6
 800a194:	2700      	movne	r7, #0
 800a196:	4638      	mov	r0, r7
 800a198:	b00b      	add	sp, #44	; 0x2c
 800a19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a19e:	f10b 0b01 	add.w	fp, fp, #1
 800a1a2:	e78a      	b.n	800a0ba <__gethex+0x34>
 800a1a4:	2500      	movs	r5, #0
 800a1a6:	462c      	mov	r4, r5
 800a1a8:	e7ae      	b.n	800a108 <__gethex+0x82>
 800a1aa:	463e      	mov	r6, r7
 800a1ac:	2501      	movs	r5, #1
 800a1ae:	e7c7      	b.n	800a140 <__gethex+0xba>
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	e7fb      	b.n	800a1ac <__gethex+0x126>
 800a1b4:	f04f 0900 	mov.w	r9, #0
 800a1b8:	1cb1      	adds	r1, r6, #2
 800a1ba:	e7ce      	b.n	800a15a <__gethex+0xd4>
 800a1bc:	f04f 0901 	mov.w	r9, #1
 800a1c0:	e7fa      	b.n	800a1b8 <__gethex+0x132>
 800a1c2:	230a      	movs	r3, #10
 800a1c4:	fb03 0202 	mla	r2, r3, r2, r0
 800a1c8:	3a10      	subs	r2, #16
 800a1ca:	e7cf      	b.n	800a16c <__gethex+0xe6>
 800a1cc:	4631      	mov	r1, r6
 800a1ce:	e7da      	b.n	800a186 <__gethex+0x100>
 800a1d0:	1bf3      	subs	r3, r6, r7
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	2b07      	cmp	r3, #7
 800a1d8:	dc49      	bgt.n	800a26e <__gethex+0x1e8>
 800a1da:	9802      	ldr	r0, [sp, #8]
 800a1dc:	f000 fa5f 	bl	800a69e <_Balloc>
 800a1e0:	9b01      	ldr	r3, [sp, #4]
 800a1e2:	f100 0914 	add.w	r9, r0, #20
 800a1e6:	f04f 0b00 	mov.w	fp, #0
 800a1ea:	f1c3 0301 	rsb	r3, r3, #1
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	f8cd 9010 	str.w	r9, [sp, #16]
 800a1f4:	46da      	mov	sl, fp
 800a1f6:	9308      	str	r3, [sp, #32]
 800a1f8:	42b7      	cmp	r7, r6
 800a1fa:	d33b      	bcc.n	800a274 <__gethex+0x1ee>
 800a1fc:	9804      	ldr	r0, [sp, #16]
 800a1fe:	f840 ab04 	str.w	sl, [r0], #4
 800a202:	eba0 0009 	sub.w	r0, r0, r9
 800a206:	1080      	asrs	r0, r0, #2
 800a208:	6128      	str	r0, [r5, #16]
 800a20a:	0147      	lsls	r7, r0, #5
 800a20c:	4650      	mov	r0, sl
 800a20e:	f000 fb0a 	bl	800a826 <__hi0bits>
 800a212:	f8d8 6000 	ldr.w	r6, [r8]
 800a216:	1a3f      	subs	r7, r7, r0
 800a218:	42b7      	cmp	r7, r6
 800a21a:	dd64      	ble.n	800a2e6 <__gethex+0x260>
 800a21c:	1bbf      	subs	r7, r7, r6
 800a21e:	4639      	mov	r1, r7
 800a220:	4628      	mov	r0, r5
 800a222:	f000 fe19 	bl	800ae58 <__any_on>
 800a226:	4682      	mov	sl, r0
 800a228:	b178      	cbz	r0, 800a24a <__gethex+0x1c4>
 800a22a:	1e7b      	subs	r3, r7, #1
 800a22c:	1159      	asrs	r1, r3, #5
 800a22e:	f003 021f 	and.w	r2, r3, #31
 800a232:	f04f 0a01 	mov.w	sl, #1
 800a236:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a23a:	fa0a f202 	lsl.w	r2, sl, r2
 800a23e:	420a      	tst	r2, r1
 800a240:	d003      	beq.n	800a24a <__gethex+0x1c4>
 800a242:	4553      	cmp	r3, sl
 800a244:	dc46      	bgt.n	800a2d4 <__gethex+0x24e>
 800a246:	f04f 0a02 	mov.w	sl, #2
 800a24a:	4639      	mov	r1, r7
 800a24c:	4628      	mov	r0, r5
 800a24e:	f7ff fecb 	bl	8009fe8 <rshift>
 800a252:	443c      	add	r4, r7
 800a254:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a258:	42a3      	cmp	r3, r4
 800a25a:	da52      	bge.n	800a302 <__gethex+0x27c>
 800a25c:	4629      	mov	r1, r5
 800a25e:	9802      	ldr	r0, [sp, #8]
 800a260:	f000 fa51 	bl	800a706 <_Bfree>
 800a264:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a266:	2300      	movs	r3, #0
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	27a3      	movs	r7, #163	; 0xa3
 800a26c:	e793      	b.n	800a196 <__gethex+0x110>
 800a26e:	3101      	adds	r1, #1
 800a270:	105b      	asrs	r3, r3, #1
 800a272:	e7b0      	b.n	800a1d6 <__gethex+0x150>
 800a274:	1e73      	subs	r3, r6, #1
 800a276:	9305      	str	r3, [sp, #20]
 800a278:	9a07      	ldr	r2, [sp, #28]
 800a27a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a27e:	4293      	cmp	r3, r2
 800a280:	d018      	beq.n	800a2b4 <__gethex+0x22e>
 800a282:	f1bb 0f20 	cmp.w	fp, #32
 800a286:	d107      	bne.n	800a298 <__gethex+0x212>
 800a288:	9b04      	ldr	r3, [sp, #16]
 800a28a:	f8c3 a000 	str.w	sl, [r3]
 800a28e:	3304      	adds	r3, #4
 800a290:	f04f 0a00 	mov.w	sl, #0
 800a294:	9304      	str	r3, [sp, #16]
 800a296:	46d3      	mov	fp, sl
 800a298:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a29c:	f7ff fede 	bl	800a05c <__hexdig_fun>
 800a2a0:	f000 000f 	and.w	r0, r0, #15
 800a2a4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a2a8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a2ac:	f10b 0b04 	add.w	fp, fp, #4
 800a2b0:	9b05      	ldr	r3, [sp, #20]
 800a2b2:	e00d      	b.n	800a2d0 <__gethex+0x24a>
 800a2b4:	9b05      	ldr	r3, [sp, #20]
 800a2b6:	9a08      	ldr	r2, [sp, #32]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	42bb      	cmp	r3, r7
 800a2bc:	d3e1      	bcc.n	800a282 <__gethex+0x1fc>
 800a2be:	4618      	mov	r0, r3
 800a2c0:	9a01      	ldr	r2, [sp, #4]
 800a2c2:	9903      	ldr	r1, [sp, #12]
 800a2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c6:	f7fe fa14 	bl	80086f2 <strncmp>
 800a2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d1d8      	bne.n	800a282 <__gethex+0x1fc>
 800a2d0:	461e      	mov	r6, r3
 800a2d2:	e791      	b.n	800a1f8 <__gethex+0x172>
 800a2d4:	1eb9      	subs	r1, r7, #2
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f000 fdbe 	bl	800ae58 <__any_on>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d0b2      	beq.n	800a246 <__gethex+0x1c0>
 800a2e0:	f04f 0a03 	mov.w	sl, #3
 800a2e4:	e7b1      	b.n	800a24a <__gethex+0x1c4>
 800a2e6:	da09      	bge.n	800a2fc <__gethex+0x276>
 800a2e8:	1bf7      	subs	r7, r6, r7
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	463a      	mov	r2, r7
 800a2ee:	9802      	ldr	r0, [sp, #8]
 800a2f0:	f000 fbd4 	bl	800aa9c <__lshift>
 800a2f4:	1be4      	subs	r4, r4, r7
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	f100 0914 	add.w	r9, r0, #20
 800a2fc:	f04f 0a00 	mov.w	sl, #0
 800a300:	e7a8      	b.n	800a254 <__gethex+0x1ce>
 800a302:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a306:	42a0      	cmp	r0, r4
 800a308:	dd6a      	ble.n	800a3e0 <__gethex+0x35a>
 800a30a:	1b04      	subs	r4, r0, r4
 800a30c:	42a6      	cmp	r6, r4
 800a30e:	dc2e      	bgt.n	800a36e <__gethex+0x2e8>
 800a310:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a314:	2b02      	cmp	r3, #2
 800a316:	d022      	beq.n	800a35e <__gethex+0x2d8>
 800a318:	2b03      	cmp	r3, #3
 800a31a:	d024      	beq.n	800a366 <__gethex+0x2e0>
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d115      	bne.n	800a34c <__gethex+0x2c6>
 800a320:	42a6      	cmp	r6, r4
 800a322:	d113      	bne.n	800a34c <__gethex+0x2c6>
 800a324:	2e01      	cmp	r6, #1
 800a326:	dc0b      	bgt.n	800a340 <__gethex+0x2ba>
 800a328:	9a06      	ldr	r2, [sp, #24]
 800a32a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	2301      	movs	r3, #1
 800a332:	612b      	str	r3, [r5, #16]
 800a334:	f8c9 3000 	str.w	r3, [r9]
 800a338:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a33a:	2762      	movs	r7, #98	; 0x62
 800a33c:	601d      	str	r5, [r3, #0]
 800a33e:	e72a      	b.n	800a196 <__gethex+0x110>
 800a340:	1e71      	subs	r1, r6, #1
 800a342:	4628      	mov	r0, r5
 800a344:	f000 fd88 	bl	800ae58 <__any_on>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d1ed      	bne.n	800a328 <__gethex+0x2a2>
 800a34c:	4629      	mov	r1, r5
 800a34e:	9802      	ldr	r0, [sp, #8]
 800a350:	f000 f9d9 	bl	800a706 <_Bfree>
 800a354:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a356:	2300      	movs	r3, #0
 800a358:	6013      	str	r3, [r2, #0]
 800a35a:	2750      	movs	r7, #80	; 0x50
 800a35c:	e71b      	b.n	800a196 <__gethex+0x110>
 800a35e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a360:	2b00      	cmp	r3, #0
 800a362:	d0e1      	beq.n	800a328 <__gethex+0x2a2>
 800a364:	e7f2      	b.n	800a34c <__gethex+0x2c6>
 800a366:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1dd      	bne.n	800a328 <__gethex+0x2a2>
 800a36c:	e7ee      	b.n	800a34c <__gethex+0x2c6>
 800a36e:	1e67      	subs	r7, r4, #1
 800a370:	f1ba 0f00 	cmp.w	sl, #0
 800a374:	d131      	bne.n	800a3da <__gethex+0x354>
 800a376:	b127      	cbz	r7, 800a382 <__gethex+0x2fc>
 800a378:	4639      	mov	r1, r7
 800a37a:	4628      	mov	r0, r5
 800a37c:	f000 fd6c 	bl	800ae58 <__any_on>
 800a380:	4682      	mov	sl, r0
 800a382:	117a      	asrs	r2, r7, #5
 800a384:	2301      	movs	r3, #1
 800a386:	f007 071f 	and.w	r7, r7, #31
 800a38a:	fa03 f707 	lsl.w	r7, r3, r7
 800a38e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a392:	4621      	mov	r1, r4
 800a394:	421f      	tst	r7, r3
 800a396:	4628      	mov	r0, r5
 800a398:	bf18      	it	ne
 800a39a:	f04a 0a02 	orrne.w	sl, sl, #2
 800a39e:	1b36      	subs	r6, r6, r4
 800a3a0:	f7ff fe22 	bl	8009fe8 <rshift>
 800a3a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a3a8:	2702      	movs	r7, #2
 800a3aa:	f1ba 0f00 	cmp.w	sl, #0
 800a3ae:	d048      	beq.n	800a442 <__gethex+0x3bc>
 800a3b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d015      	beq.n	800a3e4 <__gethex+0x35e>
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d017      	beq.n	800a3ec <__gethex+0x366>
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d109      	bne.n	800a3d4 <__gethex+0x34e>
 800a3c0:	f01a 0f02 	tst.w	sl, #2
 800a3c4:	d006      	beq.n	800a3d4 <__gethex+0x34e>
 800a3c6:	f8d9 3000 	ldr.w	r3, [r9]
 800a3ca:	ea4a 0a03 	orr.w	sl, sl, r3
 800a3ce:	f01a 0f01 	tst.w	sl, #1
 800a3d2:	d10e      	bne.n	800a3f2 <__gethex+0x36c>
 800a3d4:	f047 0710 	orr.w	r7, r7, #16
 800a3d8:	e033      	b.n	800a442 <__gethex+0x3bc>
 800a3da:	f04f 0a01 	mov.w	sl, #1
 800a3de:	e7d0      	b.n	800a382 <__gethex+0x2fc>
 800a3e0:	2701      	movs	r7, #1
 800a3e2:	e7e2      	b.n	800a3aa <__gethex+0x324>
 800a3e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3e6:	f1c3 0301 	rsb	r3, r3, #1
 800a3ea:	9315      	str	r3, [sp, #84]	; 0x54
 800a3ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0f0      	beq.n	800a3d4 <__gethex+0x34e>
 800a3f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a3f6:	f105 0314 	add.w	r3, r5, #20
 800a3fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a3fe:	eb03 010a 	add.w	r1, r3, sl
 800a402:	f04f 0c00 	mov.w	ip, #0
 800a406:	4618      	mov	r0, r3
 800a408:	f853 2b04 	ldr.w	r2, [r3], #4
 800a40c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a410:	d01c      	beq.n	800a44c <__gethex+0x3c6>
 800a412:	3201      	adds	r2, #1
 800a414:	6002      	str	r2, [r0, #0]
 800a416:	2f02      	cmp	r7, #2
 800a418:	f105 0314 	add.w	r3, r5, #20
 800a41c:	d138      	bne.n	800a490 <__gethex+0x40a>
 800a41e:	f8d8 2000 	ldr.w	r2, [r8]
 800a422:	3a01      	subs	r2, #1
 800a424:	42b2      	cmp	r2, r6
 800a426:	d10a      	bne.n	800a43e <__gethex+0x3b8>
 800a428:	1171      	asrs	r1, r6, #5
 800a42a:	2201      	movs	r2, #1
 800a42c:	f006 061f 	and.w	r6, r6, #31
 800a430:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a434:	fa02 f606 	lsl.w	r6, r2, r6
 800a438:	421e      	tst	r6, r3
 800a43a:	bf18      	it	ne
 800a43c:	4617      	movne	r7, r2
 800a43e:	f047 0720 	orr.w	r7, r7, #32
 800a442:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a444:	601d      	str	r5, [r3, #0]
 800a446:	9b06      	ldr	r3, [sp, #24]
 800a448:	601c      	str	r4, [r3, #0]
 800a44a:	e6a4      	b.n	800a196 <__gethex+0x110>
 800a44c:	4299      	cmp	r1, r3
 800a44e:	f843 cc04 	str.w	ip, [r3, #-4]
 800a452:	d8d8      	bhi.n	800a406 <__gethex+0x380>
 800a454:	68ab      	ldr	r3, [r5, #8]
 800a456:	4599      	cmp	r9, r3
 800a458:	db12      	blt.n	800a480 <__gethex+0x3fa>
 800a45a:	6869      	ldr	r1, [r5, #4]
 800a45c:	9802      	ldr	r0, [sp, #8]
 800a45e:	3101      	adds	r1, #1
 800a460:	f000 f91d 	bl	800a69e <_Balloc>
 800a464:	692a      	ldr	r2, [r5, #16]
 800a466:	3202      	adds	r2, #2
 800a468:	f105 010c 	add.w	r1, r5, #12
 800a46c:	4683      	mov	fp, r0
 800a46e:	0092      	lsls	r2, r2, #2
 800a470:	300c      	adds	r0, #12
 800a472:	f000 f909 	bl	800a688 <memcpy>
 800a476:	4629      	mov	r1, r5
 800a478:	9802      	ldr	r0, [sp, #8]
 800a47a:	f000 f944 	bl	800a706 <_Bfree>
 800a47e:	465d      	mov	r5, fp
 800a480:	692b      	ldr	r3, [r5, #16]
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a488:	612a      	str	r2, [r5, #16]
 800a48a:	2201      	movs	r2, #1
 800a48c:	615a      	str	r2, [r3, #20]
 800a48e:	e7c2      	b.n	800a416 <__gethex+0x390>
 800a490:	692a      	ldr	r2, [r5, #16]
 800a492:	454a      	cmp	r2, r9
 800a494:	dd0b      	ble.n	800a4ae <__gethex+0x428>
 800a496:	2101      	movs	r1, #1
 800a498:	4628      	mov	r0, r5
 800a49a:	f7ff fda5 	bl	8009fe8 <rshift>
 800a49e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4a2:	3401      	adds	r4, #1
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	f6ff aed9 	blt.w	800a25c <__gethex+0x1d6>
 800a4aa:	2701      	movs	r7, #1
 800a4ac:	e7c7      	b.n	800a43e <__gethex+0x3b8>
 800a4ae:	f016 061f 	ands.w	r6, r6, #31
 800a4b2:	d0fa      	beq.n	800a4aa <__gethex+0x424>
 800a4b4:	449a      	add	sl, r3
 800a4b6:	f1c6 0620 	rsb	r6, r6, #32
 800a4ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a4be:	f000 f9b2 	bl	800a826 <__hi0bits>
 800a4c2:	42b0      	cmp	r0, r6
 800a4c4:	dbe7      	blt.n	800a496 <__gethex+0x410>
 800a4c6:	e7f0      	b.n	800a4aa <__gethex+0x424>

0800a4c8 <L_shift>:
 800a4c8:	f1c2 0208 	rsb	r2, r2, #8
 800a4cc:	0092      	lsls	r2, r2, #2
 800a4ce:	b570      	push	{r4, r5, r6, lr}
 800a4d0:	f1c2 0620 	rsb	r6, r2, #32
 800a4d4:	6843      	ldr	r3, [r0, #4]
 800a4d6:	6804      	ldr	r4, [r0, #0]
 800a4d8:	fa03 f506 	lsl.w	r5, r3, r6
 800a4dc:	432c      	orrs	r4, r5
 800a4de:	40d3      	lsrs	r3, r2
 800a4e0:	6004      	str	r4, [r0, #0]
 800a4e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4e6:	4288      	cmp	r0, r1
 800a4e8:	d3f4      	bcc.n	800a4d4 <L_shift+0xc>
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}

0800a4ec <__match>:
 800a4ec:	b530      	push	{r4, r5, lr}
 800a4ee:	6803      	ldr	r3, [r0, #0]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4f6:	b914      	cbnz	r4, 800a4fe <__match+0x12>
 800a4f8:	6003      	str	r3, [r0, #0]
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	bd30      	pop	{r4, r5, pc}
 800a4fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a502:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a506:	2d19      	cmp	r5, #25
 800a508:	bf98      	it	ls
 800a50a:	3220      	addls	r2, #32
 800a50c:	42a2      	cmp	r2, r4
 800a50e:	d0f0      	beq.n	800a4f2 <__match+0x6>
 800a510:	2000      	movs	r0, #0
 800a512:	e7f3      	b.n	800a4fc <__match+0x10>

0800a514 <__hexnan>:
 800a514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a518:	680b      	ldr	r3, [r1, #0]
 800a51a:	6801      	ldr	r1, [r0, #0]
 800a51c:	115f      	asrs	r7, r3, #5
 800a51e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a522:	f013 031f 	ands.w	r3, r3, #31
 800a526:	b087      	sub	sp, #28
 800a528:	bf18      	it	ne
 800a52a:	3704      	addne	r7, #4
 800a52c:	2500      	movs	r5, #0
 800a52e:	1f3e      	subs	r6, r7, #4
 800a530:	4682      	mov	sl, r0
 800a532:	4690      	mov	r8, r2
 800a534:	9301      	str	r3, [sp, #4]
 800a536:	f847 5c04 	str.w	r5, [r7, #-4]
 800a53a:	46b1      	mov	r9, r6
 800a53c:	4634      	mov	r4, r6
 800a53e:	9502      	str	r5, [sp, #8]
 800a540:	46ab      	mov	fp, r5
 800a542:	784a      	ldrb	r2, [r1, #1]
 800a544:	1c4b      	adds	r3, r1, #1
 800a546:	9303      	str	r3, [sp, #12]
 800a548:	b342      	cbz	r2, 800a59c <__hexnan+0x88>
 800a54a:	4610      	mov	r0, r2
 800a54c:	9105      	str	r1, [sp, #20]
 800a54e:	9204      	str	r2, [sp, #16]
 800a550:	f7ff fd84 	bl	800a05c <__hexdig_fun>
 800a554:	2800      	cmp	r0, #0
 800a556:	d143      	bne.n	800a5e0 <__hexnan+0xcc>
 800a558:	9a04      	ldr	r2, [sp, #16]
 800a55a:	9905      	ldr	r1, [sp, #20]
 800a55c:	2a20      	cmp	r2, #32
 800a55e:	d818      	bhi.n	800a592 <__hexnan+0x7e>
 800a560:	9b02      	ldr	r3, [sp, #8]
 800a562:	459b      	cmp	fp, r3
 800a564:	dd13      	ble.n	800a58e <__hexnan+0x7a>
 800a566:	454c      	cmp	r4, r9
 800a568:	d206      	bcs.n	800a578 <__hexnan+0x64>
 800a56a:	2d07      	cmp	r5, #7
 800a56c:	dc04      	bgt.n	800a578 <__hexnan+0x64>
 800a56e:	462a      	mov	r2, r5
 800a570:	4649      	mov	r1, r9
 800a572:	4620      	mov	r0, r4
 800a574:	f7ff ffa8 	bl	800a4c8 <L_shift>
 800a578:	4544      	cmp	r4, r8
 800a57a:	d944      	bls.n	800a606 <__hexnan+0xf2>
 800a57c:	2300      	movs	r3, #0
 800a57e:	f1a4 0904 	sub.w	r9, r4, #4
 800a582:	f844 3c04 	str.w	r3, [r4, #-4]
 800a586:	f8cd b008 	str.w	fp, [sp, #8]
 800a58a:	464c      	mov	r4, r9
 800a58c:	461d      	mov	r5, r3
 800a58e:	9903      	ldr	r1, [sp, #12]
 800a590:	e7d7      	b.n	800a542 <__hexnan+0x2e>
 800a592:	2a29      	cmp	r2, #41	; 0x29
 800a594:	d14a      	bne.n	800a62c <__hexnan+0x118>
 800a596:	3102      	adds	r1, #2
 800a598:	f8ca 1000 	str.w	r1, [sl]
 800a59c:	f1bb 0f00 	cmp.w	fp, #0
 800a5a0:	d044      	beq.n	800a62c <__hexnan+0x118>
 800a5a2:	454c      	cmp	r4, r9
 800a5a4:	d206      	bcs.n	800a5b4 <__hexnan+0xa0>
 800a5a6:	2d07      	cmp	r5, #7
 800a5a8:	dc04      	bgt.n	800a5b4 <__hexnan+0xa0>
 800a5aa:	462a      	mov	r2, r5
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f7ff ff8a 	bl	800a4c8 <L_shift>
 800a5b4:	4544      	cmp	r4, r8
 800a5b6:	d928      	bls.n	800a60a <__hexnan+0xf6>
 800a5b8:	4643      	mov	r3, r8
 800a5ba:	f854 2b04 	ldr.w	r2, [r4], #4
 800a5be:	f843 2b04 	str.w	r2, [r3], #4
 800a5c2:	42a6      	cmp	r6, r4
 800a5c4:	d2f9      	bcs.n	800a5ba <__hexnan+0xa6>
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f843 2b04 	str.w	r2, [r3], #4
 800a5cc:	429e      	cmp	r6, r3
 800a5ce:	d2fb      	bcs.n	800a5c8 <__hexnan+0xb4>
 800a5d0:	6833      	ldr	r3, [r6, #0]
 800a5d2:	b91b      	cbnz	r3, 800a5dc <__hexnan+0xc8>
 800a5d4:	4546      	cmp	r6, r8
 800a5d6:	d127      	bne.n	800a628 <__hexnan+0x114>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	6033      	str	r3, [r6, #0]
 800a5dc:	2005      	movs	r0, #5
 800a5de:	e026      	b.n	800a62e <__hexnan+0x11a>
 800a5e0:	3501      	adds	r5, #1
 800a5e2:	2d08      	cmp	r5, #8
 800a5e4:	f10b 0b01 	add.w	fp, fp, #1
 800a5e8:	dd06      	ble.n	800a5f8 <__hexnan+0xe4>
 800a5ea:	4544      	cmp	r4, r8
 800a5ec:	d9cf      	bls.n	800a58e <__hexnan+0x7a>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5f4:	2501      	movs	r5, #1
 800a5f6:	3c04      	subs	r4, #4
 800a5f8:	6822      	ldr	r2, [r4, #0]
 800a5fa:	f000 000f 	and.w	r0, r0, #15
 800a5fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a602:	6020      	str	r0, [r4, #0]
 800a604:	e7c3      	b.n	800a58e <__hexnan+0x7a>
 800a606:	2508      	movs	r5, #8
 800a608:	e7c1      	b.n	800a58e <__hexnan+0x7a>
 800a60a:	9b01      	ldr	r3, [sp, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d0df      	beq.n	800a5d0 <__hexnan+0xbc>
 800a610:	f04f 32ff 	mov.w	r2, #4294967295
 800a614:	f1c3 0320 	rsb	r3, r3, #32
 800a618:	fa22 f303 	lsr.w	r3, r2, r3
 800a61c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a620:	401a      	ands	r2, r3
 800a622:	f847 2c04 	str.w	r2, [r7, #-4]
 800a626:	e7d3      	b.n	800a5d0 <__hexnan+0xbc>
 800a628:	3e04      	subs	r6, #4
 800a62a:	e7d1      	b.n	800a5d0 <__hexnan+0xbc>
 800a62c:	2004      	movs	r0, #4
 800a62e:	b007      	add	sp, #28
 800a630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a634 <__localeconv_l>:
 800a634:	30f0      	adds	r0, #240	; 0xf0
 800a636:	4770      	bx	lr

0800a638 <_localeconv_r>:
 800a638:	4b04      	ldr	r3, [pc, #16]	; (800a64c <_localeconv_r+0x14>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6a18      	ldr	r0, [r3, #32]
 800a63e:	4b04      	ldr	r3, [pc, #16]	; (800a650 <_localeconv_r+0x18>)
 800a640:	2800      	cmp	r0, #0
 800a642:	bf08      	it	eq
 800a644:	4618      	moveq	r0, r3
 800a646:	30f0      	adds	r0, #240	; 0xf0
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	20000014 	.word	0x20000014
 800a650:	20000078 	.word	0x20000078

0800a654 <malloc>:
 800a654:	4b02      	ldr	r3, [pc, #8]	; (800a660 <malloc+0xc>)
 800a656:	4601      	mov	r1, r0
 800a658:	6818      	ldr	r0, [r3, #0]
 800a65a:	f000 bc7b 	b.w	800af54 <_malloc_r>
 800a65e:	bf00      	nop
 800a660:	20000014 	.word	0x20000014

0800a664 <__ascii_mbtowc>:
 800a664:	b082      	sub	sp, #8
 800a666:	b901      	cbnz	r1, 800a66a <__ascii_mbtowc+0x6>
 800a668:	a901      	add	r1, sp, #4
 800a66a:	b142      	cbz	r2, 800a67e <__ascii_mbtowc+0x1a>
 800a66c:	b14b      	cbz	r3, 800a682 <__ascii_mbtowc+0x1e>
 800a66e:	7813      	ldrb	r3, [r2, #0]
 800a670:	600b      	str	r3, [r1, #0]
 800a672:	7812      	ldrb	r2, [r2, #0]
 800a674:	1c10      	adds	r0, r2, #0
 800a676:	bf18      	it	ne
 800a678:	2001      	movne	r0, #1
 800a67a:	b002      	add	sp, #8
 800a67c:	4770      	bx	lr
 800a67e:	4610      	mov	r0, r2
 800a680:	e7fb      	b.n	800a67a <__ascii_mbtowc+0x16>
 800a682:	f06f 0001 	mvn.w	r0, #1
 800a686:	e7f8      	b.n	800a67a <__ascii_mbtowc+0x16>

0800a688 <memcpy>:
 800a688:	b510      	push	{r4, lr}
 800a68a:	1e43      	subs	r3, r0, #1
 800a68c:	440a      	add	r2, r1
 800a68e:	4291      	cmp	r1, r2
 800a690:	d100      	bne.n	800a694 <memcpy+0xc>
 800a692:	bd10      	pop	{r4, pc}
 800a694:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a69c:	e7f7      	b.n	800a68e <memcpy+0x6>

0800a69e <_Balloc>:
 800a69e:	b570      	push	{r4, r5, r6, lr}
 800a6a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	460e      	mov	r6, r1
 800a6a6:	b93d      	cbnz	r5, 800a6b8 <_Balloc+0x1a>
 800a6a8:	2010      	movs	r0, #16
 800a6aa:	f7ff ffd3 	bl	800a654 <malloc>
 800a6ae:	6260      	str	r0, [r4, #36]	; 0x24
 800a6b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6b4:	6005      	str	r5, [r0, #0]
 800a6b6:	60c5      	str	r5, [r0, #12]
 800a6b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a6ba:	68eb      	ldr	r3, [r5, #12]
 800a6bc:	b183      	cbz	r3, 800a6e0 <_Balloc+0x42>
 800a6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a6c6:	b9b8      	cbnz	r0, 800a6f8 <_Balloc+0x5a>
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	fa01 f506 	lsl.w	r5, r1, r6
 800a6ce:	1d6a      	adds	r2, r5, #5
 800a6d0:	0092      	lsls	r2, r2, #2
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fbe1 	bl	800ae9a <_calloc_r>
 800a6d8:	b160      	cbz	r0, 800a6f4 <_Balloc+0x56>
 800a6da:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a6de:	e00e      	b.n	800a6fe <_Balloc+0x60>
 800a6e0:	2221      	movs	r2, #33	; 0x21
 800a6e2:	2104      	movs	r1, #4
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 fbd8 	bl	800ae9a <_calloc_r>
 800a6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6ec:	60e8      	str	r0, [r5, #12]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e4      	bne.n	800a6be <_Balloc+0x20>
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	bd70      	pop	{r4, r5, r6, pc}
 800a6f8:	6802      	ldr	r2, [r0, #0]
 800a6fa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a6fe:	2300      	movs	r3, #0
 800a700:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a704:	e7f7      	b.n	800a6f6 <_Balloc+0x58>

0800a706 <_Bfree>:
 800a706:	b570      	push	{r4, r5, r6, lr}
 800a708:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a70a:	4606      	mov	r6, r0
 800a70c:	460d      	mov	r5, r1
 800a70e:	b93c      	cbnz	r4, 800a720 <_Bfree+0x1a>
 800a710:	2010      	movs	r0, #16
 800a712:	f7ff ff9f 	bl	800a654 <malloc>
 800a716:	6270      	str	r0, [r6, #36]	; 0x24
 800a718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a71c:	6004      	str	r4, [r0, #0]
 800a71e:	60c4      	str	r4, [r0, #12]
 800a720:	b13d      	cbz	r5, 800a732 <_Bfree+0x2c>
 800a722:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a724:	686a      	ldr	r2, [r5, #4]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a72c:	6029      	str	r1, [r5, #0]
 800a72e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a732:	bd70      	pop	{r4, r5, r6, pc}

0800a734 <__multadd>:
 800a734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a738:	690d      	ldr	r5, [r1, #16]
 800a73a:	461f      	mov	r7, r3
 800a73c:	4606      	mov	r6, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	f101 0c14 	add.w	ip, r1, #20
 800a744:	2300      	movs	r3, #0
 800a746:	f8dc 0000 	ldr.w	r0, [ip]
 800a74a:	b281      	uxth	r1, r0
 800a74c:	fb02 7101 	mla	r1, r2, r1, r7
 800a750:	0c0f      	lsrs	r7, r1, #16
 800a752:	0c00      	lsrs	r0, r0, #16
 800a754:	fb02 7000 	mla	r0, r2, r0, r7
 800a758:	b289      	uxth	r1, r1
 800a75a:	3301      	adds	r3, #1
 800a75c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a760:	429d      	cmp	r5, r3
 800a762:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a766:	f84c 1b04 	str.w	r1, [ip], #4
 800a76a:	dcec      	bgt.n	800a746 <__multadd+0x12>
 800a76c:	b1d7      	cbz	r7, 800a7a4 <__multadd+0x70>
 800a76e:	68a3      	ldr	r3, [r4, #8]
 800a770:	42ab      	cmp	r3, r5
 800a772:	dc12      	bgt.n	800a79a <__multadd+0x66>
 800a774:	6861      	ldr	r1, [r4, #4]
 800a776:	4630      	mov	r0, r6
 800a778:	3101      	adds	r1, #1
 800a77a:	f7ff ff90 	bl	800a69e <_Balloc>
 800a77e:	6922      	ldr	r2, [r4, #16]
 800a780:	3202      	adds	r2, #2
 800a782:	f104 010c 	add.w	r1, r4, #12
 800a786:	4680      	mov	r8, r0
 800a788:	0092      	lsls	r2, r2, #2
 800a78a:	300c      	adds	r0, #12
 800a78c:	f7ff ff7c 	bl	800a688 <memcpy>
 800a790:	4621      	mov	r1, r4
 800a792:	4630      	mov	r0, r6
 800a794:	f7ff ffb7 	bl	800a706 <_Bfree>
 800a798:	4644      	mov	r4, r8
 800a79a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a79e:	3501      	adds	r5, #1
 800a7a0:	615f      	str	r7, [r3, #20]
 800a7a2:	6125      	str	r5, [r4, #16]
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a7aa <__s2b>:
 800a7aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	4615      	mov	r5, r2
 800a7b2:	461f      	mov	r7, r3
 800a7b4:	2209      	movs	r2, #9
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7be:	2100      	movs	r1, #0
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	db20      	blt.n	800a808 <__s2b+0x5e>
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f7ff ff69 	bl	800a69e <_Balloc>
 800a7cc:	9b08      	ldr	r3, [sp, #32]
 800a7ce:	6143      	str	r3, [r0, #20]
 800a7d0:	2d09      	cmp	r5, #9
 800a7d2:	f04f 0301 	mov.w	r3, #1
 800a7d6:	6103      	str	r3, [r0, #16]
 800a7d8:	dd19      	ble.n	800a80e <__s2b+0x64>
 800a7da:	f104 0809 	add.w	r8, r4, #9
 800a7de:	46c1      	mov	r9, r8
 800a7e0:	442c      	add	r4, r5
 800a7e2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a7e6:	4601      	mov	r1, r0
 800a7e8:	3b30      	subs	r3, #48	; 0x30
 800a7ea:	220a      	movs	r2, #10
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	f7ff ffa1 	bl	800a734 <__multadd>
 800a7f2:	45a1      	cmp	r9, r4
 800a7f4:	d1f5      	bne.n	800a7e2 <__s2b+0x38>
 800a7f6:	eb08 0405 	add.w	r4, r8, r5
 800a7fa:	3c08      	subs	r4, #8
 800a7fc:	1b2d      	subs	r5, r5, r4
 800a7fe:	1963      	adds	r3, r4, r5
 800a800:	42bb      	cmp	r3, r7
 800a802:	db07      	blt.n	800a814 <__s2b+0x6a>
 800a804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a808:	0052      	lsls	r2, r2, #1
 800a80a:	3101      	adds	r1, #1
 800a80c:	e7d9      	b.n	800a7c2 <__s2b+0x18>
 800a80e:	340a      	adds	r4, #10
 800a810:	2509      	movs	r5, #9
 800a812:	e7f3      	b.n	800a7fc <__s2b+0x52>
 800a814:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a818:	4601      	mov	r1, r0
 800a81a:	3b30      	subs	r3, #48	; 0x30
 800a81c:	220a      	movs	r2, #10
 800a81e:	4630      	mov	r0, r6
 800a820:	f7ff ff88 	bl	800a734 <__multadd>
 800a824:	e7eb      	b.n	800a7fe <__s2b+0x54>

0800a826 <__hi0bits>:
 800a826:	0c02      	lsrs	r2, r0, #16
 800a828:	0412      	lsls	r2, r2, #16
 800a82a:	4603      	mov	r3, r0
 800a82c:	b9b2      	cbnz	r2, 800a85c <__hi0bits+0x36>
 800a82e:	0403      	lsls	r3, r0, #16
 800a830:	2010      	movs	r0, #16
 800a832:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a836:	bf04      	itt	eq
 800a838:	021b      	lsleq	r3, r3, #8
 800a83a:	3008      	addeq	r0, #8
 800a83c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a840:	bf04      	itt	eq
 800a842:	011b      	lsleq	r3, r3, #4
 800a844:	3004      	addeq	r0, #4
 800a846:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a84a:	bf04      	itt	eq
 800a84c:	009b      	lsleq	r3, r3, #2
 800a84e:	3002      	addeq	r0, #2
 800a850:	2b00      	cmp	r3, #0
 800a852:	db06      	blt.n	800a862 <__hi0bits+0x3c>
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	d503      	bpl.n	800a860 <__hi0bits+0x3a>
 800a858:	3001      	adds	r0, #1
 800a85a:	4770      	bx	lr
 800a85c:	2000      	movs	r0, #0
 800a85e:	e7e8      	b.n	800a832 <__hi0bits+0xc>
 800a860:	2020      	movs	r0, #32
 800a862:	4770      	bx	lr

0800a864 <__lo0bits>:
 800a864:	6803      	ldr	r3, [r0, #0]
 800a866:	f013 0207 	ands.w	r2, r3, #7
 800a86a:	4601      	mov	r1, r0
 800a86c:	d00b      	beq.n	800a886 <__lo0bits+0x22>
 800a86e:	07da      	lsls	r2, r3, #31
 800a870:	d423      	bmi.n	800a8ba <__lo0bits+0x56>
 800a872:	0798      	lsls	r0, r3, #30
 800a874:	bf49      	itett	mi
 800a876:	085b      	lsrmi	r3, r3, #1
 800a878:	089b      	lsrpl	r3, r3, #2
 800a87a:	2001      	movmi	r0, #1
 800a87c:	600b      	strmi	r3, [r1, #0]
 800a87e:	bf5c      	itt	pl
 800a880:	600b      	strpl	r3, [r1, #0]
 800a882:	2002      	movpl	r0, #2
 800a884:	4770      	bx	lr
 800a886:	b298      	uxth	r0, r3
 800a888:	b9a8      	cbnz	r0, 800a8b6 <__lo0bits+0x52>
 800a88a:	0c1b      	lsrs	r3, r3, #16
 800a88c:	2010      	movs	r0, #16
 800a88e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a892:	bf04      	itt	eq
 800a894:	0a1b      	lsreq	r3, r3, #8
 800a896:	3008      	addeq	r0, #8
 800a898:	071a      	lsls	r2, r3, #28
 800a89a:	bf04      	itt	eq
 800a89c:	091b      	lsreq	r3, r3, #4
 800a89e:	3004      	addeq	r0, #4
 800a8a0:	079a      	lsls	r2, r3, #30
 800a8a2:	bf04      	itt	eq
 800a8a4:	089b      	lsreq	r3, r3, #2
 800a8a6:	3002      	addeq	r0, #2
 800a8a8:	07da      	lsls	r2, r3, #31
 800a8aa:	d402      	bmi.n	800a8b2 <__lo0bits+0x4e>
 800a8ac:	085b      	lsrs	r3, r3, #1
 800a8ae:	d006      	beq.n	800a8be <__lo0bits+0x5a>
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	600b      	str	r3, [r1, #0]
 800a8b4:	4770      	bx	lr
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	e7e9      	b.n	800a88e <__lo0bits+0x2a>
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	4770      	bx	lr
 800a8be:	2020      	movs	r0, #32
 800a8c0:	4770      	bx	lr

0800a8c2 <__i2b>:
 800a8c2:	b510      	push	{r4, lr}
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	f7ff fee9 	bl	800a69e <_Balloc>
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	6144      	str	r4, [r0, #20]
 800a8d0:	6102      	str	r2, [r0, #16]
 800a8d2:	bd10      	pop	{r4, pc}

0800a8d4 <__multiply>:
 800a8d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	4614      	mov	r4, r2
 800a8da:	690a      	ldr	r2, [r1, #16]
 800a8dc:	6923      	ldr	r3, [r4, #16]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	bfb8      	it	lt
 800a8e2:	460b      	movlt	r3, r1
 800a8e4:	4688      	mov	r8, r1
 800a8e6:	bfbc      	itt	lt
 800a8e8:	46a0      	movlt	r8, r4
 800a8ea:	461c      	movlt	r4, r3
 800a8ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a8f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a8f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a8fc:	eb07 0609 	add.w	r6, r7, r9
 800a900:	42b3      	cmp	r3, r6
 800a902:	bfb8      	it	lt
 800a904:	3101      	addlt	r1, #1
 800a906:	f7ff feca 	bl	800a69e <_Balloc>
 800a90a:	f100 0514 	add.w	r5, r0, #20
 800a90e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a912:	462b      	mov	r3, r5
 800a914:	2200      	movs	r2, #0
 800a916:	4573      	cmp	r3, lr
 800a918:	d316      	bcc.n	800a948 <__multiply+0x74>
 800a91a:	f104 0214 	add.w	r2, r4, #20
 800a91e:	f108 0114 	add.w	r1, r8, #20
 800a922:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a926:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	9b00      	ldr	r3, [sp, #0]
 800a92e:	9201      	str	r2, [sp, #4]
 800a930:	4293      	cmp	r3, r2
 800a932:	d80c      	bhi.n	800a94e <__multiply+0x7a>
 800a934:	2e00      	cmp	r6, #0
 800a936:	dd03      	ble.n	800a940 <__multiply+0x6c>
 800a938:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d05d      	beq.n	800a9fc <__multiply+0x128>
 800a940:	6106      	str	r6, [r0, #16]
 800a942:	b003      	add	sp, #12
 800a944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a948:	f843 2b04 	str.w	r2, [r3], #4
 800a94c:	e7e3      	b.n	800a916 <__multiply+0x42>
 800a94e:	f8b2 b000 	ldrh.w	fp, [r2]
 800a952:	f1bb 0f00 	cmp.w	fp, #0
 800a956:	d023      	beq.n	800a9a0 <__multiply+0xcc>
 800a958:	4689      	mov	r9, r1
 800a95a:	46ac      	mov	ip, r5
 800a95c:	f04f 0800 	mov.w	r8, #0
 800a960:	f859 4b04 	ldr.w	r4, [r9], #4
 800a964:	f8dc a000 	ldr.w	sl, [ip]
 800a968:	b2a3      	uxth	r3, r4
 800a96a:	fa1f fa8a 	uxth.w	sl, sl
 800a96e:	fb0b a303 	mla	r3, fp, r3, sl
 800a972:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a976:	f8dc 4000 	ldr.w	r4, [ip]
 800a97a:	4443      	add	r3, r8
 800a97c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a980:	fb0b 840a 	mla	r4, fp, sl, r8
 800a984:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a988:	46e2      	mov	sl, ip
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a990:	454f      	cmp	r7, r9
 800a992:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a996:	f84a 3b04 	str.w	r3, [sl], #4
 800a99a:	d82b      	bhi.n	800a9f4 <__multiply+0x120>
 800a99c:	f8cc 8004 	str.w	r8, [ip, #4]
 800a9a0:	9b01      	ldr	r3, [sp, #4]
 800a9a2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a9a6:	3204      	adds	r2, #4
 800a9a8:	f1ba 0f00 	cmp.w	sl, #0
 800a9ac:	d020      	beq.n	800a9f0 <__multiply+0x11c>
 800a9ae:	682b      	ldr	r3, [r5, #0]
 800a9b0:	4689      	mov	r9, r1
 800a9b2:	46a8      	mov	r8, r5
 800a9b4:	f04f 0b00 	mov.w	fp, #0
 800a9b8:	f8b9 c000 	ldrh.w	ip, [r9]
 800a9bc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a9c0:	fb0a 440c 	mla	r4, sl, ip, r4
 800a9c4:	445c      	add	r4, fp
 800a9c6:	46c4      	mov	ip, r8
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a9ce:	f84c 3b04 	str.w	r3, [ip], #4
 800a9d2:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9d6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a9da:	0c1b      	lsrs	r3, r3, #16
 800a9dc:	fb0a b303 	mla	r3, sl, r3, fp
 800a9e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a9e4:	454f      	cmp	r7, r9
 800a9e6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a9ea:	d805      	bhi.n	800a9f8 <__multiply+0x124>
 800a9ec:	f8c8 3004 	str.w	r3, [r8, #4]
 800a9f0:	3504      	adds	r5, #4
 800a9f2:	e79b      	b.n	800a92c <__multiply+0x58>
 800a9f4:	46d4      	mov	ip, sl
 800a9f6:	e7b3      	b.n	800a960 <__multiply+0x8c>
 800a9f8:	46e0      	mov	r8, ip
 800a9fa:	e7dd      	b.n	800a9b8 <__multiply+0xe4>
 800a9fc:	3e01      	subs	r6, #1
 800a9fe:	e799      	b.n	800a934 <__multiply+0x60>

0800aa00 <__pow5mult>:
 800aa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa04:	4615      	mov	r5, r2
 800aa06:	f012 0203 	ands.w	r2, r2, #3
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	460f      	mov	r7, r1
 800aa0e:	d007      	beq.n	800aa20 <__pow5mult+0x20>
 800aa10:	3a01      	subs	r2, #1
 800aa12:	4c21      	ldr	r4, [pc, #132]	; (800aa98 <__pow5mult+0x98>)
 800aa14:	2300      	movs	r3, #0
 800aa16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa1a:	f7ff fe8b 	bl	800a734 <__multadd>
 800aa1e:	4607      	mov	r7, r0
 800aa20:	10ad      	asrs	r5, r5, #2
 800aa22:	d035      	beq.n	800aa90 <__pow5mult+0x90>
 800aa24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa26:	b93c      	cbnz	r4, 800aa38 <__pow5mult+0x38>
 800aa28:	2010      	movs	r0, #16
 800aa2a:	f7ff fe13 	bl	800a654 <malloc>
 800aa2e:	6270      	str	r0, [r6, #36]	; 0x24
 800aa30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa34:	6004      	str	r4, [r0, #0]
 800aa36:	60c4      	str	r4, [r0, #12]
 800aa38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa40:	b94c      	cbnz	r4, 800aa56 <__pow5mult+0x56>
 800aa42:	f240 2171 	movw	r1, #625	; 0x271
 800aa46:	4630      	mov	r0, r6
 800aa48:	f7ff ff3b 	bl	800a8c2 <__i2b>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa52:	4604      	mov	r4, r0
 800aa54:	6003      	str	r3, [r0, #0]
 800aa56:	f04f 0800 	mov.w	r8, #0
 800aa5a:	07eb      	lsls	r3, r5, #31
 800aa5c:	d50a      	bpl.n	800aa74 <__pow5mult+0x74>
 800aa5e:	4639      	mov	r1, r7
 800aa60:	4622      	mov	r2, r4
 800aa62:	4630      	mov	r0, r6
 800aa64:	f7ff ff36 	bl	800a8d4 <__multiply>
 800aa68:	4639      	mov	r1, r7
 800aa6a:	4681      	mov	r9, r0
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f7ff fe4a 	bl	800a706 <_Bfree>
 800aa72:	464f      	mov	r7, r9
 800aa74:	106d      	asrs	r5, r5, #1
 800aa76:	d00b      	beq.n	800aa90 <__pow5mult+0x90>
 800aa78:	6820      	ldr	r0, [r4, #0]
 800aa7a:	b938      	cbnz	r0, 800aa8c <__pow5mult+0x8c>
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	4621      	mov	r1, r4
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7ff ff27 	bl	800a8d4 <__multiply>
 800aa86:	6020      	str	r0, [r4, #0]
 800aa88:	f8c0 8000 	str.w	r8, [r0]
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	e7e4      	b.n	800aa5a <__pow5mult+0x5a>
 800aa90:	4638      	mov	r0, r7
 800aa92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa96:	bf00      	nop
 800aa98:	0800c818 	.word	0x0800c818

0800aa9c <__lshift>:
 800aa9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aaa6:	6923      	ldr	r3, [r4, #16]
 800aaa8:	6849      	ldr	r1, [r1, #4]
 800aaaa:	eb0a 0903 	add.w	r9, sl, r3
 800aaae:	68a3      	ldr	r3, [r4, #8]
 800aab0:	4607      	mov	r7, r0
 800aab2:	4616      	mov	r6, r2
 800aab4:	f109 0501 	add.w	r5, r9, #1
 800aab8:	42ab      	cmp	r3, r5
 800aaba:	db32      	blt.n	800ab22 <__lshift+0x86>
 800aabc:	4638      	mov	r0, r7
 800aabe:	f7ff fdee 	bl	800a69e <_Balloc>
 800aac2:	2300      	movs	r3, #0
 800aac4:	4680      	mov	r8, r0
 800aac6:	f100 0114 	add.w	r1, r0, #20
 800aaca:	461a      	mov	r2, r3
 800aacc:	4553      	cmp	r3, sl
 800aace:	db2b      	blt.n	800ab28 <__lshift+0x8c>
 800aad0:	6920      	ldr	r0, [r4, #16]
 800aad2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aad6:	f104 0314 	add.w	r3, r4, #20
 800aada:	f016 021f 	ands.w	r2, r6, #31
 800aade:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aae2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aae6:	d025      	beq.n	800ab34 <__lshift+0x98>
 800aae8:	f1c2 0e20 	rsb	lr, r2, #32
 800aaec:	2000      	movs	r0, #0
 800aaee:	681e      	ldr	r6, [r3, #0]
 800aaf0:	468a      	mov	sl, r1
 800aaf2:	4096      	lsls	r6, r2
 800aaf4:	4330      	orrs	r0, r6
 800aaf6:	f84a 0b04 	str.w	r0, [sl], #4
 800aafa:	f853 0b04 	ldr.w	r0, [r3], #4
 800aafe:	459c      	cmp	ip, r3
 800ab00:	fa20 f00e 	lsr.w	r0, r0, lr
 800ab04:	d814      	bhi.n	800ab30 <__lshift+0x94>
 800ab06:	6048      	str	r0, [r1, #4]
 800ab08:	b108      	cbz	r0, 800ab0e <__lshift+0x72>
 800ab0a:	f109 0502 	add.w	r5, r9, #2
 800ab0e:	3d01      	subs	r5, #1
 800ab10:	4638      	mov	r0, r7
 800ab12:	f8c8 5010 	str.w	r5, [r8, #16]
 800ab16:	4621      	mov	r1, r4
 800ab18:	f7ff fdf5 	bl	800a706 <_Bfree>
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab22:	3101      	adds	r1, #1
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	e7c7      	b.n	800aab8 <__lshift+0x1c>
 800ab28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	e7cd      	b.n	800aacc <__lshift+0x30>
 800ab30:	4651      	mov	r1, sl
 800ab32:	e7dc      	b.n	800aaee <__lshift+0x52>
 800ab34:	3904      	subs	r1, #4
 800ab36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab3a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab3e:	459c      	cmp	ip, r3
 800ab40:	d8f9      	bhi.n	800ab36 <__lshift+0x9a>
 800ab42:	e7e4      	b.n	800ab0e <__lshift+0x72>

0800ab44 <__mcmp>:
 800ab44:	6903      	ldr	r3, [r0, #16]
 800ab46:	690a      	ldr	r2, [r1, #16]
 800ab48:	1a9b      	subs	r3, r3, r2
 800ab4a:	b530      	push	{r4, r5, lr}
 800ab4c:	d10c      	bne.n	800ab68 <__mcmp+0x24>
 800ab4e:	0092      	lsls	r2, r2, #2
 800ab50:	3014      	adds	r0, #20
 800ab52:	3114      	adds	r1, #20
 800ab54:	1884      	adds	r4, r0, r2
 800ab56:	4411      	add	r1, r2
 800ab58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab60:	4295      	cmp	r5, r2
 800ab62:	d003      	beq.n	800ab6c <__mcmp+0x28>
 800ab64:	d305      	bcc.n	800ab72 <__mcmp+0x2e>
 800ab66:	2301      	movs	r3, #1
 800ab68:	4618      	mov	r0, r3
 800ab6a:	bd30      	pop	{r4, r5, pc}
 800ab6c:	42a0      	cmp	r0, r4
 800ab6e:	d3f3      	bcc.n	800ab58 <__mcmp+0x14>
 800ab70:	e7fa      	b.n	800ab68 <__mcmp+0x24>
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295
 800ab76:	e7f7      	b.n	800ab68 <__mcmp+0x24>

0800ab78 <__mdiff>:
 800ab78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab7c:	460d      	mov	r5, r1
 800ab7e:	4607      	mov	r7, r0
 800ab80:	4611      	mov	r1, r2
 800ab82:	4628      	mov	r0, r5
 800ab84:	4614      	mov	r4, r2
 800ab86:	f7ff ffdd 	bl	800ab44 <__mcmp>
 800ab8a:	1e06      	subs	r6, r0, #0
 800ab8c:	d108      	bne.n	800aba0 <__mdiff+0x28>
 800ab8e:	4631      	mov	r1, r6
 800ab90:	4638      	mov	r0, r7
 800ab92:	f7ff fd84 	bl	800a69e <_Balloc>
 800ab96:	2301      	movs	r3, #1
 800ab98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ab9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aba0:	bfa4      	itt	ge
 800aba2:	4623      	movge	r3, r4
 800aba4:	462c      	movge	r4, r5
 800aba6:	4638      	mov	r0, r7
 800aba8:	6861      	ldr	r1, [r4, #4]
 800abaa:	bfa6      	itte	ge
 800abac:	461d      	movge	r5, r3
 800abae:	2600      	movge	r6, #0
 800abb0:	2601      	movlt	r6, #1
 800abb2:	f7ff fd74 	bl	800a69e <_Balloc>
 800abb6:	692b      	ldr	r3, [r5, #16]
 800abb8:	60c6      	str	r6, [r0, #12]
 800abba:	6926      	ldr	r6, [r4, #16]
 800abbc:	f105 0914 	add.w	r9, r5, #20
 800abc0:	f104 0214 	add.w	r2, r4, #20
 800abc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800abc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800abcc:	f100 0514 	add.w	r5, r0, #20
 800abd0:	f04f 0e00 	mov.w	lr, #0
 800abd4:	f852 ab04 	ldr.w	sl, [r2], #4
 800abd8:	f859 4b04 	ldr.w	r4, [r9], #4
 800abdc:	fa1e f18a 	uxtah	r1, lr, sl
 800abe0:	b2a3      	uxth	r3, r4
 800abe2:	1ac9      	subs	r1, r1, r3
 800abe4:	0c23      	lsrs	r3, r4, #16
 800abe6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800abea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800abee:	b289      	uxth	r1, r1
 800abf0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800abf4:	45c8      	cmp	r8, r9
 800abf6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800abfa:	4694      	mov	ip, r2
 800abfc:	f845 3b04 	str.w	r3, [r5], #4
 800ac00:	d8e8      	bhi.n	800abd4 <__mdiff+0x5c>
 800ac02:	45bc      	cmp	ip, r7
 800ac04:	d304      	bcc.n	800ac10 <__mdiff+0x98>
 800ac06:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ac0a:	b183      	cbz	r3, 800ac2e <__mdiff+0xb6>
 800ac0c:	6106      	str	r6, [r0, #16]
 800ac0e:	e7c5      	b.n	800ab9c <__mdiff+0x24>
 800ac10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ac14:	fa1e f381 	uxtah	r3, lr, r1
 800ac18:	141a      	asrs	r2, r3, #16
 800ac1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac24:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ac28:	f845 3b04 	str.w	r3, [r5], #4
 800ac2c:	e7e9      	b.n	800ac02 <__mdiff+0x8a>
 800ac2e:	3e01      	subs	r6, #1
 800ac30:	e7e9      	b.n	800ac06 <__mdiff+0x8e>
	...

0800ac34 <__ulp>:
 800ac34:	4b12      	ldr	r3, [pc, #72]	; (800ac80 <__ulp+0x4c>)
 800ac36:	ee10 2a90 	vmov	r2, s1
 800ac3a:	401a      	ands	r2, r3
 800ac3c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	dd04      	ble.n	800ac4e <__ulp+0x1a>
 800ac44:	2000      	movs	r0, #0
 800ac46:	4619      	mov	r1, r3
 800ac48:	ec41 0b10 	vmov	d0, r0, r1
 800ac4c:	4770      	bx	lr
 800ac4e:	425b      	negs	r3, r3
 800ac50:	151b      	asrs	r3, r3, #20
 800ac52:	2b13      	cmp	r3, #19
 800ac54:	f04f 0000 	mov.w	r0, #0
 800ac58:	f04f 0100 	mov.w	r1, #0
 800ac5c:	dc04      	bgt.n	800ac68 <__ulp+0x34>
 800ac5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ac62:	fa42 f103 	asr.w	r1, r2, r3
 800ac66:	e7ef      	b.n	800ac48 <__ulp+0x14>
 800ac68:	3b14      	subs	r3, #20
 800ac6a:	2b1e      	cmp	r3, #30
 800ac6c:	f04f 0201 	mov.w	r2, #1
 800ac70:	bfda      	itte	le
 800ac72:	f1c3 031f 	rsble	r3, r3, #31
 800ac76:	fa02 f303 	lslle.w	r3, r2, r3
 800ac7a:	4613      	movgt	r3, r2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	e7e3      	b.n	800ac48 <__ulp+0x14>
 800ac80:	7ff00000 	.word	0x7ff00000

0800ac84 <__b2d>:
 800ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac86:	6905      	ldr	r5, [r0, #16]
 800ac88:	f100 0714 	add.w	r7, r0, #20
 800ac8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ac90:	1f2e      	subs	r6, r5, #4
 800ac92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ac96:	4620      	mov	r0, r4
 800ac98:	f7ff fdc5 	bl	800a826 <__hi0bits>
 800ac9c:	f1c0 0320 	rsb	r3, r0, #32
 800aca0:	280a      	cmp	r0, #10
 800aca2:	600b      	str	r3, [r1, #0]
 800aca4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ad1c <__b2d+0x98>
 800aca8:	dc14      	bgt.n	800acd4 <__b2d+0x50>
 800acaa:	f1c0 0e0b 	rsb	lr, r0, #11
 800acae:	fa24 f10e 	lsr.w	r1, r4, lr
 800acb2:	42b7      	cmp	r7, r6
 800acb4:	ea41 030c 	orr.w	r3, r1, ip
 800acb8:	bf34      	ite	cc
 800acba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800acbe:	2100      	movcs	r1, #0
 800acc0:	3015      	adds	r0, #21
 800acc2:	fa04 f000 	lsl.w	r0, r4, r0
 800acc6:	fa21 f10e 	lsr.w	r1, r1, lr
 800acca:	ea40 0201 	orr.w	r2, r0, r1
 800acce:	ec43 2b10 	vmov	d0, r2, r3
 800acd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd4:	42b7      	cmp	r7, r6
 800acd6:	bf3a      	itte	cc
 800acd8:	f1a5 0608 	subcc.w	r6, r5, #8
 800acdc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ace0:	2100      	movcs	r1, #0
 800ace2:	380b      	subs	r0, #11
 800ace4:	d015      	beq.n	800ad12 <__b2d+0x8e>
 800ace6:	4084      	lsls	r4, r0
 800ace8:	f1c0 0520 	rsb	r5, r0, #32
 800acec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800acf0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800acf4:	42be      	cmp	r6, r7
 800acf6:	fa21 fc05 	lsr.w	ip, r1, r5
 800acfa:	ea44 030c 	orr.w	r3, r4, ip
 800acfe:	bf8c      	ite	hi
 800ad00:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ad04:	2400      	movls	r4, #0
 800ad06:	fa01 f000 	lsl.w	r0, r1, r0
 800ad0a:	40ec      	lsrs	r4, r5
 800ad0c:	ea40 0204 	orr.w	r2, r0, r4
 800ad10:	e7dd      	b.n	800acce <__b2d+0x4a>
 800ad12:	ea44 030c 	orr.w	r3, r4, ip
 800ad16:	460a      	mov	r2, r1
 800ad18:	e7d9      	b.n	800acce <__b2d+0x4a>
 800ad1a:	bf00      	nop
 800ad1c:	3ff00000 	.word	0x3ff00000

0800ad20 <__d2b>:
 800ad20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad24:	460e      	mov	r6, r1
 800ad26:	2101      	movs	r1, #1
 800ad28:	ec59 8b10 	vmov	r8, r9, d0
 800ad2c:	4615      	mov	r5, r2
 800ad2e:	f7ff fcb6 	bl	800a69e <_Balloc>
 800ad32:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ad36:	4607      	mov	r7, r0
 800ad38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad3c:	bb34      	cbnz	r4, 800ad8c <__d2b+0x6c>
 800ad3e:	9301      	str	r3, [sp, #4]
 800ad40:	f1b8 0300 	subs.w	r3, r8, #0
 800ad44:	d027      	beq.n	800ad96 <__d2b+0x76>
 800ad46:	a802      	add	r0, sp, #8
 800ad48:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ad4c:	f7ff fd8a 	bl	800a864 <__lo0bits>
 800ad50:	9900      	ldr	r1, [sp, #0]
 800ad52:	b1f0      	cbz	r0, 800ad92 <__d2b+0x72>
 800ad54:	9a01      	ldr	r2, [sp, #4]
 800ad56:	f1c0 0320 	rsb	r3, r0, #32
 800ad5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad5e:	430b      	orrs	r3, r1
 800ad60:	40c2      	lsrs	r2, r0
 800ad62:	617b      	str	r3, [r7, #20]
 800ad64:	9201      	str	r2, [sp, #4]
 800ad66:	9b01      	ldr	r3, [sp, #4]
 800ad68:	61bb      	str	r3, [r7, #24]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	bf14      	ite	ne
 800ad6e:	2102      	movne	r1, #2
 800ad70:	2101      	moveq	r1, #1
 800ad72:	6139      	str	r1, [r7, #16]
 800ad74:	b1c4      	cbz	r4, 800ada8 <__d2b+0x88>
 800ad76:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ad7a:	4404      	add	r4, r0
 800ad7c:	6034      	str	r4, [r6, #0]
 800ad7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad82:	6028      	str	r0, [r5, #0]
 800ad84:	4638      	mov	r0, r7
 800ad86:	b003      	add	sp, #12
 800ad88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad90:	e7d5      	b.n	800ad3e <__d2b+0x1e>
 800ad92:	6179      	str	r1, [r7, #20]
 800ad94:	e7e7      	b.n	800ad66 <__d2b+0x46>
 800ad96:	a801      	add	r0, sp, #4
 800ad98:	f7ff fd64 	bl	800a864 <__lo0bits>
 800ad9c:	9b01      	ldr	r3, [sp, #4]
 800ad9e:	617b      	str	r3, [r7, #20]
 800ada0:	2101      	movs	r1, #1
 800ada2:	6139      	str	r1, [r7, #16]
 800ada4:	3020      	adds	r0, #32
 800ada6:	e7e5      	b.n	800ad74 <__d2b+0x54>
 800ada8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800adac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adb0:	6030      	str	r0, [r6, #0]
 800adb2:	6918      	ldr	r0, [r3, #16]
 800adb4:	f7ff fd37 	bl	800a826 <__hi0bits>
 800adb8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800adbc:	e7e1      	b.n	800ad82 <__d2b+0x62>

0800adbe <__ratio>:
 800adbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc2:	4688      	mov	r8, r1
 800adc4:	4669      	mov	r1, sp
 800adc6:	4681      	mov	r9, r0
 800adc8:	f7ff ff5c 	bl	800ac84 <__b2d>
 800adcc:	a901      	add	r1, sp, #4
 800adce:	4640      	mov	r0, r8
 800add0:	ec57 6b10 	vmov	r6, r7, d0
 800add4:	f7ff ff56 	bl	800ac84 <__b2d>
 800add8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800addc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ade0:	eba3 0c02 	sub.w	ip, r3, r2
 800ade4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ade8:	1a9b      	subs	r3, r3, r2
 800adea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800adee:	ec5b ab10 	vmov	sl, fp, d0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	bfce      	itee	gt
 800adf6:	463a      	movgt	r2, r7
 800adf8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800adfc:	465a      	movle	r2, fp
 800adfe:	4659      	mov	r1, fp
 800ae00:	463d      	mov	r5, r7
 800ae02:	bfd4      	ite	le
 800ae04:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800ae08:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	ee10 2a10 	vmov	r2, s0
 800ae12:	460b      	mov	r3, r1
 800ae14:	4629      	mov	r1, r5
 800ae16:	f7f5 fd19 	bl	800084c <__aeabi_ddiv>
 800ae1a:	ec41 0b10 	vmov	d0, r0, r1
 800ae1e:	b003      	add	sp, #12
 800ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae24 <__copybits>:
 800ae24:	3901      	subs	r1, #1
 800ae26:	b510      	push	{r4, lr}
 800ae28:	1149      	asrs	r1, r1, #5
 800ae2a:	6914      	ldr	r4, [r2, #16]
 800ae2c:	3101      	adds	r1, #1
 800ae2e:	f102 0314 	add.w	r3, r2, #20
 800ae32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae3a:	42a3      	cmp	r3, r4
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	d303      	bcc.n	800ae48 <__copybits+0x24>
 800ae40:	2300      	movs	r3, #0
 800ae42:	428a      	cmp	r2, r1
 800ae44:	d305      	bcc.n	800ae52 <__copybits+0x2e>
 800ae46:	bd10      	pop	{r4, pc}
 800ae48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae4c:	f840 2b04 	str.w	r2, [r0], #4
 800ae50:	e7f3      	b.n	800ae3a <__copybits+0x16>
 800ae52:	f842 3b04 	str.w	r3, [r2], #4
 800ae56:	e7f4      	b.n	800ae42 <__copybits+0x1e>

0800ae58 <__any_on>:
 800ae58:	f100 0214 	add.w	r2, r0, #20
 800ae5c:	6900      	ldr	r0, [r0, #16]
 800ae5e:	114b      	asrs	r3, r1, #5
 800ae60:	4298      	cmp	r0, r3
 800ae62:	b510      	push	{r4, lr}
 800ae64:	db11      	blt.n	800ae8a <__any_on+0x32>
 800ae66:	dd0a      	ble.n	800ae7e <__any_on+0x26>
 800ae68:	f011 011f 	ands.w	r1, r1, #31
 800ae6c:	d007      	beq.n	800ae7e <__any_on+0x26>
 800ae6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae72:	fa24 f001 	lsr.w	r0, r4, r1
 800ae76:	fa00 f101 	lsl.w	r1, r0, r1
 800ae7a:	428c      	cmp	r4, r1
 800ae7c:	d10b      	bne.n	800ae96 <__any_on+0x3e>
 800ae7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d803      	bhi.n	800ae8e <__any_on+0x36>
 800ae86:	2000      	movs	r0, #0
 800ae88:	bd10      	pop	{r4, pc}
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	e7f7      	b.n	800ae7e <__any_on+0x26>
 800ae8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae92:	2900      	cmp	r1, #0
 800ae94:	d0f5      	beq.n	800ae82 <__any_on+0x2a>
 800ae96:	2001      	movs	r0, #1
 800ae98:	e7f6      	b.n	800ae88 <__any_on+0x30>

0800ae9a <_calloc_r>:
 800ae9a:	b538      	push	{r3, r4, r5, lr}
 800ae9c:	fb02 f401 	mul.w	r4, r2, r1
 800aea0:	4621      	mov	r1, r4
 800aea2:	f000 f857 	bl	800af54 <_malloc_r>
 800aea6:	4605      	mov	r5, r0
 800aea8:	b118      	cbz	r0, 800aeb2 <_calloc_r+0x18>
 800aeaa:	4622      	mov	r2, r4
 800aeac:	2100      	movs	r1, #0
 800aeae:	f7fc ff8f 	bl	8007dd0 <memset>
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800aeb8 <_free_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4605      	mov	r5, r0
 800aebc:	2900      	cmp	r1, #0
 800aebe:	d045      	beq.n	800af4c <_free_r+0x94>
 800aec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aec4:	1f0c      	subs	r4, r1, #4
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	bfb8      	it	lt
 800aeca:	18e4      	addlt	r4, r4, r3
 800aecc:	f000 fa24 	bl	800b318 <__malloc_lock>
 800aed0:	4a1f      	ldr	r2, [pc, #124]	; (800af50 <_free_r+0x98>)
 800aed2:	6813      	ldr	r3, [r2, #0]
 800aed4:	4610      	mov	r0, r2
 800aed6:	b933      	cbnz	r3, 800aee6 <_free_r+0x2e>
 800aed8:	6063      	str	r3, [r4, #4]
 800aeda:	6014      	str	r4, [r2, #0]
 800aedc:	4628      	mov	r0, r5
 800aede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aee2:	f000 ba1a 	b.w	800b31a <__malloc_unlock>
 800aee6:	42a3      	cmp	r3, r4
 800aee8:	d90c      	bls.n	800af04 <_free_r+0x4c>
 800aeea:	6821      	ldr	r1, [r4, #0]
 800aeec:	1862      	adds	r2, r4, r1
 800aeee:	4293      	cmp	r3, r2
 800aef0:	bf04      	itt	eq
 800aef2:	681a      	ldreq	r2, [r3, #0]
 800aef4:	685b      	ldreq	r3, [r3, #4]
 800aef6:	6063      	str	r3, [r4, #4]
 800aef8:	bf04      	itt	eq
 800aefa:	1852      	addeq	r2, r2, r1
 800aefc:	6022      	streq	r2, [r4, #0]
 800aefe:	6004      	str	r4, [r0, #0]
 800af00:	e7ec      	b.n	800aedc <_free_r+0x24>
 800af02:	4613      	mov	r3, r2
 800af04:	685a      	ldr	r2, [r3, #4]
 800af06:	b10a      	cbz	r2, 800af0c <_free_r+0x54>
 800af08:	42a2      	cmp	r2, r4
 800af0a:	d9fa      	bls.n	800af02 <_free_r+0x4a>
 800af0c:	6819      	ldr	r1, [r3, #0]
 800af0e:	1858      	adds	r0, r3, r1
 800af10:	42a0      	cmp	r0, r4
 800af12:	d10b      	bne.n	800af2c <_free_r+0x74>
 800af14:	6820      	ldr	r0, [r4, #0]
 800af16:	4401      	add	r1, r0
 800af18:	1858      	adds	r0, r3, r1
 800af1a:	4282      	cmp	r2, r0
 800af1c:	6019      	str	r1, [r3, #0]
 800af1e:	d1dd      	bne.n	800aedc <_free_r+0x24>
 800af20:	6810      	ldr	r0, [r2, #0]
 800af22:	6852      	ldr	r2, [r2, #4]
 800af24:	605a      	str	r2, [r3, #4]
 800af26:	4401      	add	r1, r0
 800af28:	6019      	str	r1, [r3, #0]
 800af2a:	e7d7      	b.n	800aedc <_free_r+0x24>
 800af2c:	d902      	bls.n	800af34 <_free_r+0x7c>
 800af2e:	230c      	movs	r3, #12
 800af30:	602b      	str	r3, [r5, #0]
 800af32:	e7d3      	b.n	800aedc <_free_r+0x24>
 800af34:	6820      	ldr	r0, [r4, #0]
 800af36:	1821      	adds	r1, r4, r0
 800af38:	428a      	cmp	r2, r1
 800af3a:	bf04      	itt	eq
 800af3c:	6811      	ldreq	r1, [r2, #0]
 800af3e:	6852      	ldreq	r2, [r2, #4]
 800af40:	6062      	str	r2, [r4, #4]
 800af42:	bf04      	itt	eq
 800af44:	1809      	addeq	r1, r1, r0
 800af46:	6021      	streq	r1, [r4, #0]
 800af48:	605c      	str	r4, [r3, #4]
 800af4a:	e7c7      	b.n	800aedc <_free_r+0x24>
 800af4c:	bd38      	pop	{r3, r4, r5, pc}
 800af4e:	bf00      	nop
 800af50:	20000414 	.word	0x20000414

0800af54 <_malloc_r>:
 800af54:	b570      	push	{r4, r5, r6, lr}
 800af56:	1ccd      	adds	r5, r1, #3
 800af58:	f025 0503 	bic.w	r5, r5, #3
 800af5c:	3508      	adds	r5, #8
 800af5e:	2d0c      	cmp	r5, #12
 800af60:	bf38      	it	cc
 800af62:	250c      	movcc	r5, #12
 800af64:	2d00      	cmp	r5, #0
 800af66:	4606      	mov	r6, r0
 800af68:	db01      	blt.n	800af6e <_malloc_r+0x1a>
 800af6a:	42a9      	cmp	r1, r5
 800af6c:	d903      	bls.n	800af76 <_malloc_r+0x22>
 800af6e:	230c      	movs	r3, #12
 800af70:	6033      	str	r3, [r6, #0]
 800af72:	2000      	movs	r0, #0
 800af74:	bd70      	pop	{r4, r5, r6, pc}
 800af76:	f000 f9cf 	bl	800b318 <__malloc_lock>
 800af7a:	4a21      	ldr	r2, [pc, #132]	; (800b000 <_malloc_r+0xac>)
 800af7c:	6814      	ldr	r4, [r2, #0]
 800af7e:	4621      	mov	r1, r4
 800af80:	b991      	cbnz	r1, 800afa8 <_malloc_r+0x54>
 800af82:	4c20      	ldr	r4, [pc, #128]	; (800b004 <_malloc_r+0xb0>)
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	b91b      	cbnz	r3, 800af90 <_malloc_r+0x3c>
 800af88:	4630      	mov	r0, r6
 800af8a:	f000 f98f 	bl	800b2ac <_sbrk_r>
 800af8e:	6020      	str	r0, [r4, #0]
 800af90:	4629      	mov	r1, r5
 800af92:	4630      	mov	r0, r6
 800af94:	f000 f98a 	bl	800b2ac <_sbrk_r>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d124      	bne.n	800afe6 <_malloc_r+0x92>
 800af9c:	230c      	movs	r3, #12
 800af9e:	6033      	str	r3, [r6, #0]
 800afa0:	4630      	mov	r0, r6
 800afa2:	f000 f9ba 	bl	800b31a <__malloc_unlock>
 800afa6:	e7e4      	b.n	800af72 <_malloc_r+0x1e>
 800afa8:	680b      	ldr	r3, [r1, #0]
 800afaa:	1b5b      	subs	r3, r3, r5
 800afac:	d418      	bmi.n	800afe0 <_malloc_r+0x8c>
 800afae:	2b0b      	cmp	r3, #11
 800afb0:	d90f      	bls.n	800afd2 <_malloc_r+0x7e>
 800afb2:	600b      	str	r3, [r1, #0]
 800afb4:	50cd      	str	r5, [r1, r3]
 800afb6:	18cc      	adds	r4, r1, r3
 800afb8:	4630      	mov	r0, r6
 800afba:	f000 f9ae 	bl	800b31a <__malloc_unlock>
 800afbe:	f104 000b 	add.w	r0, r4, #11
 800afc2:	1d23      	adds	r3, r4, #4
 800afc4:	f020 0007 	bic.w	r0, r0, #7
 800afc8:	1ac3      	subs	r3, r0, r3
 800afca:	d0d3      	beq.n	800af74 <_malloc_r+0x20>
 800afcc:	425a      	negs	r2, r3
 800afce:	50e2      	str	r2, [r4, r3]
 800afd0:	e7d0      	b.n	800af74 <_malloc_r+0x20>
 800afd2:	428c      	cmp	r4, r1
 800afd4:	684b      	ldr	r3, [r1, #4]
 800afd6:	bf16      	itet	ne
 800afd8:	6063      	strne	r3, [r4, #4]
 800afda:	6013      	streq	r3, [r2, #0]
 800afdc:	460c      	movne	r4, r1
 800afde:	e7eb      	b.n	800afb8 <_malloc_r+0x64>
 800afe0:	460c      	mov	r4, r1
 800afe2:	6849      	ldr	r1, [r1, #4]
 800afe4:	e7cc      	b.n	800af80 <_malloc_r+0x2c>
 800afe6:	1cc4      	adds	r4, r0, #3
 800afe8:	f024 0403 	bic.w	r4, r4, #3
 800afec:	42a0      	cmp	r0, r4
 800afee:	d005      	beq.n	800affc <_malloc_r+0xa8>
 800aff0:	1a21      	subs	r1, r4, r0
 800aff2:	4630      	mov	r0, r6
 800aff4:	f000 f95a 	bl	800b2ac <_sbrk_r>
 800aff8:	3001      	adds	r0, #1
 800affa:	d0cf      	beq.n	800af9c <_malloc_r+0x48>
 800affc:	6025      	str	r5, [r4, #0]
 800affe:	e7db      	b.n	800afb8 <_malloc_r+0x64>
 800b000:	20000414 	.word	0x20000414
 800b004:	20000418 	.word	0x20000418

0800b008 <__ssputs_r>:
 800b008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b00c:	688e      	ldr	r6, [r1, #8]
 800b00e:	429e      	cmp	r6, r3
 800b010:	4682      	mov	sl, r0
 800b012:	460c      	mov	r4, r1
 800b014:	4690      	mov	r8, r2
 800b016:	4699      	mov	r9, r3
 800b018:	d837      	bhi.n	800b08a <__ssputs_r+0x82>
 800b01a:	898a      	ldrh	r2, [r1, #12]
 800b01c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b020:	d031      	beq.n	800b086 <__ssputs_r+0x7e>
 800b022:	6825      	ldr	r5, [r4, #0]
 800b024:	6909      	ldr	r1, [r1, #16]
 800b026:	1a6f      	subs	r7, r5, r1
 800b028:	6965      	ldr	r5, [r4, #20]
 800b02a:	2302      	movs	r3, #2
 800b02c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b030:	fb95 f5f3 	sdiv	r5, r5, r3
 800b034:	f109 0301 	add.w	r3, r9, #1
 800b038:	443b      	add	r3, r7
 800b03a:	429d      	cmp	r5, r3
 800b03c:	bf38      	it	cc
 800b03e:	461d      	movcc	r5, r3
 800b040:	0553      	lsls	r3, r2, #21
 800b042:	d530      	bpl.n	800b0a6 <__ssputs_r+0x9e>
 800b044:	4629      	mov	r1, r5
 800b046:	f7ff ff85 	bl	800af54 <_malloc_r>
 800b04a:	4606      	mov	r6, r0
 800b04c:	b950      	cbnz	r0, 800b064 <__ssputs_r+0x5c>
 800b04e:	230c      	movs	r3, #12
 800b050:	f8ca 3000 	str.w	r3, [sl]
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b05a:	81a3      	strh	r3, [r4, #12]
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295
 800b060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b064:	463a      	mov	r2, r7
 800b066:	6921      	ldr	r1, [r4, #16]
 800b068:	f7ff fb0e 	bl	800a688 <memcpy>
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b076:	81a3      	strh	r3, [r4, #12]
 800b078:	6126      	str	r6, [r4, #16]
 800b07a:	6165      	str	r5, [r4, #20]
 800b07c:	443e      	add	r6, r7
 800b07e:	1bed      	subs	r5, r5, r7
 800b080:	6026      	str	r6, [r4, #0]
 800b082:	60a5      	str	r5, [r4, #8]
 800b084:	464e      	mov	r6, r9
 800b086:	454e      	cmp	r6, r9
 800b088:	d900      	bls.n	800b08c <__ssputs_r+0x84>
 800b08a:	464e      	mov	r6, r9
 800b08c:	4632      	mov	r2, r6
 800b08e:	4641      	mov	r1, r8
 800b090:	6820      	ldr	r0, [r4, #0]
 800b092:	f000 f928 	bl	800b2e6 <memmove>
 800b096:	68a3      	ldr	r3, [r4, #8]
 800b098:	1b9b      	subs	r3, r3, r6
 800b09a:	60a3      	str	r3, [r4, #8]
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	441e      	add	r6, r3
 800b0a0:	6026      	str	r6, [r4, #0]
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	e7dc      	b.n	800b060 <__ssputs_r+0x58>
 800b0a6:	462a      	mov	r2, r5
 800b0a8:	f000 f938 	bl	800b31c <_realloc_r>
 800b0ac:	4606      	mov	r6, r0
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d1e2      	bne.n	800b078 <__ssputs_r+0x70>
 800b0b2:	6921      	ldr	r1, [r4, #16]
 800b0b4:	4650      	mov	r0, sl
 800b0b6:	f7ff feff 	bl	800aeb8 <_free_r>
 800b0ba:	e7c8      	b.n	800b04e <__ssputs_r+0x46>

0800b0bc <_svfiprintf_r>:
 800b0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c0:	461d      	mov	r5, r3
 800b0c2:	898b      	ldrh	r3, [r1, #12]
 800b0c4:	061f      	lsls	r7, r3, #24
 800b0c6:	b09d      	sub	sp, #116	; 0x74
 800b0c8:	4680      	mov	r8, r0
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	4616      	mov	r6, r2
 800b0ce:	d50f      	bpl.n	800b0f0 <_svfiprintf_r+0x34>
 800b0d0:	690b      	ldr	r3, [r1, #16]
 800b0d2:	b96b      	cbnz	r3, 800b0f0 <_svfiprintf_r+0x34>
 800b0d4:	2140      	movs	r1, #64	; 0x40
 800b0d6:	f7ff ff3d 	bl	800af54 <_malloc_r>
 800b0da:	6020      	str	r0, [r4, #0]
 800b0dc:	6120      	str	r0, [r4, #16]
 800b0de:	b928      	cbnz	r0, 800b0ec <_svfiprintf_r+0x30>
 800b0e0:	230c      	movs	r3, #12
 800b0e2:	f8c8 3000 	str.w	r3, [r8]
 800b0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ea:	e0c8      	b.n	800b27e <_svfiprintf_r+0x1c2>
 800b0ec:	2340      	movs	r3, #64	; 0x40
 800b0ee:	6163      	str	r3, [r4, #20]
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f4:	2320      	movs	r3, #32
 800b0f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0fa:	2330      	movs	r3, #48	; 0x30
 800b0fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b100:	9503      	str	r5, [sp, #12]
 800b102:	f04f 0b01 	mov.w	fp, #1
 800b106:	4637      	mov	r7, r6
 800b108:	463d      	mov	r5, r7
 800b10a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b10e:	b10b      	cbz	r3, 800b114 <_svfiprintf_r+0x58>
 800b110:	2b25      	cmp	r3, #37	; 0x25
 800b112:	d13e      	bne.n	800b192 <_svfiprintf_r+0xd6>
 800b114:	ebb7 0a06 	subs.w	sl, r7, r6
 800b118:	d00b      	beq.n	800b132 <_svfiprintf_r+0x76>
 800b11a:	4653      	mov	r3, sl
 800b11c:	4632      	mov	r2, r6
 800b11e:	4621      	mov	r1, r4
 800b120:	4640      	mov	r0, r8
 800b122:	f7ff ff71 	bl	800b008 <__ssputs_r>
 800b126:	3001      	adds	r0, #1
 800b128:	f000 80a4 	beq.w	800b274 <_svfiprintf_r+0x1b8>
 800b12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b12e:	4453      	add	r3, sl
 800b130:	9309      	str	r3, [sp, #36]	; 0x24
 800b132:	783b      	ldrb	r3, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 809d 	beq.w	800b274 <_svfiprintf_r+0x1b8>
 800b13a:	2300      	movs	r3, #0
 800b13c:	f04f 32ff 	mov.w	r2, #4294967295
 800b140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b144:	9304      	str	r3, [sp, #16]
 800b146:	9307      	str	r3, [sp, #28]
 800b148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b14c:	931a      	str	r3, [sp, #104]	; 0x68
 800b14e:	462f      	mov	r7, r5
 800b150:	2205      	movs	r2, #5
 800b152:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b156:	4850      	ldr	r0, [pc, #320]	; (800b298 <_svfiprintf_r+0x1dc>)
 800b158:	f7f5 f83a 	bl	80001d0 <memchr>
 800b15c:	9b04      	ldr	r3, [sp, #16]
 800b15e:	b9d0      	cbnz	r0, 800b196 <_svfiprintf_r+0xda>
 800b160:	06d9      	lsls	r1, r3, #27
 800b162:	bf44      	itt	mi
 800b164:	2220      	movmi	r2, #32
 800b166:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b16a:	071a      	lsls	r2, r3, #28
 800b16c:	bf44      	itt	mi
 800b16e:	222b      	movmi	r2, #43	; 0x2b
 800b170:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b174:	782a      	ldrb	r2, [r5, #0]
 800b176:	2a2a      	cmp	r2, #42	; 0x2a
 800b178:	d015      	beq.n	800b1a6 <_svfiprintf_r+0xea>
 800b17a:	9a07      	ldr	r2, [sp, #28]
 800b17c:	462f      	mov	r7, r5
 800b17e:	2000      	movs	r0, #0
 800b180:	250a      	movs	r5, #10
 800b182:	4639      	mov	r1, r7
 800b184:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b188:	3b30      	subs	r3, #48	; 0x30
 800b18a:	2b09      	cmp	r3, #9
 800b18c:	d94d      	bls.n	800b22a <_svfiprintf_r+0x16e>
 800b18e:	b1b8      	cbz	r0, 800b1c0 <_svfiprintf_r+0x104>
 800b190:	e00f      	b.n	800b1b2 <_svfiprintf_r+0xf6>
 800b192:	462f      	mov	r7, r5
 800b194:	e7b8      	b.n	800b108 <_svfiprintf_r+0x4c>
 800b196:	4a40      	ldr	r2, [pc, #256]	; (800b298 <_svfiprintf_r+0x1dc>)
 800b198:	1a80      	subs	r0, r0, r2
 800b19a:	fa0b f000 	lsl.w	r0, fp, r0
 800b19e:	4318      	orrs	r0, r3
 800b1a0:	9004      	str	r0, [sp, #16]
 800b1a2:	463d      	mov	r5, r7
 800b1a4:	e7d3      	b.n	800b14e <_svfiprintf_r+0x92>
 800b1a6:	9a03      	ldr	r2, [sp, #12]
 800b1a8:	1d11      	adds	r1, r2, #4
 800b1aa:	6812      	ldr	r2, [r2, #0]
 800b1ac:	9103      	str	r1, [sp, #12]
 800b1ae:	2a00      	cmp	r2, #0
 800b1b0:	db01      	blt.n	800b1b6 <_svfiprintf_r+0xfa>
 800b1b2:	9207      	str	r2, [sp, #28]
 800b1b4:	e004      	b.n	800b1c0 <_svfiprintf_r+0x104>
 800b1b6:	4252      	negs	r2, r2
 800b1b8:	f043 0302 	orr.w	r3, r3, #2
 800b1bc:	9207      	str	r2, [sp, #28]
 800b1be:	9304      	str	r3, [sp, #16]
 800b1c0:	783b      	ldrb	r3, [r7, #0]
 800b1c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b1c4:	d10c      	bne.n	800b1e0 <_svfiprintf_r+0x124>
 800b1c6:	787b      	ldrb	r3, [r7, #1]
 800b1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ca:	d133      	bne.n	800b234 <_svfiprintf_r+0x178>
 800b1cc:	9b03      	ldr	r3, [sp, #12]
 800b1ce:	1d1a      	adds	r2, r3, #4
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	9203      	str	r2, [sp, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bfb8      	it	lt
 800b1d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1dc:	3702      	adds	r7, #2
 800b1de:	9305      	str	r3, [sp, #20]
 800b1e0:	4d2e      	ldr	r5, [pc, #184]	; (800b29c <_svfiprintf_r+0x1e0>)
 800b1e2:	7839      	ldrb	r1, [r7, #0]
 800b1e4:	2203      	movs	r2, #3
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f7f4 fff2 	bl	80001d0 <memchr>
 800b1ec:	b138      	cbz	r0, 800b1fe <_svfiprintf_r+0x142>
 800b1ee:	2340      	movs	r3, #64	; 0x40
 800b1f0:	1b40      	subs	r0, r0, r5
 800b1f2:	fa03 f000 	lsl.w	r0, r3, r0
 800b1f6:	9b04      	ldr	r3, [sp, #16]
 800b1f8:	4303      	orrs	r3, r0
 800b1fa:	3701      	adds	r7, #1
 800b1fc:	9304      	str	r3, [sp, #16]
 800b1fe:	7839      	ldrb	r1, [r7, #0]
 800b200:	4827      	ldr	r0, [pc, #156]	; (800b2a0 <_svfiprintf_r+0x1e4>)
 800b202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b206:	2206      	movs	r2, #6
 800b208:	1c7e      	adds	r6, r7, #1
 800b20a:	f7f4 ffe1 	bl	80001d0 <memchr>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d038      	beq.n	800b284 <_svfiprintf_r+0x1c8>
 800b212:	4b24      	ldr	r3, [pc, #144]	; (800b2a4 <_svfiprintf_r+0x1e8>)
 800b214:	bb13      	cbnz	r3, 800b25c <_svfiprintf_r+0x1a0>
 800b216:	9b03      	ldr	r3, [sp, #12]
 800b218:	3307      	adds	r3, #7
 800b21a:	f023 0307 	bic.w	r3, r3, #7
 800b21e:	3308      	adds	r3, #8
 800b220:	9303      	str	r3, [sp, #12]
 800b222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b224:	444b      	add	r3, r9
 800b226:	9309      	str	r3, [sp, #36]	; 0x24
 800b228:	e76d      	b.n	800b106 <_svfiprintf_r+0x4a>
 800b22a:	fb05 3202 	mla	r2, r5, r2, r3
 800b22e:	2001      	movs	r0, #1
 800b230:	460f      	mov	r7, r1
 800b232:	e7a6      	b.n	800b182 <_svfiprintf_r+0xc6>
 800b234:	2300      	movs	r3, #0
 800b236:	3701      	adds	r7, #1
 800b238:	9305      	str	r3, [sp, #20]
 800b23a:	4619      	mov	r1, r3
 800b23c:	250a      	movs	r5, #10
 800b23e:	4638      	mov	r0, r7
 800b240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b244:	3a30      	subs	r2, #48	; 0x30
 800b246:	2a09      	cmp	r2, #9
 800b248:	d903      	bls.n	800b252 <_svfiprintf_r+0x196>
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0c8      	beq.n	800b1e0 <_svfiprintf_r+0x124>
 800b24e:	9105      	str	r1, [sp, #20]
 800b250:	e7c6      	b.n	800b1e0 <_svfiprintf_r+0x124>
 800b252:	fb05 2101 	mla	r1, r5, r1, r2
 800b256:	2301      	movs	r3, #1
 800b258:	4607      	mov	r7, r0
 800b25a:	e7f0      	b.n	800b23e <_svfiprintf_r+0x182>
 800b25c:	ab03      	add	r3, sp, #12
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	4622      	mov	r2, r4
 800b262:	4b11      	ldr	r3, [pc, #68]	; (800b2a8 <_svfiprintf_r+0x1ec>)
 800b264:	a904      	add	r1, sp, #16
 800b266:	4640      	mov	r0, r8
 800b268:	f7fc fe4e 	bl	8007f08 <_printf_float>
 800b26c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b270:	4681      	mov	r9, r0
 800b272:	d1d6      	bne.n	800b222 <_svfiprintf_r+0x166>
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	065b      	lsls	r3, r3, #25
 800b278:	f53f af35 	bmi.w	800b0e6 <_svfiprintf_r+0x2a>
 800b27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b27e:	b01d      	add	sp, #116	; 0x74
 800b280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b284:	ab03      	add	r3, sp, #12
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	4622      	mov	r2, r4
 800b28a:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <_svfiprintf_r+0x1ec>)
 800b28c:	a904      	add	r1, sp, #16
 800b28e:	4640      	mov	r0, r8
 800b290:	f7fd f8f0 	bl	8008474 <_printf_i>
 800b294:	e7ea      	b.n	800b26c <_svfiprintf_r+0x1b0>
 800b296:	bf00      	nop
 800b298:	0800c824 	.word	0x0800c824
 800b29c:	0800c82a 	.word	0x0800c82a
 800b2a0:	0800c82e 	.word	0x0800c82e
 800b2a4:	08007f09 	.word	0x08007f09
 800b2a8:	0800b009 	.word	0x0800b009

0800b2ac <_sbrk_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4c06      	ldr	r4, [pc, #24]	; (800b2c8 <_sbrk_r+0x1c>)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	f7f8 fb54 	bl	8003964 <_sbrk>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d102      	bne.n	800b2c6 <_sbrk_r+0x1a>
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	b103      	cbz	r3, 800b2c6 <_sbrk_r+0x1a>
 800b2c4:	602b      	str	r3, [r5, #0]
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	20000c84 	.word	0x20000c84

0800b2cc <__ascii_wctomb>:
 800b2cc:	b149      	cbz	r1, 800b2e2 <__ascii_wctomb+0x16>
 800b2ce:	2aff      	cmp	r2, #255	; 0xff
 800b2d0:	bf85      	ittet	hi
 800b2d2:	238a      	movhi	r3, #138	; 0x8a
 800b2d4:	6003      	strhi	r3, [r0, #0]
 800b2d6:	700a      	strbls	r2, [r1, #0]
 800b2d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2dc:	bf98      	it	ls
 800b2de:	2001      	movls	r0, #1
 800b2e0:	4770      	bx	lr
 800b2e2:	4608      	mov	r0, r1
 800b2e4:	4770      	bx	lr

0800b2e6 <memmove>:
 800b2e6:	4288      	cmp	r0, r1
 800b2e8:	b510      	push	{r4, lr}
 800b2ea:	eb01 0302 	add.w	r3, r1, r2
 800b2ee:	d807      	bhi.n	800b300 <memmove+0x1a>
 800b2f0:	1e42      	subs	r2, r0, #1
 800b2f2:	4299      	cmp	r1, r3
 800b2f4:	d00a      	beq.n	800b30c <memmove+0x26>
 800b2f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b2fe:	e7f8      	b.n	800b2f2 <memmove+0xc>
 800b300:	4283      	cmp	r3, r0
 800b302:	d9f5      	bls.n	800b2f0 <memmove+0xa>
 800b304:	1881      	adds	r1, r0, r2
 800b306:	1ad2      	subs	r2, r2, r3
 800b308:	42d3      	cmn	r3, r2
 800b30a:	d100      	bne.n	800b30e <memmove+0x28>
 800b30c:	bd10      	pop	{r4, pc}
 800b30e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b312:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b316:	e7f7      	b.n	800b308 <memmove+0x22>

0800b318 <__malloc_lock>:
 800b318:	4770      	bx	lr

0800b31a <__malloc_unlock>:
 800b31a:	4770      	bx	lr

0800b31c <_realloc_r>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	4607      	mov	r7, r0
 800b320:	4614      	mov	r4, r2
 800b322:	460e      	mov	r6, r1
 800b324:	b921      	cbnz	r1, 800b330 <_realloc_r+0x14>
 800b326:	4611      	mov	r1, r2
 800b328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b32c:	f7ff be12 	b.w	800af54 <_malloc_r>
 800b330:	b922      	cbnz	r2, 800b33c <_realloc_r+0x20>
 800b332:	f7ff fdc1 	bl	800aeb8 <_free_r>
 800b336:	4625      	mov	r5, r4
 800b338:	4628      	mov	r0, r5
 800b33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b33c:	f000 f814 	bl	800b368 <_malloc_usable_size_r>
 800b340:	42a0      	cmp	r0, r4
 800b342:	d20f      	bcs.n	800b364 <_realloc_r+0x48>
 800b344:	4621      	mov	r1, r4
 800b346:	4638      	mov	r0, r7
 800b348:	f7ff fe04 	bl	800af54 <_malloc_r>
 800b34c:	4605      	mov	r5, r0
 800b34e:	2800      	cmp	r0, #0
 800b350:	d0f2      	beq.n	800b338 <_realloc_r+0x1c>
 800b352:	4631      	mov	r1, r6
 800b354:	4622      	mov	r2, r4
 800b356:	f7ff f997 	bl	800a688 <memcpy>
 800b35a:	4631      	mov	r1, r6
 800b35c:	4638      	mov	r0, r7
 800b35e:	f7ff fdab 	bl	800aeb8 <_free_r>
 800b362:	e7e9      	b.n	800b338 <_realloc_r+0x1c>
 800b364:	4635      	mov	r5, r6
 800b366:	e7e7      	b.n	800b338 <_realloc_r+0x1c>

0800b368 <_malloc_usable_size_r>:
 800b368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b36c:	1f18      	subs	r0, r3, #4
 800b36e:	2b00      	cmp	r3, #0
 800b370:	bfbc      	itt	lt
 800b372:	580b      	ldrlt	r3, [r1, r0]
 800b374:	18c0      	addlt	r0, r0, r3
 800b376:	4770      	bx	lr

0800b378 <pow>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	ed2d 8b04 	vpush	{d8-d9}
 800b380:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b654 <pow+0x2dc>
 800b384:	b08d      	sub	sp, #52	; 0x34
 800b386:	ec57 6b10 	vmov	r6, r7, d0
 800b38a:	ec55 4b11 	vmov	r4, r5, d1
 800b38e:	f000 f9bf 	bl	800b710 <__ieee754_pow>
 800b392:	f999 3000 	ldrsb.w	r3, [r9]
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	3301      	adds	r3, #1
 800b39a:	eeb0 8a40 	vmov.f32	s16, s0
 800b39e:	eef0 8a60 	vmov.f32	s17, s1
 800b3a2:	46c8      	mov	r8, r9
 800b3a4:	d05f      	beq.n	800b466 <pow+0xee>
 800b3a6:	4622      	mov	r2, r4
 800b3a8:	462b      	mov	r3, r5
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	f7f5 fbbd 	bl	8000b2c <__aeabi_dcmpun>
 800b3b2:	4683      	mov	fp, r0
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d156      	bne.n	800b466 <pow+0xee>
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	463b      	mov	r3, r7
 800b3bc:	4630      	mov	r0, r6
 800b3be:	4639      	mov	r1, r7
 800b3c0:	f7f5 fbb4 	bl	8000b2c <__aeabi_dcmpun>
 800b3c4:	9001      	str	r0, [sp, #4]
 800b3c6:	b1e8      	cbz	r0, 800b404 <pow+0x8c>
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	f7f5 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d046      	beq.n	800b466 <pow+0xee>
 800b3d8:	2301      	movs	r3, #1
 800b3da:	9302      	str	r3, [sp, #8]
 800b3dc:	4b96      	ldr	r3, [pc, #600]	; (800b638 <pow+0x2c0>)
 800b3de:	9303      	str	r3, [sp, #12]
 800b3e0:	4b96      	ldr	r3, [pc, #600]	; (800b63c <pow+0x2c4>)
 800b3e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b3ec:	9b00      	ldr	r3, [sp, #0]
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b3f4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b3f8:	d033      	beq.n	800b462 <pow+0xea>
 800b3fa:	a802      	add	r0, sp, #8
 800b3fc:	f000 ff57 	bl	800c2ae <matherr>
 800b400:	bb48      	cbnz	r0, 800b456 <pow+0xde>
 800b402:	e05d      	b.n	800b4c0 <pow+0x148>
 800b404:	f04f 0a00 	mov.w	sl, #0
 800b408:	f04f 0b00 	mov.w	fp, #0
 800b40c:	4652      	mov	r2, sl
 800b40e:	465b      	mov	r3, fp
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 fb58 	bl	8000ac8 <__aeabi_dcmpeq>
 800b418:	ec4b ab19 	vmov	d9, sl, fp
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d054      	beq.n	800b4ca <pow+0x152>
 800b420:	4652      	mov	r2, sl
 800b422:	465b      	mov	r3, fp
 800b424:	4620      	mov	r0, r4
 800b426:	4629      	mov	r1, r5
 800b428:	f7f5 fb4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b42c:	4680      	mov	r8, r0
 800b42e:	b318      	cbz	r0, 800b478 <pow+0x100>
 800b430:	2301      	movs	r3, #1
 800b432:	9302      	str	r3, [sp, #8]
 800b434:	4b80      	ldr	r3, [pc, #512]	; (800b638 <pow+0x2c0>)
 800b436:	9303      	str	r3, [sp, #12]
 800b438:	9b01      	ldr	r3, [sp, #4]
 800b43a:	930a      	str	r3, [sp, #40]	; 0x28
 800b43c:	9b00      	ldr	r3, [sp, #0]
 800b43e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b442:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b446:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d0d5      	beq.n	800b3fa <pow+0x82>
 800b44e:	4b7b      	ldr	r3, [pc, #492]	; (800b63c <pow+0x2c4>)
 800b450:	2200      	movs	r2, #0
 800b452:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b458:	b11b      	cbz	r3, 800b462 <pow+0xea>
 800b45a:	f7fc fc8f 	bl	8007d7c <__errno>
 800b45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b460:	6003      	str	r3, [r0, #0]
 800b462:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b466:	eeb0 0a48 	vmov.f32	s0, s16
 800b46a:	eef0 0a68 	vmov.f32	s1, s17
 800b46e:	b00d      	add	sp, #52	; 0x34
 800b470:	ecbd 8b04 	vpop	{d8-d9}
 800b474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b478:	ec45 4b10 	vmov	d0, r4, r5
 800b47c:	f000 ff0f 	bl	800c29e <finite>
 800b480:	2800      	cmp	r0, #0
 800b482:	d0f0      	beq.n	800b466 <pow+0xee>
 800b484:	4652      	mov	r2, sl
 800b486:	465b      	mov	r3, fp
 800b488:	4620      	mov	r0, r4
 800b48a:	4629      	mov	r1, r5
 800b48c:	f7f5 fb26 	bl	8000adc <__aeabi_dcmplt>
 800b490:	2800      	cmp	r0, #0
 800b492:	d0e8      	beq.n	800b466 <pow+0xee>
 800b494:	2301      	movs	r3, #1
 800b496:	9302      	str	r3, [sp, #8]
 800b498:	4b67      	ldr	r3, [pc, #412]	; (800b638 <pow+0x2c0>)
 800b49a:	9303      	str	r3, [sp, #12]
 800b49c:	f999 3000 	ldrsb.w	r3, [r9]
 800b4a0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b4a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b4a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b4ac:	b913      	cbnz	r3, 800b4b4 <pow+0x13c>
 800b4ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b4b2:	e7a2      	b.n	800b3fa <pow+0x82>
 800b4b4:	4962      	ldr	r1, [pc, #392]	; (800b640 <pow+0x2c8>)
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d19c      	bne.n	800b3fa <pow+0x82>
 800b4c0:	f7fc fc5c 	bl	8007d7c <__errno>
 800b4c4:	2321      	movs	r3, #33	; 0x21
 800b4c6:	6003      	str	r3, [r0, #0]
 800b4c8:	e7c5      	b.n	800b456 <pow+0xde>
 800b4ca:	eeb0 0a48 	vmov.f32	s0, s16
 800b4ce:	eef0 0a68 	vmov.f32	s1, s17
 800b4d2:	f000 fee4 	bl	800c29e <finite>
 800b4d6:	9000      	str	r0, [sp, #0]
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	f040 8081 	bne.w	800b5e0 <pow+0x268>
 800b4de:	ec47 6b10 	vmov	d0, r6, r7
 800b4e2:	f000 fedc 	bl	800c29e <finite>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d07a      	beq.n	800b5e0 <pow+0x268>
 800b4ea:	ec45 4b10 	vmov	d0, r4, r5
 800b4ee:	f000 fed6 	bl	800c29e <finite>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	d074      	beq.n	800b5e0 <pow+0x268>
 800b4f6:	ec53 2b18 	vmov	r2, r3, d8
 800b4fa:	ee18 0a10 	vmov	r0, s16
 800b4fe:	4619      	mov	r1, r3
 800b500:	f7f5 fb14 	bl	8000b2c <__aeabi_dcmpun>
 800b504:	f999 9000 	ldrsb.w	r9, [r9]
 800b508:	4b4b      	ldr	r3, [pc, #300]	; (800b638 <pow+0x2c0>)
 800b50a:	b1b0      	cbz	r0, 800b53a <pow+0x1c2>
 800b50c:	2201      	movs	r2, #1
 800b50e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b512:	9b00      	ldr	r3, [sp, #0]
 800b514:	930a      	str	r3, [sp, #40]	; 0x28
 800b516:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b51a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b51e:	f1b9 0f00 	cmp.w	r9, #0
 800b522:	d0c4      	beq.n	800b4ae <pow+0x136>
 800b524:	4652      	mov	r2, sl
 800b526:	465b      	mov	r3, fp
 800b528:	4650      	mov	r0, sl
 800b52a:	4659      	mov	r1, fp
 800b52c:	f7f5 f98e 	bl	800084c <__aeabi_ddiv>
 800b530:	f1b9 0f02 	cmp.w	r9, #2
 800b534:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b538:	e7c1      	b.n	800b4be <pow+0x146>
 800b53a:	2203      	movs	r2, #3
 800b53c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b540:	900a      	str	r0, [sp, #40]	; 0x28
 800b542:	4629      	mov	r1, r5
 800b544:	4620      	mov	r0, r4
 800b546:	2200      	movs	r2, #0
 800b548:	4b3e      	ldr	r3, [pc, #248]	; (800b644 <pow+0x2cc>)
 800b54a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b54e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b552:	f7f5 f851 	bl	80005f8 <__aeabi_dmul>
 800b556:	4604      	mov	r4, r0
 800b558:	460d      	mov	r5, r1
 800b55a:	f1b9 0f00 	cmp.w	r9, #0
 800b55e:	d124      	bne.n	800b5aa <pow+0x232>
 800b560:	4b39      	ldr	r3, [pc, #228]	; (800b648 <pow+0x2d0>)
 800b562:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b566:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b56a:	4630      	mov	r0, r6
 800b56c:	4652      	mov	r2, sl
 800b56e:	465b      	mov	r3, fp
 800b570:	4639      	mov	r1, r7
 800b572:	f7f5 fab3 	bl	8000adc <__aeabi_dcmplt>
 800b576:	2800      	cmp	r0, #0
 800b578:	d056      	beq.n	800b628 <pow+0x2b0>
 800b57a:	ec45 4b10 	vmov	d0, r4, r5
 800b57e:	f000 fea3 	bl	800c2c8 <rint>
 800b582:	4622      	mov	r2, r4
 800b584:	462b      	mov	r3, r5
 800b586:	ec51 0b10 	vmov	r0, r1, d0
 800b58a:	f7f5 fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b58e:	b920      	cbnz	r0, 800b59a <pow+0x222>
 800b590:	4b2e      	ldr	r3, [pc, #184]	; (800b64c <pow+0x2d4>)
 800b592:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b596:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b59a:	f998 3000 	ldrsb.w	r3, [r8]
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d142      	bne.n	800b628 <pow+0x2b0>
 800b5a2:	f7fc fbeb 	bl	8007d7c <__errno>
 800b5a6:	2322      	movs	r3, #34	; 0x22
 800b5a8:	e78d      	b.n	800b4c6 <pow+0x14e>
 800b5aa:	4b29      	ldr	r3, [pc, #164]	; (800b650 <pow+0x2d8>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	4652      	mov	r2, sl
 800b5b6:	465b      	mov	r3, fp
 800b5b8:	4639      	mov	r1, r7
 800b5ba:	f7f5 fa8f 	bl	8000adc <__aeabi_dcmplt>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d0eb      	beq.n	800b59a <pow+0x222>
 800b5c2:	ec45 4b10 	vmov	d0, r4, r5
 800b5c6:	f000 fe7f 	bl	800c2c8 <rint>
 800b5ca:	4622      	mov	r2, r4
 800b5cc:	462b      	mov	r3, r5
 800b5ce:	ec51 0b10 	vmov	r0, r1, d0
 800b5d2:	f7f5 fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d1df      	bne.n	800b59a <pow+0x222>
 800b5da:	2200      	movs	r2, #0
 800b5dc:	4b18      	ldr	r3, [pc, #96]	; (800b640 <pow+0x2c8>)
 800b5de:	e7da      	b.n	800b596 <pow+0x21e>
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	ec51 0b18 	vmov	r0, r1, d8
 800b5e8:	f7f5 fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	f43f af3a 	beq.w	800b466 <pow+0xee>
 800b5f2:	ec47 6b10 	vmov	d0, r6, r7
 800b5f6:	f000 fe52 	bl	800c29e <finite>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	f43f af33 	beq.w	800b466 <pow+0xee>
 800b600:	ec45 4b10 	vmov	d0, r4, r5
 800b604:	f000 fe4b 	bl	800c29e <finite>
 800b608:	2800      	cmp	r0, #0
 800b60a:	f43f af2c 	beq.w	800b466 <pow+0xee>
 800b60e:	2304      	movs	r3, #4
 800b610:	9302      	str	r3, [sp, #8]
 800b612:	4b09      	ldr	r3, [pc, #36]	; (800b638 <pow+0x2c0>)
 800b614:	9303      	str	r3, [sp, #12]
 800b616:	2300      	movs	r3, #0
 800b618:	930a      	str	r3, [sp, #40]	; 0x28
 800b61a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b61e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b622:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b626:	e7b8      	b.n	800b59a <pow+0x222>
 800b628:	a802      	add	r0, sp, #8
 800b62a:	f000 fe40 	bl	800c2ae <matherr>
 800b62e:	2800      	cmp	r0, #0
 800b630:	f47f af11 	bne.w	800b456 <pow+0xde>
 800b634:	e7b5      	b.n	800b5a2 <pow+0x22a>
 800b636:	bf00      	nop
 800b638:	0800c936 	.word	0x0800c936
 800b63c:	3ff00000 	.word	0x3ff00000
 800b640:	fff00000 	.word	0xfff00000
 800b644:	3fe00000 	.word	0x3fe00000
 800b648:	47efffff 	.word	0x47efffff
 800b64c:	c7efffff 	.word	0xc7efffff
 800b650:	7ff00000 	.word	0x7ff00000
 800b654:	200001e4 	.word	0x200001e4

0800b658 <sqrt>:
 800b658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b65c:	ed2d 8b02 	vpush	{d8}
 800b660:	b08b      	sub	sp, #44	; 0x2c
 800b662:	ec55 4b10 	vmov	r4, r5, d0
 800b666:	f000 fd61 	bl	800c12c <__ieee754_sqrt>
 800b66a:	4b26      	ldr	r3, [pc, #152]	; (800b704 <sqrt+0xac>)
 800b66c:	eeb0 8a40 	vmov.f32	s16, s0
 800b670:	eef0 8a60 	vmov.f32	s17, s1
 800b674:	f993 6000 	ldrsb.w	r6, [r3]
 800b678:	1c73      	adds	r3, r6, #1
 800b67a:	d02a      	beq.n	800b6d2 <sqrt+0x7a>
 800b67c:	4622      	mov	r2, r4
 800b67e:	462b      	mov	r3, r5
 800b680:	4620      	mov	r0, r4
 800b682:	4629      	mov	r1, r5
 800b684:	f7f5 fa52 	bl	8000b2c <__aeabi_dcmpun>
 800b688:	4607      	mov	r7, r0
 800b68a:	bb10      	cbnz	r0, 800b6d2 <sqrt+0x7a>
 800b68c:	f04f 0800 	mov.w	r8, #0
 800b690:	f04f 0900 	mov.w	r9, #0
 800b694:	4642      	mov	r2, r8
 800b696:	464b      	mov	r3, r9
 800b698:	4620      	mov	r0, r4
 800b69a:	4629      	mov	r1, r5
 800b69c:	f7f5 fa1e 	bl	8000adc <__aeabi_dcmplt>
 800b6a0:	b1b8      	cbz	r0, 800b6d2 <sqrt+0x7a>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	4b18      	ldr	r3, [pc, #96]	; (800b708 <sqrt+0xb0>)
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	9708      	str	r7, [sp, #32]
 800b6ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b6b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b6b4:	b9b6      	cbnz	r6, 800b6e4 <sqrt+0x8c>
 800b6b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b6ba:	4668      	mov	r0, sp
 800b6bc:	f000 fdf7 	bl	800c2ae <matherr>
 800b6c0:	b1d0      	cbz	r0, 800b6f8 <sqrt+0xa0>
 800b6c2:	9b08      	ldr	r3, [sp, #32]
 800b6c4:	b11b      	cbz	r3, 800b6ce <sqrt+0x76>
 800b6c6:	f7fc fb59 	bl	8007d7c <__errno>
 800b6ca:	9b08      	ldr	r3, [sp, #32]
 800b6cc:	6003      	str	r3, [r0, #0]
 800b6ce:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b6d2:	eeb0 0a48 	vmov.f32	s0, s16
 800b6d6:	eef0 0a68 	vmov.f32	s1, s17
 800b6da:	b00b      	add	sp, #44	; 0x2c
 800b6dc:	ecbd 8b02 	vpop	{d8}
 800b6e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6e4:	4642      	mov	r2, r8
 800b6e6:	464b      	mov	r3, r9
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	f7f5 f8ae 	bl	800084c <__aeabi_ddiv>
 800b6f0:	2e02      	cmp	r6, #2
 800b6f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b6f6:	d1e0      	bne.n	800b6ba <sqrt+0x62>
 800b6f8:	f7fc fb40 	bl	8007d7c <__errno>
 800b6fc:	2321      	movs	r3, #33	; 0x21
 800b6fe:	6003      	str	r3, [r0, #0]
 800b700:	e7df      	b.n	800b6c2 <sqrt+0x6a>
 800b702:	bf00      	nop
 800b704:	200001e4 	.word	0x200001e4
 800b708:	0800c93a 	.word	0x0800c93a
 800b70c:	00000000 	.word	0x00000000

0800b710 <__ieee754_pow>:
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	b091      	sub	sp, #68	; 0x44
 800b716:	ed8d 1b00 	vstr	d1, [sp]
 800b71a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b71e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b722:	ea58 0302 	orrs.w	r3, r8, r2
 800b726:	ec57 6b10 	vmov	r6, r7, d0
 800b72a:	f000 84be 	beq.w	800c0aa <__ieee754_pow+0x99a>
 800b72e:	4b7a      	ldr	r3, [pc, #488]	; (800b918 <__ieee754_pow+0x208>)
 800b730:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b734:	429c      	cmp	r4, r3
 800b736:	463d      	mov	r5, r7
 800b738:	ee10 aa10 	vmov	sl, s0
 800b73c:	dc09      	bgt.n	800b752 <__ieee754_pow+0x42>
 800b73e:	d103      	bne.n	800b748 <__ieee754_pow+0x38>
 800b740:	b93e      	cbnz	r6, 800b752 <__ieee754_pow+0x42>
 800b742:	45a0      	cmp	r8, r4
 800b744:	dc0d      	bgt.n	800b762 <__ieee754_pow+0x52>
 800b746:	e001      	b.n	800b74c <__ieee754_pow+0x3c>
 800b748:	4598      	cmp	r8, r3
 800b74a:	dc02      	bgt.n	800b752 <__ieee754_pow+0x42>
 800b74c:	4598      	cmp	r8, r3
 800b74e:	d10e      	bne.n	800b76e <__ieee754_pow+0x5e>
 800b750:	b16a      	cbz	r2, 800b76e <__ieee754_pow+0x5e>
 800b752:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b756:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b75a:	ea54 030a 	orrs.w	r3, r4, sl
 800b75e:	f000 84a4 	beq.w	800c0aa <__ieee754_pow+0x99a>
 800b762:	486e      	ldr	r0, [pc, #440]	; (800b91c <__ieee754_pow+0x20c>)
 800b764:	b011      	add	sp, #68	; 0x44
 800b766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76a:	f000 bda5 	b.w	800c2b8 <nan>
 800b76e:	2d00      	cmp	r5, #0
 800b770:	da53      	bge.n	800b81a <__ieee754_pow+0x10a>
 800b772:	4b6b      	ldr	r3, [pc, #428]	; (800b920 <__ieee754_pow+0x210>)
 800b774:	4598      	cmp	r8, r3
 800b776:	dc4d      	bgt.n	800b814 <__ieee754_pow+0x104>
 800b778:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b77c:	4598      	cmp	r8, r3
 800b77e:	dd4c      	ble.n	800b81a <__ieee754_pow+0x10a>
 800b780:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b784:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b788:	2b14      	cmp	r3, #20
 800b78a:	dd26      	ble.n	800b7da <__ieee754_pow+0xca>
 800b78c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b790:	fa22 f103 	lsr.w	r1, r2, r3
 800b794:	fa01 f303 	lsl.w	r3, r1, r3
 800b798:	4293      	cmp	r3, r2
 800b79a:	d13e      	bne.n	800b81a <__ieee754_pow+0x10a>
 800b79c:	f001 0101 	and.w	r1, r1, #1
 800b7a0:	f1c1 0b02 	rsb	fp, r1, #2
 800b7a4:	2a00      	cmp	r2, #0
 800b7a6:	d15b      	bne.n	800b860 <__ieee754_pow+0x150>
 800b7a8:	4b5b      	ldr	r3, [pc, #364]	; (800b918 <__ieee754_pow+0x208>)
 800b7aa:	4598      	cmp	r8, r3
 800b7ac:	d124      	bne.n	800b7f8 <__ieee754_pow+0xe8>
 800b7ae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b7b2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b7b6:	ea53 030a 	orrs.w	r3, r3, sl
 800b7ba:	f000 8476 	beq.w	800c0aa <__ieee754_pow+0x99a>
 800b7be:	4b59      	ldr	r3, [pc, #356]	; (800b924 <__ieee754_pow+0x214>)
 800b7c0:	429c      	cmp	r4, r3
 800b7c2:	dd2d      	ble.n	800b820 <__ieee754_pow+0x110>
 800b7c4:	f1b9 0f00 	cmp.w	r9, #0
 800b7c8:	f280 8473 	bge.w	800c0b2 <__ieee754_pow+0x9a2>
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	ec41 0b10 	vmov	d0, r0, r1
 800b7d4:	b011      	add	sp, #68	; 0x44
 800b7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7da:	2a00      	cmp	r2, #0
 800b7dc:	d13e      	bne.n	800b85c <__ieee754_pow+0x14c>
 800b7de:	f1c3 0314 	rsb	r3, r3, #20
 800b7e2:	fa48 f103 	asr.w	r1, r8, r3
 800b7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ea:	4543      	cmp	r3, r8
 800b7ec:	f040 8469 	bne.w	800c0c2 <__ieee754_pow+0x9b2>
 800b7f0:	f001 0101 	and.w	r1, r1, #1
 800b7f4:	f1c1 0b02 	rsb	fp, r1, #2
 800b7f8:	4b4b      	ldr	r3, [pc, #300]	; (800b928 <__ieee754_pow+0x218>)
 800b7fa:	4598      	cmp	r8, r3
 800b7fc:	d118      	bne.n	800b830 <__ieee754_pow+0x120>
 800b7fe:	f1b9 0f00 	cmp.w	r9, #0
 800b802:	f280 845a 	bge.w	800c0ba <__ieee754_pow+0x9aa>
 800b806:	4948      	ldr	r1, [pc, #288]	; (800b928 <__ieee754_pow+0x218>)
 800b808:	4632      	mov	r2, r6
 800b80a:	463b      	mov	r3, r7
 800b80c:	2000      	movs	r0, #0
 800b80e:	f7f5 f81d 	bl	800084c <__aeabi_ddiv>
 800b812:	e7dd      	b.n	800b7d0 <__ieee754_pow+0xc0>
 800b814:	f04f 0b02 	mov.w	fp, #2
 800b818:	e7c4      	b.n	800b7a4 <__ieee754_pow+0x94>
 800b81a:	f04f 0b00 	mov.w	fp, #0
 800b81e:	e7c1      	b.n	800b7a4 <__ieee754_pow+0x94>
 800b820:	f1b9 0f00 	cmp.w	r9, #0
 800b824:	dad2      	bge.n	800b7cc <__ieee754_pow+0xbc>
 800b826:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b82a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b82e:	e7cf      	b.n	800b7d0 <__ieee754_pow+0xc0>
 800b830:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b834:	d106      	bne.n	800b844 <__ieee754_pow+0x134>
 800b836:	4632      	mov	r2, r6
 800b838:	463b      	mov	r3, r7
 800b83a:	4610      	mov	r0, r2
 800b83c:	4619      	mov	r1, r3
 800b83e:	f7f4 fedb 	bl	80005f8 <__aeabi_dmul>
 800b842:	e7c5      	b.n	800b7d0 <__ieee754_pow+0xc0>
 800b844:	4b39      	ldr	r3, [pc, #228]	; (800b92c <__ieee754_pow+0x21c>)
 800b846:	4599      	cmp	r9, r3
 800b848:	d10a      	bne.n	800b860 <__ieee754_pow+0x150>
 800b84a:	2d00      	cmp	r5, #0
 800b84c:	db08      	blt.n	800b860 <__ieee754_pow+0x150>
 800b84e:	ec47 6b10 	vmov	d0, r6, r7
 800b852:	b011      	add	sp, #68	; 0x44
 800b854:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b858:	f000 bc68 	b.w	800c12c <__ieee754_sqrt>
 800b85c:	f04f 0b00 	mov.w	fp, #0
 800b860:	ec47 6b10 	vmov	d0, r6, r7
 800b864:	f000 fd12 	bl	800c28c <fabs>
 800b868:	ec51 0b10 	vmov	r0, r1, d0
 800b86c:	f1ba 0f00 	cmp.w	sl, #0
 800b870:	d127      	bne.n	800b8c2 <__ieee754_pow+0x1b2>
 800b872:	b124      	cbz	r4, 800b87e <__ieee754_pow+0x16e>
 800b874:	4b2c      	ldr	r3, [pc, #176]	; (800b928 <__ieee754_pow+0x218>)
 800b876:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d121      	bne.n	800b8c2 <__ieee754_pow+0x1b2>
 800b87e:	f1b9 0f00 	cmp.w	r9, #0
 800b882:	da05      	bge.n	800b890 <__ieee754_pow+0x180>
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	2000      	movs	r0, #0
 800b88a:	4927      	ldr	r1, [pc, #156]	; (800b928 <__ieee754_pow+0x218>)
 800b88c:	f7f4 ffde 	bl	800084c <__aeabi_ddiv>
 800b890:	2d00      	cmp	r5, #0
 800b892:	da9d      	bge.n	800b7d0 <__ieee754_pow+0xc0>
 800b894:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b898:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b89c:	ea54 030b 	orrs.w	r3, r4, fp
 800b8a0:	d108      	bne.n	800b8b4 <__ieee754_pow+0x1a4>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	f7f4 fced 	bl	8000288 <__aeabi_dsub>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	e7ac      	b.n	800b80e <__ieee754_pow+0xfe>
 800b8b4:	f1bb 0f01 	cmp.w	fp, #1
 800b8b8:	d18a      	bne.n	800b7d0 <__ieee754_pow+0xc0>
 800b8ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8be:	4619      	mov	r1, r3
 800b8c0:	e786      	b.n	800b7d0 <__ieee754_pow+0xc0>
 800b8c2:	0fed      	lsrs	r5, r5, #31
 800b8c4:	1e6b      	subs	r3, r5, #1
 800b8c6:	930d      	str	r3, [sp, #52]	; 0x34
 800b8c8:	ea5b 0303 	orrs.w	r3, fp, r3
 800b8cc:	d102      	bne.n	800b8d4 <__ieee754_pow+0x1c4>
 800b8ce:	4632      	mov	r2, r6
 800b8d0:	463b      	mov	r3, r7
 800b8d2:	e7e8      	b.n	800b8a6 <__ieee754_pow+0x196>
 800b8d4:	4b16      	ldr	r3, [pc, #88]	; (800b930 <__ieee754_pow+0x220>)
 800b8d6:	4598      	cmp	r8, r3
 800b8d8:	f340 80fe 	ble.w	800bad8 <__ieee754_pow+0x3c8>
 800b8dc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b8e0:	4598      	cmp	r8, r3
 800b8e2:	dd0a      	ble.n	800b8fa <__ieee754_pow+0x1ea>
 800b8e4:	4b0f      	ldr	r3, [pc, #60]	; (800b924 <__ieee754_pow+0x214>)
 800b8e6:	429c      	cmp	r4, r3
 800b8e8:	dc0d      	bgt.n	800b906 <__ieee754_pow+0x1f6>
 800b8ea:	f1b9 0f00 	cmp.w	r9, #0
 800b8ee:	f6bf af6d 	bge.w	800b7cc <__ieee754_pow+0xbc>
 800b8f2:	a307      	add	r3, pc, #28	; (adr r3, 800b910 <__ieee754_pow+0x200>)
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	e79f      	b.n	800b83a <__ieee754_pow+0x12a>
 800b8fa:	4b0e      	ldr	r3, [pc, #56]	; (800b934 <__ieee754_pow+0x224>)
 800b8fc:	429c      	cmp	r4, r3
 800b8fe:	ddf4      	ble.n	800b8ea <__ieee754_pow+0x1da>
 800b900:	4b09      	ldr	r3, [pc, #36]	; (800b928 <__ieee754_pow+0x218>)
 800b902:	429c      	cmp	r4, r3
 800b904:	dd18      	ble.n	800b938 <__ieee754_pow+0x228>
 800b906:	f1b9 0f00 	cmp.w	r9, #0
 800b90a:	dcf2      	bgt.n	800b8f2 <__ieee754_pow+0x1e2>
 800b90c:	e75e      	b.n	800b7cc <__ieee754_pow+0xbc>
 800b90e:	bf00      	nop
 800b910:	8800759c 	.word	0x8800759c
 800b914:	7e37e43c 	.word	0x7e37e43c
 800b918:	7ff00000 	.word	0x7ff00000
 800b91c:	0800c829 	.word	0x0800c829
 800b920:	433fffff 	.word	0x433fffff
 800b924:	3fefffff 	.word	0x3fefffff
 800b928:	3ff00000 	.word	0x3ff00000
 800b92c:	3fe00000 	.word	0x3fe00000
 800b930:	41e00000 	.word	0x41e00000
 800b934:	3feffffe 	.word	0x3feffffe
 800b938:	2200      	movs	r2, #0
 800b93a:	4b63      	ldr	r3, [pc, #396]	; (800bac8 <__ieee754_pow+0x3b8>)
 800b93c:	f7f4 fca4 	bl	8000288 <__aeabi_dsub>
 800b940:	a355      	add	r3, pc, #340	; (adr r3, 800ba98 <__ieee754_pow+0x388>)
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	4604      	mov	r4, r0
 800b948:	460d      	mov	r5, r1
 800b94a:	f7f4 fe55 	bl	80005f8 <__aeabi_dmul>
 800b94e:	a354      	add	r3, pc, #336	; (adr r3, 800baa0 <__ieee754_pow+0x390>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	4606      	mov	r6, r0
 800b956:	460f      	mov	r7, r1
 800b958:	4620      	mov	r0, r4
 800b95a:	4629      	mov	r1, r5
 800b95c:	f7f4 fe4c 	bl	80005f8 <__aeabi_dmul>
 800b960:	2200      	movs	r2, #0
 800b962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b966:	4b59      	ldr	r3, [pc, #356]	; (800bacc <__ieee754_pow+0x3bc>)
 800b968:	4620      	mov	r0, r4
 800b96a:	4629      	mov	r1, r5
 800b96c:	f7f4 fe44 	bl	80005f8 <__aeabi_dmul>
 800b970:	4602      	mov	r2, r0
 800b972:	460b      	mov	r3, r1
 800b974:	a14c      	add	r1, pc, #304	; (adr r1, 800baa8 <__ieee754_pow+0x398>)
 800b976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b97a:	f7f4 fc85 	bl	8000288 <__aeabi_dsub>
 800b97e:	4622      	mov	r2, r4
 800b980:	462b      	mov	r3, r5
 800b982:	f7f4 fe39 	bl	80005f8 <__aeabi_dmul>
 800b986:	4602      	mov	r2, r0
 800b988:	460b      	mov	r3, r1
 800b98a:	2000      	movs	r0, #0
 800b98c:	4950      	ldr	r1, [pc, #320]	; (800bad0 <__ieee754_pow+0x3c0>)
 800b98e:	f7f4 fc7b 	bl	8000288 <__aeabi_dsub>
 800b992:	4622      	mov	r2, r4
 800b994:	462b      	mov	r3, r5
 800b996:	4680      	mov	r8, r0
 800b998:	4689      	mov	r9, r1
 800b99a:	4620      	mov	r0, r4
 800b99c:	4629      	mov	r1, r5
 800b99e:	f7f4 fe2b 	bl	80005f8 <__aeabi_dmul>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	4649      	mov	r1, r9
 800b9aa:	f7f4 fe25 	bl	80005f8 <__aeabi_dmul>
 800b9ae:	a340      	add	r3, pc, #256	; (adr r3, 800bab0 <__ieee754_pow+0x3a0>)
 800b9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b4:	f7f4 fe20 	bl	80005f8 <__aeabi_dmul>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9c0:	f7f4 fc62 	bl	8000288 <__aeabi_dsub>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	460d      	mov	r5, r1
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	4639      	mov	r1, r7
 800b9d0:	f7f4 fc5c 	bl	800028c <__adddf3>
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9da:	4632      	mov	r2, r6
 800b9dc:	463b      	mov	r3, r7
 800b9de:	f7f4 fc53 	bl	8000288 <__aeabi_dsub>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	f7f4 fc4d 	bl	8000288 <__aeabi_dsub>
 800b9ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9f0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	460f      	mov	r7, r1
 800b9fa:	f040 81eb 	bne.w	800bdd4 <__ieee754_pow+0x6c4>
 800b9fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800bab8 <__ieee754_pow+0x3a8>
 800ba02:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ba06:	2400      	movs	r4, #0
 800ba08:	4622      	mov	r2, r4
 800ba0a:	462b      	mov	r3, r5
 800ba0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba10:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba14:	f7f4 fc38 	bl	8000288 <__aeabi_dsub>
 800ba18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba1c:	f7f4 fdec 	bl	80005f8 <__aeabi_dmul>
 800ba20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba24:	4680      	mov	r8, r0
 800ba26:	4689      	mov	r9, r1
 800ba28:	4630      	mov	r0, r6
 800ba2a:	4639      	mov	r1, r7
 800ba2c:	f7f4 fde4 	bl	80005f8 <__aeabi_dmul>
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	4640      	mov	r0, r8
 800ba36:	4649      	mov	r1, r9
 800ba38:	f7f4 fc28 	bl	800028c <__adddf3>
 800ba3c:	4622      	mov	r2, r4
 800ba3e:	462b      	mov	r3, r5
 800ba40:	4680      	mov	r8, r0
 800ba42:	4689      	mov	r9, r1
 800ba44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba48:	f7f4 fdd6 	bl	80005f8 <__aeabi_dmul>
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4604      	mov	r4, r0
 800ba50:	460d      	mov	r5, r1
 800ba52:	4602      	mov	r2, r0
 800ba54:	4649      	mov	r1, r9
 800ba56:	4640      	mov	r0, r8
 800ba58:	e9cd 4500 	strd	r4, r5, [sp]
 800ba5c:	f7f4 fc16 	bl	800028c <__adddf3>
 800ba60:	4b1c      	ldr	r3, [pc, #112]	; (800bad4 <__ieee754_pow+0x3c4>)
 800ba62:	4299      	cmp	r1, r3
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	468b      	mov	fp, r1
 800ba6a:	f340 82f7 	ble.w	800c05c <__ieee754_pow+0x94c>
 800ba6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ba72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ba76:	4303      	orrs	r3, r0
 800ba78:	f000 81ea 	beq.w	800be50 <__ieee754_pow+0x740>
 800ba7c:	a310      	add	r3, pc, #64	; (adr r3, 800bac0 <__ieee754_pow+0x3b0>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba86:	f7f4 fdb7 	bl	80005f8 <__aeabi_dmul>
 800ba8a:	a30d      	add	r3, pc, #52	; (adr r3, 800bac0 <__ieee754_pow+0x3b0>)
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	e6d5      	b.n	800b83e <__ieee754_pow+0x12e>
 800ba92:	bf00      	nop
 800ba94:	f3af 8000 	nop.w
 800ba98:	60000000 	.word	0x60000000
 800ba9c:	3ff71547 	.word	0x3ff71547
 800baa0:	f85ddf44 	.word	0xf85ddf44
 800baa4:	3e54ae0b 	.word	0x3e54ae0b
 800baa8:	55555555 	.word	0x55555555
 800baac:	3fd55555 	.word	0x3fd55555
 800bab0:	652b82fe 	.word	0x652b82fe
 800bab4:	3ff71547 	.word	0x3ff71547
 800bab8:	00000000 	.word	0x00000000
 800babc:	bff00000 	.word	0xbff00000
 800bac0:	8800759c 	.word	0x8800759c
 800bac4:	7e37e43c 	.word	0x7e37e43c
 800bac8:	3ff00000 	.word	0x3ff00000
 800bacc:	3fd00000 	.word	0x3fd00000
 800bad0:	3fe00000 	.word	0x3fe00000
 800bad4:	408fffff 	.word	0x408fffff
 800bad8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800badc:	f04f 0200 	mov.w	r2, #0
 800bae0:	da05      	bge.n	800baee <__ieee754_pow+0x3de>
 800bae2:	4bd3      	ldr	r3, [pc, #844]	; (800be30 <__ieee754_pow+0x720>)
 800bae4:	f7f4 fd88 	bl	80005f8 <__aeabi_dmul>
 800bae8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800baec:	460c      	mov	r4, r1
 800baee:	1523      	asrs	r3, r4, #20
 800baf0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800baf4:	4413      	add	r3, r2
 800baf6:	9309      	str	r3, [sp, #36]	; 0x24
 800baf8:	4bce      	ldr	r3, [pc, #824]	; (800be34 <__ieee754_pow+0x724>)
 800bafa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bafe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bb02:	429c      	cmp	r4, r3
 800bb04:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bb08:	dd08      	ble.n	800bb1c <__ieee754_pow+0x40c>
 800bb0a:	4bcb      	ldr	r3, [pc, #812]	; (800be38 <__ieee754_pow+0x728>)
 800bb0c:	429c      	cmp	r4, r3
 800bb0e:	f340 815e 	ble.w	800bdce <__ieee754_pow+0x6be>
 800bb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb14:	3301      	adds	r3, #1
 800bb16:	9309      	str	r3, [sp, #36]	; 0x24
 800bb18:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bb1c:	f04f 0a00 	mov.w	sl, #0
 800bb20:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bb24:	930c      	str	r3, [sp, #48]	; 0x30
 800bb26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb28:	4bc4      	ldr	r3, [pc, #784]	; (800be3c <__ieee754_pow+0x72c>)
 800bb2a:	4413      	add	r3, r2
 800bb2c:	ed93 7b00 	vldr	d7, [r3]
 800bb30:	4629      	mov	r1, r5
 800bb32:	ec53 2b17 	vmov	r2, r3, d7
 800bb36:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb3a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bb3e:	f7f4 fba3 	bl	8000288 <__aeabi_dsub>
 800bb42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb46:	4606      	mov	r6, r0
 800bb48:	460f      	mov	r7, r1
 800bb4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb4e:	f7f4 fb9d 	bl	800028c <__adddf3>
 800bb52:	4602      	mov	r2, r0
 800bb54:	460b      	mov	r3, r1
 800bb56:	2000      	movs	r0, #0
 800bb58:	49b9      	ldr	r1, [pc, #740]	; (800be40 <__ieee754_pow+0x730>)
 800bb5a:	f7f4 fe77 	bl	800084c <__aeabi_ddiv>
 800bb5e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	4630      	mov	r0, r6
 800bb68:	4639      	mov	r1, r7
 800bb6a:	f7f4 fd45 	bl	80005f8 <__aeabi_dmul>
 800bb6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb72:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bb76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	9302      	str	r3, [sp, #8]
 800bb7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb82:	106d      	asrs	r5, r5, #1
 800bb84:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bb88:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bb92:	4640      	mov	r0, r8
 800bb94:	4649      	mov	r1, r9
 800bb96:	4614      	mov	r4, r2
 800bb98:	461d      	mov	r5, r3
 800bb9a:	f7f4 fd2d 	bl	80005f8 <__aeabi_dmul>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	460b      	mov	r3, r1
 800bba2:	4630      	mov	r0, r6
 800bba4:	4639      	mov	r1, r7
 800bba6:	f7f4 fb6f 	bl	8000288 <__aeabi_dsub>
 800bbaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbae:	4606      	mov	r6, r0
 800bbb0:	460f      	mov	r7, r1
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	f7f4 fb67 	bl	8000288 <__aeabi_dsub>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bbc2:	f7f4 fb61 	bl	8000288 <__aeabi_dsub>
 800bbc6:	4642      	mov	r2, r8
 800bbc8:	464b      	mov	r3, r9
 800bbca:	f7f4 fd15 	bl	80005f8 <__aeabi_dmul>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	f7f4 fb57 	bl	8000288 <__aeabi_dsub>
 800bbda:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bbde:	f7f4 fd0b 	bl	80005f8 <__aeabi_dmul>
 800bbe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbe6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bbea:	4610      	mov	r0, r2
 800bbec:	4619      	mov	r1, r3
 800bbee:	f7f4 fd03 	bl	80005f8 <__aeabi_dmul>
 800bbf2:	a37b      	add	r3, pc, #492	; (adr r3, 800bde0 <__ieee754_pow+0x6d0>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	460d      	mov	r5, r1
 800bbfc:	f7f4 fcfc 	bl	80005f8 <__aeabi_dmul>
 800bc00:	a379      	add	r3, pc, #484	; (adr r3, 800bde8 <__ieee754_pow+0x6d8>)
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	f7f4 fb41 	bl	800028c <__adddf3>
 800bc0a:	4622      	mov	r2, r4
 800bc0c:	462b      	mov	r3, r5
 800bc0e:	f7f4 fcf3 	bl	80005f8 <__aeabi_dmul>
 800bc12:	a377      	add	r3, pc, #476	; (adr r3, 800bdf0 <__ieee754_pow+0x6e0>)
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	f7f4 fb38 	bl	800028c <__adddf3>
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	462b      	mov	r3, r5
 800bc20:	f7f4 fcea 	bl	80005f8 <__aeabi_dmul>
 800bc24:	a374      	add	r3, pc, #464	; (adr r3, 800bdf8 <__ieee754_pow+0x6e8>)
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	f7f4 fb2f 	bl	800028c <__adddf3>
 800bc2e:	4622      	mov	r2, r4
 800bc30:	462b      	mov	r3, r5
 800bc32:	f7f4 fce1 	bl	80005f8 <__aeabi_dmul>
 800bc36:	a372      	add	r3, pc, #456	; (adr r3, 800be00 <__ieee754_pow+0x6f0>)
 800bc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3c:	f7f4 fb26 	bl	800028c <__adddf3>
 800bc40:	4622      	mov	r2, r4
 800bc42:	462b      	mov	r3, r5
 800bc44:	f7f4 fcd8 	bl	80005f8 <__aeabi_dmul>
 800bc48:	a36f      	add	r3, pc, #444	; (adr r3, 800be08 <__ieee754_pow+0x6f8>)
 800bc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4e:	f7f4 fb1d 	bl	800028c <__adddf3>
 800bc52:	4622      	mov	r2, r4
 800bc54:	4606      	mov	r6, r0
 800bc56:	460f      	mov	r7, r1
 800bc58:	462b      	mov	r3, r5
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	f7f4 fccb 	bl	80005f8 <__aeabi_dmul>
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	4630      	mov	r0, r6
 800bc68:	4639      	mov	r1, r7
 800bc6a:	f7f4 fcc5 	bl	80005f8 <__aeabi_dmul>
 800bc6e:	4642      	mov	r2, r8
 800bc70:	4604      	mov	r4, r0
 800bc72:	460d      	mov	r5, r1
 800bc74:	464b      	mov	r3, r9
 800bc76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc7a:	f7f4 fb07 	bl	800028c <__adddf3>
 800bc7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc82:	f7f4 fcb9 	bl	80005f8 <__aeabi_dmul>
 800bc86:	4622      	mov	r2, r4
 800bc88:	462b      	mov	r3, r5
 800bc8a:	f7f4 faff 	bl	800028c <__adddf3>
 800bc8e:	4642      	mov	r2, r8
 800bc90:	4606      	mov	r6, r0
 800bc92:	460f      	mov	r7, r1
 800bc94:	464b      	mov	r3, r9
 800bc96:	4640      	mov	r0, r8
 800bc98:	4649      	mov	r1, r9
 800bc9a:	f7f4 fcad 	bl	80005f8 <__aeabi_dmul>
 800bc9e:	2200      	movs	r2, #0
 800bca0:	4b68      	ldr	r3, [pc, #416]	; (800be44 <__ieee754_pow+0x734>)
 800bca2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bca6:	f7f4 faf1 	bl	800028c <__adddf3>
 800bcaa:	4632      	mov	r2, r6
 800bcac:	463b      	mov	r3, r7
 800bcae:	f7f4 faed 	bl	800028c <__adddf3>
 800bcb2:	9802      	ldr	r0, [sp, #8]
 800bcb4:	460d      	mov	r5, r1
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4640      	mov	r0, r8
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	f7f4 fc9a 	bl	80005f8 <__aeabi_dmul>
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	4680      	mov	r8, r0
 800bcc8:	4689      	mov	r9, r1
 800bcca:	4b5e      	ldr	r3, [pc, #376]	; (800be44 <__ieee754_pow+0x734>)
 800bccc:	4620      	mov	r0, r4
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f4 fada 	bl	8000288 <__aeabi_dsub>
 800bcd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bcd8:	f7f4 fad6 	bl	8000288 <__aeabi_dsub>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4630      	mov	r0, r6
 800bce2:	4639      	mov	r1, r7
 800bce4:	f7f4 fad0 	bl	8000288 <__aeabi_dsub>
 800bce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcec:	f7f4 fc84 	bl	80005f8 <__aeabi_dmul>
 800bcf0:	4622      	mov	r2, r4
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	460f      	mov	r7, r1
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcfc:	f7f4 fc7c 	bl	80005f8 <__aeabi_dmul>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	4630      	mov	r0, r6
 800bd06:	4639      	mov	r1, r7
 800bd08:	f7f4 fac0 	bl	800028c <__adddf3>
 800bd0c:	4606      	mov	r6, r0
 800bd0e:	460f      	mov	r7, r1
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4640      	mov	r0, r8
 800bd16:	4649      	mov	r1, r9
 800bd18:	f7f4 fab8 	bl	800028c <__adddf3>
 800bd1c:	9802      	ldr	r0, [sp, #8]
 800bd1e:	a33c      	add	r3, pc, #240	; (adr r3, 800be10 <__ieee754_pow+0x700>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	4604      	mov	r4, r0
 800bd26:	460d      	mov	r5, r1
 800bd28:	f7f4 fc66 	bl	80005f8 <__aeabi_dmul>
 800bd2c:	4642      	mov	r2, r8
 800bd2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd32:	464b      	mov	r3, r9
 800bd34:	4620      	mov	r0, r4
 800bd36:	4629      	mov	r1, r5
 800bd38:	f7f4 faa6 	bl	8000288 <__aeabi_dsub>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4630      	mov	r0, r6
 800bd42:	4639      	mov	r1, r7
 800bd44:	f7f4 faa0 	bl	8000288 <__aeabi_dsub>
 800bd48:	a333      	add	r3, pc, #204	; (adr r3, 800be18 <__ieee754_pow+0x708>)
 800bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4e:	f7f4 fc53 	bl	80005f8 <__aeabi_dmul>
 800bd52:	a333      	add	r3, pc, #204	; (adr r3, 800be20 <__ieee754_pow+0x710>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	4606      	mov	r6, r0
 800bd5a:	460f      	mov	r7, r1
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 fc4a 	bl	80005f8 <__aeabi_dmul>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	f7f4 fa8e 	bl	800028c <__adddf3>
 800bd70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd72:	4b35      	ldr	r3, [pc, #212]	; (800be48 <__ieee754_pow+0x738>)
 800bd74:	4413      	add	r3, r2
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	f7f4 fa87 	bl	800028c <__adddf3>
 800bd7e:	4604      	mov	r4, r0
 800bd80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd82:	460d      	mov	r5, r1
 800bd84:	f7f4 fbce 	bl	8000524 <__aeabi_i2d>
 800bd88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd8a:	4b30      	ldr	r3, [pc, #192]	; (800be4c <__ieee754_pow+0x73c>)
 800bd8c:	4413      	add	r3, r2
 800bd8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd92:	4606      	mov	r6, r0
 800bd94:	460f      	mov	r7, r1
 800bd96:	4622      	mov	r2, r4
 800bd98:	462b      	mov	r3, r5
 800bd9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd9e:	f7f4 fa75 	bl	800028c <__adddf3>
 800bda2:	4642      	mov	r2, r8
 800bda4:	464b      	mov	r3, r9
 800bda6:	f7f4 fa71 	bl	800028c <__adddf3>
 800bdaa:	4632      	mov	r2, r6
 800bdac:	463b      	mov	r3, r7
 800bdae:	f7f4 fa6d 	bl	800028c <__adddf3>
 800bdb2:	9802      	ldr	r0, [sp, #8]
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	463b      	mov	r3, r7
 800bdb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdbc:	f7f4 fa64 	bl	8000288 <__aeabi_dsub>
 800bdc0:	4642      	mov	r2, r8
 800bdc2:	464b      	mov	r3, r9
 800bdc4:	f7f4 fa60 	bl	8000288 <__aeabi_dsub>
 800bdc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdcc:	e607      	b.n	800b9de <__ieee754_pow+0x2ce>
 800bdce:	f04f 0a01 	mov.w	sl, #1
 800bdd2:	e6a5      	b.n	800bb20 <__ieee754_pow+0x410>
 800bdd4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800be28 <__ieee754_pow+0x718>
 800bdd8:	e613      	b.n	800ba02 <__ieee754_pow+0x2f2>
 800bdda:	bf00      	nop
 800bddc:	f3af 8000 	nop.w
 800bde0:	4a454eef 	.word	0x4a454eef
 800bde4:	3fca7e28 	.word	0x3fca7e28
 800bde8:	93c9db65 	.word	0x93c9db65
 800bdec:	3fcd864a 	.word	0x3fcd864a
 800bdf0:	a91d4101 	.word	0xa91d4101
 800bdf4:	3fd17460 	.word	0x3fd17460
 800bdf8:	518f264d 	.word	0x518f264d
 800bdfc:	3fd55555 	.word	0x3fd55555
 800be00:	db6fabff 	.word	0xdb6fabff
 800be04:	3fdb6db6 	.word	0x3fdb6db6
 800be08:	33333303 	.word	0x33333303
 800be0c:	3fe33333 	.word	0x3fe33333
 800be10:	e0000000 	.word	0xe0000000
 800be14:	3feec709 	.word	0x3feec709
 800be18:	dc3a03fd 	.word	0xdc3a03fd
 800be1c:	3feec709 	.word	0x3feec709
 800be20:	145b01f5 	.word	0x145b01f5
 800be24:	be3e2fe0 	.word	0xbe3e2fe0
 800be28:	00000000 	.word	0x00000000
 800be2c:	3ff00000 	.word	0x3ff00000
 800be30:	43400000 	.word	0x43400000
 800be34:	0003988e 	.word	0x0003988e
 800be38:	000bb679 	.word	0x000bb679
 800be3c:	0800c940 	.word	0x0800c940
 800be40:	3ff00000 	.word	0x3ff00000
 800be44:	40080000 	.word	0x40080000
 800be48:	0800c960 	.word	0x0800c960
 800be4c:	0800c950 	.word	0x0800c950
 800be50:	a3b4      	add	r3, pc, #720	; (adr r3, 800c124 <__ieee754_pow+0xa14>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	4640      	mov	r0, r8
 800be58:	4649      	mov	r1, r9
 800be5a:	f7f4 fa17 	bl	800028c <__adddf3>
 800be5e:	4622      	mov	r2, r4
 800be60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be64:	462b      	mov	r3, r5
 800be66:	4630      	mov	r0, r6
 800be68:	4639      	mov	r1, r7
 800be6a:	f7f4 fa0d 	bl	8000288 <__aeabi_dsub>
 800be6e:	4602      	mov	r2, r0
 800be70:	460b      	mov	r3, r1
 800be72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be76:	f7f4 fe4f 	bl	8000b18 <__aeabi_dcmpgt>
 800be7a:	2800      	cmp	r0, #0
 800be7c:	f47f adfe 	bne.w	800ba7c <__ieee754_pow+0x36c>
 800be80:	4aa3      	ldr	r2, [pc, #652]	; (800c110 <__ieee754_pow+0xa00>)
 800be82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be86:	4293      	cmp	r3, r2
 800be88:	f340 810a 	ble.w	800c0a0 <__ieee754_pow+0x990>
 800be8c:	151b      	asrs	r3, r3, #20
 800be8e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800be92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800be96:	fa4a f303 	asr.w	r3, sl, r3
 800be9a:	445b      	add	r3, fp
 800be9c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bea0:	4e9c      	ldr	r6, [pc, #624]	; (800c114 <__ieee754_pow+0xa04>)
 800bea2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bea6:	4116      	asrs	r6, r2
 800bea8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800beac:	2000      	movs	r0, #0
 800beae:	ea23 0106 	bic.w	r1, r3, r6
 800beb2:	f1c2 0214 	rsb	r2, r2, #20
 800beb6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800beba:	fa4a fa02 	asr.w	sl, sl, r2
 800bebe:	f1bb 0f00 	cmp.w	fp, #0
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	4620      	mov	r0, r4
 800bec8:	4629      	mov	r1, r5
 800beca:	bfb8      	it	lt
 800becc:	f1ca 0a00 	rsblt	sl, sl, #0
 800bed0:	f7f4 f9da 	bl	8000288 <__aeabi_dsub>
 800bed4:	e9cd 0100 	strd	r0, r1, [sp]
 800bed8:	4642      	mov	r2, r8
 800beda:	464b      	mov	r3, r9
 800bedc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bee0:	f7f4 f9d4 	bl	800028c <__adddf3>
 800bee4:	2000      	movs	r0, #0
 800bee6:	a378      	add	r3, pc, #480	; (adr r3, 800c0c8 <__ieee754_pow+0x9b8>)
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	4604      	mov	r4, r0
 800beee:	460d      	mov	r5, r1
 800bef0:	f7f4 fb82 	bl	80005f8 <__aeabi_dmul>
 800bef4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bef8:	4606      	mov	r6, r0
 800befa:	460f      	mov	r7, r1
 800befc:	4620      	mov	r0, r4
 800befe:	4629      	mov	r1, r5
 800bf00:	f7f4 f9c2 	bl	8000288 <__aeabi_dsub>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	4640      	mov	r0, r8
 800bf0a:	4649      	mov	r1, r9
 800bf0c:	f7f4 f9bc 	bl	8000288 <__aeabi_dsub>
 800bf10:	a36f      	add	r3, pc, #444	; (adr r3, 800c0d0 <__ieee754_pow+0x9c0>)
 800bf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf16:	f7f4 fb6f 	bl	80005f8 <__aeabi_dmul>
 800bf1a:	a36f      	add	r3, pc, #444	; (adr r3, 800c0d8 <__ieee754_pow+0x9c8>)
 800bf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf20:	4680      	mov	r8, r0
 800bf22:	4689      	mov	r9, r1
 800bf24:	4620      	mov	r0, r4
 800bf26:	4629      	mov	r1, r5
 800bf28:	f7f4 fb66 	bl	80005f8 <__aeabi_dmul>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4640      	mov	r0, r8
 800bf32:	4649      	mov	r1, r9
 800bf34:	f7f4 f9aa 	bl	800028c <__adddf3>
 800bf38:	4604      	mov	r4, r0
 800bf3a:	460d      	mov	r5, r1
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4630      	mov	r0, r6
 800bf42:	4639      	mov	r1, r7
 800bf44:	f7f4 f9a2 	bl	800028c <__adddf3>
 800bf48:	4632      	mov	r2, r6
 800bf4a:	463b      	mov	r3, r7
 800bf4c:	4680      	mov	r8, r0
 800bf4e:	4689      	mov	r9, r1
 800bf50:	f7f4 f99a 	bl	8000288 <__aeabi_dsub>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4620      	mov	r0, r4
 800bf5a:	4629      	mov	r1, r5
 800bf5c:	f7f4 f994 	bl	8000288 <__aeabi_dsub>
 800bf60:	4642      	mov	r2, r8
 800bf62:	4606      	mov	r6, r0
 800bf64:	460f      	mov	r7, r1
 800bf66:	464b      	mov	r3, r9
 800bf68:	4640      	mov	r0, r8
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	f7f4 fb44 	bl	80005f8 <__aeabi_dmul>
 800bf70:	a35b      	add	r3, pc, #364	; (adr r3, 800c0e0 <__ieee754_pow+0x9d0>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	4604      	mov	r4, r0
 800bf78:	460d      	mov	r5, r1
 800bf7a:	f7f4 fb3d 	bl	80005f8 <__aeabi_dmul>
 800bf7e:	a35a      	add	r3, pc, #360	; (adr r3, 800c0e8 <__ieee754_pow+0x9d8>)
 800bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf84:	f7f4 f980 	bl	8000288 <__aeabi_dsub>
 800bf88:	4622      	mov	r2, r4
 800bf8a:	462b      	mov	r3, r5
 800bf8c:	f7f4 fb34 	bl	80005f8 <__aeabi_dmul>
 800bf90:	a357      	add	r3, pc, #348	; (adr r3, 800c0f0 <__ieee754_pow+0x9e0>)
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	f7f4 f979 	bl	800028c <__adddf3>
 800bf9a:	4622      	mov	r2, r4
 800bf9c:	462b      	mov	r3, r5
 800bf9e:	f7f4 fb2b 	bl	80005f8 <__aeabi_dmul>
 800bfa2:	a355      	add	r3, pc, #340	; (adr r3, 800c0f8 <__ieee754_pow+0x9e8>)
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	f7f4 f96e 	bl	8000288 <__aeabi_dsub>
 800bfac:	4622      	mov	r2, r4
 800bfae:	462b      	mov	r3, r5
 800bfb0:	f7f4 fb22 	bl	80005f8 <__aeabi_dmul>
 800bfb4:	a352      	add	r3, pc, #328	; (adr r3, 800c100 <__ieee754_pow+0x9f0>)
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	f7f4 f967 	bl	800028c <__adddf3>
 800bfbe:	4622      	mov	r2, r4
 800bfc0:	462b      	mov	r3, r5
 800bfc2:	f7f4 fb19 	bl	80005f8 <__aeabi_dmul>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	4640      	mov	r0, r8
 800bfcc:	4649      	mov	r1, r9
 800bfce:	f7f4 f95b 	bl	8000288 <__aeabi_dsub>
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	460d      	mov	r5, r1
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4640      	mov	r0, r8
 800bfdc:	4649      	mov	r1, r9
 800bfde:	f7f4 fb0b 	bl	80005f8 <__aeabi_dmul>
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	e9cd 0100 	strd	r0, r1, [sp]
 800bfe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfec:	4620      	mov	r0, r4
 800bfee:	4629      	mov	r1, r5
 800bff0:	f7f4 f94a 	bl	8000288 <__aeabi_dsub>
 800bff4:	4602      	mov	r2, r0
 800bff6:	460b      	mov	r3, r1
 800bff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bffc:	f7f4 fc26 	bl	800084c <__aeabi_ddiv>
 800c000:	4632      	mov	r2, r6
 800c002:	4604      	mov	r4, r0
 800c004:	460d      	mov	r5, r1
 800c006:	463b      	mov	r3, r7
 800c008:	4640      	mov	r0, r8
 800c00a:	4649      	mov	r1, r9
 800c00c:	f7f4 faf4 	bl	80005f8 <__aeabi_dmul>
 800c010:	4632      	mov	r2, r6
 800c012:	463b      	mov	r3, r7
 800c014:	f7f4 f93a 	bl	800028c <__adddf3>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4620      	mov	r0, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	f7f4 f932 	bl	8000288 <__aeabi_dsub>
 800c024:	4642      	mov	r2, r8
 800c026:	464b      	mov	r3, r9
 800c028:	f7f4 f92e 	bl	8000288 <__aeabi_dsub>
 800c02c:	4602      	mov	r2, r0
 800c02e:	460b      	mov	r3, r1
 800c030:	2000      	movs	r0, #0
 800c032:	4939      	ldr	r1, [pc, #228]	; (800c118 <__ieee754_pow+0xa08>)
 800c034:	f7f4 f928 	bl	8000288 <__aeabi_dsub>
 800c038:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c03c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	da2f      	bge.n	800c0a6 <__ieee754_pow+0x996>
 800c046:	4650      	mov	r0, sl
 800c048:	ec43 2b10 	vmov	d0, r2, r3
 800c04c:	f000 f9c0 	bl	800c3d0 <scalbn>
 800c050:	ec51 0b10 	vmov	r0, r1, d0
 800c054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c058:	f7ff bbf1 	b.w	800b83e <__ieee754_pow+0x12e>
 800c05c:	4b2f      	ldr	r3, [pc, #188]	; (800c11c <__ieee754_pow+0xa0c>)
 800c05e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c062:	429e      	cmp	r6, r3
 800c064:	f77f af0c 	ble.w	800be80 <__ieee754_pow+0x770>
 800c068:	4b2d      	ldr	r3, [pc, #180]	; (800c120 <__ieee754_pow+0xa10>)
 800c06a:	440b      	add	r3, r1
 800c06c:	4303      	orrs	r3, r0
 800c06e:	d00b      	beq.n	800c088 <__ieee754_pow+0x978>
 800c070:	a325      	add	r3, pc, #148	; (adr r3, 800c108 <__ieee754_pow+0x9f8>)
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c07a:	f7f4 fabd 	bl	80005f8 <__aeabi_dmul>
 800c07e:	a322      	add	r3, pc, #136	; (adr r3, 800c108 <__ieee754_pow+0x9f8>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	f7ff bbdb 	b.w	800b83e <__ieee754_pow+0x12e>
 800c088:	4622      	mov	r2, r4
 800c08a:	462b      	mov	r3, r5
 800c08c:	f7f4 f8fc 	bl	8000288 <__aeabi_dsub>
 800c090:	4642      	mov	r2, r8
 800c092:	464b      	mov	r3, r9
 800c094:	f7f4 fd36 	bl	8000b04 <__aeabi_dcmpge>
 800c098:	2800      	cmp	r0, #0
 800c09a:	f43f aef1 	beq.w	800be80 <__ieee754_pow+0x770>
 800c09e:	e7e7      	b.n	800c070 <__ieee754_pow+0x960>
 800c0a0:	f04f 0a00 	mov.w	sl, #0
 800c0a4:	e718      	b.n	800bed8 <__ieee754_pow+0x7c8>
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	e7d4      	b.n	800c054 <__ieee754_pow+0x944>
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	491a      	ldr	r1, [pc, #104]	; (800c118 <__ieee754_pow+0xa08>)
 800c0ae:	f7ff bb8f 	b.w	800b7d0 <__ieee754_pow+0xc0>
 800c0b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0b6:	f7ff bb8b 	b.w	800b7d0 <__ieee754_pow+0xc0>
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	4639      	mov	r1, r7
 800c0be:	f7ff bb87 	b.w	800b7d0 <__ieee754_pow+0xc0>
 800c0c2:	4693      	mov	fp, r2
 800c0c4:	f7ff bb98 	b.w	800b7f8 <__ieee754_pow+0xe8>
 800c0c8:	00000000 	.word	0x00000000
 800c0cc:	3fe62e43 	.word	0x3fe62e43
 800c0d0:	fefa39ef 	.word	0xfefa39ef
 800c0d4:	3fe62e42 	.word	0x3fe62e42
 800c0d8:	0ca86c39 	.word	0x0ca86c39
 800c0dc:	be205c61 	.word	0xbe205c61
 800c0e0:	72bea4d0 	.word	0x72bea4d0
 800c0e4:	3e663769 	.word	0x3e663769
 800c0e8:	c5d26bf1 	.word	0xc5d26bf1
 800c0ec:	3ebbbd41 	.word	0x3ebbbd41
 800c0f0:	af25de2c 	.word	0xaf25de2c
 800c0f4:	3f11566a 	.word	0x3f11566a
 800c0f8:	16bebd93 	.word	0x16bebd93
 800c0fc:	3f66c16c 	.word	0x3f66c16c
 800c100:	5555553e 	.word	0x5555553e
 800c104:	3fc55555 	.word	0x3fc55555
 800c108:	c2f8f359 	.word	0xc2f8f359
 800c10c:	01a56e1f 	.word	0x01a56e1f
 800c110:	3fe00000 	.word	0x3fe00000
 800c114:	000fffff 	.word	0x000fffff
 800c118:	3ff00000 	.word	0x3ff00000
 800c11c:	4090cbff 	.word	0x4090cbff
 800c120:	3f6f3400 	.word	0x3f6f3400
 800c124:	652b82fe 	.word	0x652b82fe
 800c128:	3c971547 	.word	0x3c971547

0800c12c <__ieee754_sqrt>:
 800c12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c130:	4955      	ldr	r1, [pc, #340]	; (800c288 <__ieee754_sqrt+0x15c>)
 800c132:	ec55 4b10 	vmov	r4, r5, d0
 800c136:	43a9      	bics	r1, r5
 800c138:	462b      	mov	r3, r5
 800c13a:	462a      	mov	r2, r5
 800c13c:	d112      	bne.n	800c164 <__ieee754_sqrt+0x38>
 800c13e:	ee10 2a10 	vmov	r2, s0
 800c142:	ee10 0a10 	vmov	r0, s0
 800c146:	4629      	mov	r1, r5
 800c148:	f7f4 fa56 	bl	80005f8 <__aeabi_dmul>
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	4620      	mov	r0, r4
 800c152:	4629      	mov	r1, r5
 800c154:	f7f4 f89a 	bl	800028c <__adddf3>
 800c158:	4604      	mov	r4, r0
 800c15a:	460d      	mov	r5, r1
 800c15c:	ec45 4b10 	vmov	d0, r4, r5
 800c160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c164:	2d00      	cmp	r5, #0
 800c166:	ee10 0a10 	vmov	r0, s0
 800c16a:	4621      	mov	r1, r4
 800c16c:	dc0f      	bgt.n	800c18e <__ieee754_sqrt+0x62>
 800c16e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c172:	4330      	orrs	r0, r6
 800c174:	d0f2      	beq.n	800c15c <__ieee754_sqrt+0x30>
 800c176:	b155      	cbz	r5, 800c18e <__ieee754_sqrt+0x62>
 800c178:	ee10 2a10 	vmov	r2, s0
 800c17c:	4620      	mov	r0, r4
 800c17e:	4629      	mov	r1, r5
 800c180:	f7f4 f882 	bl	8000288 <__aeabi_dsub>
 800c184:	4602      	mov	r2, r0
 800c186:	460b      	mov	r3, r1
 800c188:	f7f4 fb60 	bl	800084c <__aeabi_ddiv>
 800c18c:	e7e4      	b.n	800c158 <__ieee754_sqrt+0x2c>
 800c18e:	151b      	asrs	r3, r3, #20
 800c190:	d073      	beq.n	800c27a <__ieee754_sqrt+0x14e>
 800c192:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c196:	07dd      	lsls	r5, r3, #31
 800c198:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c19c:	bf48      	it	mi
 800c19e:	0fc8      	lsrmi	r0, r1, #31
 800c1a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c1a4:	bf44      	itt	mi
 800c1a6:	0049      	lslmi	r1, r1, #1
 800c1a8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c1ac:	2500      	movs	r5, #0
 800c1ae:	1058      	asrs	r0, r3, #1
 800c1b0:	0fcb      	lsrs	r3, r1, #31
 800c1b2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c1b6:	0049      	lsls	r1, r1, #1
 800c1b8:	2316      	movs	r3, #22
 800c1ba:	462c      	mov	r4, r5
 800c1bc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c1c0:	19a7      	adds	r7, r4, r6
 800c1c2:	4297      	cmp	r7, r2
 800c1c4:	bfde      	ittt	le
 800c1c6:	19bc      	addle	r4, r7, r6
 800c1c8:	1bd2      	suble	r2, r2, r7
 800c1ca:	19ad      	addle	r5, r5, r6
 800c1cc:	0fcf      	lsrs	r7, r1, #31
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c1d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c1d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c1dc:	d1f0      	bne.n	800c1c0 <__ieee754_sqrt+0x94>
 800c1de:	f04f 0c20 	mov.w	ip, #32
 800c1e2:	469e      	mov	lr, r3
 800c1e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c1e8:	42a2      	cmp	r2, r4
 800c1ea:	eb06 070e 	add.w	r7, r6, lr
 800c1ee:	dc02      	bgt.n	800c1f6 <__ieee754_sqrt+0xca>
 800c1f0:	d112      	bne.n	800c218 <__ieee754_sqrt+0xec>
 800c1f2:	428f      	cmp	r7, r1
 800c1f4:	d810      	bhi.n	800c218 <__ieee754_sqrt+0xec>
 800c1f6:	2f00      	cmp	r7, #0
 800c1f8:	eb07 0e06 	add.w	lr, r7, r6
 800c1fc:	da42      	bge.n	800c284 <__ieee754_sqrt+0x158>
 800c1fe:	f1be 0f00 	cmp.w	lr, #0
 800c202:	db3f      	blt.n	800c284 <__ieee754_sqrt+0x158>
 800c204:	f104 0801 	add.w	r8, r4, #1
 800c208:	1b12      	subs	r2, r2, r4
 800c20a:	428f      	cmp	r7, r1
 800c20c:	bf88      	it	hi
 800c20e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c212:	1bc9      	subs	r1, r1, r7
 800c214:	4433      	add	r3, r6
 800c216:	4644      	mov	r4, r8
 800c218:	0052      	lsls	r2, r2, #1
 800c21a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c21e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c222:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c226:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c22a:	d1dd      	bne.n	800c1e8 <__ieee754_sqrt+0xbc>
 800c22c:	430a      	orrs	r2, r1
 800c22e:	d006      	beq.n	800c23e <__ieee754_sqrt+0x112>
 800c230:	1c5c      	adds	r4, r3, #1
 800c232:	bf13      	iteet	ne
 800c234:	3301      	addne	r3, #1
 800c236:	3501      	addeq	r5, #1
 800c238:	4663      	moveq	r3, ip
 800c23a:	f023 0301 	bicne.w	r3, r3, #1
 800c23e:	106a      	asrs	r2, r5, #1
 800c240:	085b      	lsrs	r3, r3, #1
 800c242:	07e9      	lsls	r1, r5, #31
 800c244:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c248:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c24c:	bf48      	it	mi
 800c24e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c252:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c256:	461c      	mov	r4, r3
 800c258:	e780      	b.n	800c15c <__ieee754_sqrt+0x30>
 800c25a:	0aca      	lsrs	r2, r1, #11
 800c25c:	3815      	subs	r0, #21
 800c25e:	0549      	lsls	r1, r1, #21
 800c260:	2a00      	cmp	r2, #0
 800c262:	d0fa      	beq.n	800c25a <__ieee754_sqrt+0x12e>
 800c264:	02d6      	lsls	r6, r2, #11
 800c266:	d50a      	bpl.n	800c27e <__ieee754_sqrt+0x152>
 800c268:	f1c3 0420 	rsb	r4, r3, #32
 800c26c:	fa21 f404 	lsr.w	r4, r1, r4
 800c270:	1e5d      	subs	r5, r3, #1
 800c272:	4099      	lsls	r1, r3
 800c274:	4322      	orrs	r2, r4
 800c276:	1b43      	subs	r3, r0, r5
 800c278:	e78b      	b.n	800c192 <__ieee754_sqrt+0x66>
 800c27a:	4618      	mov	r0, r3
 800c27c:	e7f0      	b.n	800c260 <__ieee754_sqrt+0x134>
 800c27e:	0052      	lsls	r2, r2, #1
 800c280:	3301      	adds	r3, #1
 800c282:	e7ef      	b.n	800c264 <__ieee754_sqrt+0x138>
 800c284:	46a0      	mov	r8, r4
 800c286:	e7bf      	b.n	800c208 <__ieee754_sqrt+0xdc>
 800c288:	7ff00000 	.word	0x7ff00000

0800c28c <fabs>:
 800c28c:	ec51 0b10 	vmov	r0, r1, d0
 800c290:	ee10 2a10 	vmov	r2, s0
 800c294:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c298:	ec43 2b10 	vmov	d0, r2, r3
 800c29c:	4770      	bx	lr

0800c29e <finite>:
 800c29e:	ee10 3a90 	vmov	r3, s1
 800c2a2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800c2a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c2aa:	0fc0      	lsrs	r0, r0, #31
 800c2ac:	4770      	bx	lr

0800c2ae <matherr>:
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	4770      	bx	lr
 800c2b2:	0000      	movs	r0, r0
 800c2b4:	0000      	movs	r0, r0
	...

0800c2b8 <nan>:
 800c2b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2c0 <nan+0x8>
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	00000000 	.word	0x00000000
 800c2c4:	7ff80000 	.word	0x7ff80000

0800c2c8 <rint>:
 800c2c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2ca:	ec51 0b10 	vmov	r0, r1, d0
 800c2ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c2d2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c2d6:	2e13      	cmp	r6, #19
 800c2d8:	460b      	mov	r3, r1
 800c2da:	ee10 4a10 	vmov	r4, s0
 800c2de:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c2e2:	dc56      	bgt.n	800c392 <rint+0xca>
 800c2e4:	2e00      	cmp	r6, #0
 800c2e6:	da2b      	bge.n	800c340 <rint+0x78>
 800c2e8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c2ec:	4302      	orrs	r2, r0
 800c2ee:	d023      	beq.n	800c338 <rint+0x70>
 800c2f0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c2f4:	4302      	orrs	r2, r0
 800c2f6:	4254      	negs	r4, r2
 800c2f8:	4314      	orrs	r4, r2
 800c2fa:	0c4b      	lsrs	r3, r1, #17
 800c2fc:	0b24      	lsrs	r4, r4, #12
 800c2fe:	045b      	lsls	r3, r3, #17
 800c300:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c304:	ea44 0103 	orr.w	r1, r4, r3
 800c308:	460b      	mov	r3, r1
 800c30a:	492f      	ldr	r1, [pc, #188]	; (800c3c8 <rint+0x100>)
 800c30c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800c310:	e9d1 6700 	ldrd	r6, r7, [r1]
 800c314:	4602      	mov	r2, r0
 800c316:	4639      	mov	r1, r7
 800c318:	4630      	mov	r0, r6
 800c31a:	f7f3 ffb7 	bl	800028c <__adddf3>
 800c31e:	e9cd 0100 	strd	r0, r1, [sp]
 800c322:	463b      	mov	r3, r7
 800c324:	4632      	mov	r2, r6
 800c326:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c32a:	f7f3 ffad 	bl	8000288 <__aeabi_dsub>
 800c32e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c332:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c336:	4639      	mov	r1, r7
 800c338:	ec41 0b10 	vmov	d0, r0, r1
 800c33c:	b003      	add	sp, #12
 800c33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c340:	4a22      	ldr	r2, [pc, #136]	; (800c3cc <rint+0x104>)
 800c342:	4132      	asrs	r2, r6
 800c344:	ea01 0702 	and.w	r7, r1, r2
 800c348:	4307      	orrs	r7, r0
 800c34a:	d0f5      	beq.n	800c338 <rint+0x70>
 800c34c:	0852      	lsrs	r2, r2, #1
 800c34e:	4011      	ands	r1, r2
 800c350:	430c      	orrs	r4, r1
 800c352:	d00b      	beq.n	800c36c <rint+0xa4>
 800c354:	ea23 0202 	bic.w	r2, r3, r2
 800c358:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c35c:	2e13      	cmp	r6, #19
 800c35e:	fa43 f306 	asr.w	r3, r3, r6
 800c362:	bf0c      	ite	eq
 800c364:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c368:	2400      	movne	r4, #0
 800c36a:	4313      	orrs	r3, r2
 800c36c:	4916      	ldr	r1, [pc, #88]	; (800c3c8 <rint+0x100>)
 800c36e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c372:	4622      	mov	r2, r4
 800c374:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c378:	4620      	mov	r0, r4
 800c37a:	4629      	mov	r1, r5
 800c37c:	f7f3 ff86 	bl	800028c <__adddf3>
 800c380:	e9cd 0100 	strd	r0, r1, [sp]
 800c384:	4622      	mov	r2, r4
 800c386:	462b      	mov	r3, r5
 800c388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c38c:	f7f3 ff7c 	bl	8000288 <__aeabi_dsub>
 800c390:	e7d2      	b.n	800c338 <rint+0x70>
 800c392:	2e33      	cmp	r6, #51	; 0x33
 800c394:	dd07      	ble.n	800c3a6 <rint+0xde>
 800c396:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c39a:	d1cd      	bne.n	800c338 <rint+0x70>
 800c39c:	ee10 2a10 	vmov	r2, s0
 800c3a0:	f7f3 ff74 	bl	800028c <__adddf3>
 800c3a4:	e7c8      	b.n	800c338 <rint+0x70>
 800c3a6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800c3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ae:	40f2      	lsrs	r2, r6
 800c3b0:	4210      	tst	r0, r2
 800c3b2:	d0c1      	beq.n	800c338 <rint+0x70>
 800c3b4:	0852      	lsrs	r2, r2, #1
 800c3b6:	4210      	tst	r0, r2
 800c3b8:	bf1f      	itttt	ne
 800c3ba:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c3be:	ea20 0202 	bicne.w	r2, r0, r2
 800c3c2:	4134      	asrne	r4, r6
 800c3c4:	4314      	orrne	r4, r2
 800c3c6:	e7d1      	b.n	800c36c <rint+0xa4>
 800c3c8:	0800c970 	.word	0x0800c970
 800c3cc:	000fffff 	.word	0x000fffff

0800c3d0 <scalbn>:
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	ec55 4b10 	vmov	r4, r5, d0
 800c3d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c3da:	4606      	mov	r6, r0
 800c3dc:	462b      	mov	r3, r5
 800c3de:	b9aa      	cbnz	r2, 800c40c <scalbn+0x3c>
 800c3e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c3e4:	4323      	orrs	r3, r4
 800c3e6:	d03b      	beq.n	800c460 <scalbn+0x90>
 800c3e8:	4b31      	ldr	r3, [pc, #196]	; (800c4b0 <scalbn+0xe0>)
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	ee10 0a10 	vmov	r0, s0
 800c3f2:	f7f4 f901 	bl	80005f8 <__aeabi_dmul>
 800c3f6:	4b2f      	ldr	r3, [pc, #188]	; (800c4b4 <scalbn+0xe4>)
 800c3f8:	429e      	cmp	r6, r3
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	460d      	mov	r5, r1
 800c3fe:	da12      	bge.n	800c426 <scalbn+0x56>
 800c400:	a327      	add	r3, pc, #156	; (adr r3, 800c4a0 <scalbn+0xd0>)
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	f7f4 f8f7 	bl	80005f8 <__aeabi_dmul>
 800c40a:	e009      	b.n	800c420 <scalbn+0x50>
 800c40c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c410:	428a      	cmp	r2, r1
 800c412:	d10c      	bne.n	800c42e <scalbn+0x5e>
 800c414:	ee10 2a10 	vmov	r2, s0
 800c418:	4620      	mov	r0, r4
 800c41a:	4629      	mov	r1, r5
 800c41c:	f7f3 ff36 	bl	800028c <__adddf3>
 800c420:	4604      	mov	r4, r0
 800c422:	460d      	mov	r5, r1
 800c424:	e01c      	b.n	800c460 <scalbn+0x90>
 800c426:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c42a:	460b      	mov	r3, r1
 800c42c:	3a36      	subs	r2, #54	; 0x36
 800c42e:	4432      	add	r2, r6
 800c430:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c434:	428a      	cmp	r2, r1
 800c436:	dd0b      	ble.n	800c450 <scalbn+0x80>
 800c438:	ec45 4b11 	vmov	d1, r4, r5
 800c43c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c4a8 <scalbn+0xd8>
 800c440:	f000 f83c 	bl	800c4bc <copysign>
 800c444:	a318      	add	r3, pc, #96	; (adr r3, 800c4a8 <scalbn+0xd8>)
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	ec51 0b10 	vmov	r0, r1, d0
 800c44e:	e7da      	b.n	800c406 <scalbn+0x36>
 800c450:	2a00      	cmp	r2, #0
 800c452:	dd08      	ble.n	800c466 <scalbn+0x96>
 800c454:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c458:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c45c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c460:	ec45 4b10 	vmov	d0, r4, r5
 800c464:	bd70      	pop	{r4, r5, r6, pc}
 800c466:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c46a:	da0d      	bge.n	800c488 <scalbn+0xb8>
 800c46c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c470:	429e      	cmp	r6, r3
 800c472:	ec45 4b11 	vmov	d1, r4, r5
 800c476:	dce1      	bgt.n	800c43c <scalbn+0x6c>
 800c478:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c4a0 <scalbn+0xd0>
 800c47c:	f000 f81e 	bl	800c4bc <copysign>
 800c480:	a307      	add	r3, pc, #28	; (adr r3, 800c4a0 <scalbn+0xd0>)
 800c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c486:	e7e0      	b.n	800c44a <scalbn+0x7a>
 800c488:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c48c:	3236      	adds	r2, #54	; 0x36
 800c48e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c492:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c496:	4620      	mov	r0, r4
 800c498:	4629      	mov	r1, r5
 800c49a:	2200      	movs	r2, #0
 800c49c:	4b06      	ldr	r3, [pc, #24]	; (800c4b8 <scalbn+0xe8>)
 800c49e:	e7b2      	b.n	800c406 <scalbn+0x36>
 800c4a0:	c2f8f359 	.word	0xc2f8f359
 800c4a4:	01a56e1f 	.word	0x01a56e1f
 800c4a8:	8800759c 	.word	0x8800759c
 800c4ac:	7e37e43c 	.word	0x7e37e43c
 800c4b0:	43500000 	.word	0x43500000
 800c4b4:	ffff3cb0 	.word	0xffff3cb0
 800c4b8:	3c900000 	.word	0x3c900000

0800c4bc <copysign>:
 800c4bc:	ec51 0b10 	vmov	r0, r1, d0
 800c4c0:	ee11 0a90 	vmov	r0, s3
 800c4c4:	ee10 2a10 	vmov	r2, s0
 800c4c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c4cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c4d0:	ea41 0300 	orr.w	r3, r1, r0
 800c4d4:	ec43 2b10 	vmov	d0, r2, r3
 800c4d8:	4770      	bx	lr
	...

0800c4dc <_init>:
 800c4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4de:	bf00      	nop
 800c4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4e2:	bc08      	pop	{r3}
 800c4e4:	469e      	mov	lr, r3
 800c4e6:	4770      	bx	lr

0800c4e8 <_fini>:
 800c4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ea:	bf00      	nop
 800c4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ee:	bc08      	pop	{r3}
 800c4f0:	469e      	mov	lr, r3
 800c4f2:	4770      	bx	lr
